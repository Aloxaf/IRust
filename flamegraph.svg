<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180"><g><title>_int_free (3 samples, 0.10%)</title><rect x="0.1027%" y="661" width="0.1027%" height="15" fill="rgb(227,0,7)"/><text x="0.3527%" y="671.50"></text></g><g><title>[anon] (11 samples, 0.38%)</title><rect x="0.1027%" y="677" width="0.3765%" height="15" fill="rgb(217,0,24)"/><text x="0.3527%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.4791%" y="677" width="0.1027%" height="15" fill="rgb(221,193,54)"/><text x="0.7291%" y="687.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.21%)</title><rect x="0.7529%" y="261" width="0.2053%" height="15" fill="rgb(248,212,6)"/><text x="1.0029%" y="271.50"></text></g><g><title>__rdl_alloc (3 samples, 0.10%)</title><rect x="0.9582%" y="261" width="0.1027%" height="15" fill="rgb(208,68,35)"/><text x="1.2082%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::new (11 samples, 0.38%)</title><rect x="0.7187%" y="389" width="0.3765%" height="15" fill="rgb(232,128,0)"/><text x="0.9687%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::with_capacity (11 samples, 0.38%)</title><rect x="0.7187%" y="373" width="0.3765%" height="15" fill="rgb(207,160,47)"/><text x="0.9687%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.34%)</title><rect x="0.7529%" y="357" width="0.3422%" height="15" fill="rgb(228,23,34)"/><text x="1.0029%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.34%)</title><rect x="0.7529%" y="341" width="0.3422%" height="15" fill="rgb(218,30,26)"/><text x="1.0029%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.34%)</title><rect x="0.7529%" y="325" width="0.3422%" height="15" fill="rgb(220,122,19)"/><text x="1.0029%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.34%)</title><rect x="0.7529%" y="309" width="0.3422%" height="15" fill="rgb(250,228,42)"/><text x="1.0029%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.34%)</title><rect x="0.7529%" y="293" width="0.3422%" height="15" fill="rgb(240,193,28)"/><text x="1.0029%" y="303.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.34%)</title><rect x="0.7529%" y="277" width="0.3422%" height="15" fill="rgb(216,20,37)"/><text x="1.0029%" y="287.50"></text></g><g><title>__GI___libc_free (6 samples, 0.21%)</title><rect x="1.0951%" y="309" width="0.2053%" height="15" fill="rgb(206,188,39)"/><text x="1.3451%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.34%)</title><rect x="1.0951%" y="389" width="0.3422%" height="15" fill="rgb(217,207,13)"/><text x="1.3451%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.34%)</title><rect x="1.0951%" y="373" width="0.3422%" height="15" fill="rgb(231,73,38)"/><text x="1.3451%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.34%)</title><rect x="1.0951%" y="357" width="0.3422%" height="15" fill="rgb(225,20,46)"/><text x="1.3451%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (10 samples, 0.34%)</title><rect x="1.0951%" y="341" width="0.3422%" height="15" fill="rgb(210,31,41)"/><text x="1.3451%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.34%)</title><rect x="1.0951%" y="325" width="0.3422%" height="15" fill="rgb(221,200,47)"/><text x="1.3451%" y="335.50"></text></g><g><title>&lt;crossterm::event::source::unix::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (6 samples, 0.21%)</title><rect x="1.5058%" y="373" width="0.2053%" height="15" fill="rgb(226,26,5)"/><text x="1.7558%" y="383.50"></text></g><g><title>crossterm::event::read (37 samples, 1.27%)</title><rect x="0.6160%" y="437" width="1.2663%" height="15" fill="rgb(249,33,26)"/><text x="0.8660%" y="447.50"></text></g><g><title>crossterm::event::read_internal (34 samples, 1.16%)</title><rect x="0.7187%" y="421" width="1.1636%" height="15" fill="rgb(235,183,28)"/><text x="0.9687%" y="431.50"></text></g><g><title>crossterm::event::read::InternalEventReader::read (34 samples, 1.16%)</title><rect x="0.7187%" y="405" width="1.1636%" height="15" fill="rgb(221,5,38)"/><text x="0.9687%" y="415.50"></text></g><g><title>crossterm::event::read::InternalEventReader::poll (13 samples, 0.44%)</title><rect x="1.4374%" y="389" width="0.4449%" height="15" fill="rgb(247,18,42)"/><text x="1.6874%" y="399.50"></text></g><g><title>crossterm::event::timeout::PollTimeout::new (5 samples, 0.17%)</title><rect x="1.7112%" y="373" width="0.1711%" height="15" fill="rgb(241,131,45)"/><text x="1.9612%" y="383.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.17%)</title><rect x="1.7112%" y="357" width="0.1711%" height="15" fill="rgb(249,31,29)"/><text x="1.9612%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (5 samples, 0.17%)</title><rect x="1.7112%" y="341" width="0.1711%" height="15" fill="rgb(225,111,53)"/><text x="1.9612%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::now (5 samples, 0.17%)</title><rect x="1.7112%" y="325" width="0.1711%" height="15" fill="rgb(238,160,17)"/><text x="1.9612%" y="335.50"></text></g><g><title>__clock_gettime_2 (4 samples, 0.14%)</title><rect x="1.7454%" y="309" width="0.1369%" height="15" fill="rgb(214,148,48)"/><text x="1.9954%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_and_swap (3 samples, 0.10%)</title><rect x="2.0192%" y="389" width="0.1027%" height="15" fill="rgb(232,36,49)"/><text x="2.2692%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (3 samples, 0.10%)</title><rect x="2.0192%" y="373" width="0.1027%" height="15" fill="rgb(209,103,24)"/><text x="2.2692%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.10%)</title><rect x="2.0192%" y="357" width="0.1027%" height="15" fill="rgb(229,88,8)"/><text x="2.2692%" y="367.50"></text></g><g><title>std::sync::mpsc::blocking::SignalToken::signal (76 samples, 2.60%)</title><rect x="2.0192%" y="405" width="2.6010%" height="15" fill="rgb(213,181,19)"/><text x="2.2692%" y="415.50">st..</text></g><g><title>std::thread::Thread::unpark (73 samples, 2.50%)</title><rect x="2.1218%" y="389" width="2.4983%" height="15" fill="rgb(254,191,54)"/><text x="2.3718%" y="399.50">st..</text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (73 samples, 2.50%)</title><rect x="2.1218%" y="373" width="2.4983%" height="15" fill="rgb(241,83,37)"/><text x="2.3718%" y="383.50">st..</text></g><g><title>std::sys::unix::futex::futex_wake (73 samples, 2.50%)</title><rect x="2.1218%" y="357" width="2.4983%" height="15" fill="rgb(233,36,39)"/><text x="2.3718%" y="367.50">st..</text></g><g><title>syscall (73 samples, 2.50%)</title><rect x="2.1218%" y="341" width="2.4983%" height="15" fill="rgb(226,3,54)"/><text x="2.3718%" y="351.50">sy..</text></g><g><title>std::sync::mpsc::Sender&lt;T&gt;::send (87 samples, 2.98%)</title><rect x="1.8823%" y="437" width="2.9774%" height="15" fill="rgb(245,192,40)"/><text x="2.1323%" y="447.50">std..</text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::send (84 samples, 2.87%)</title><rect x="1.9849%" y="421" width="2.8747%" height="15" fill="rgb(238,167,29)"/><text x="2.2349%" y="431.50">st..</text></g><g><title>std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::push (7 samples, 0.24%)</title><rect x="4.6201%" y="405" width="0.2396%" height="15" fill="rgb(232,182,51)"/><text x="4.8701%" y="415.50"></text></g><g><title>std::sync::mpsc::mpsc_queue::Node&lt;T&gt;::new (6 samples, 0.21%)</title><rect x="4.6543%" y="389" width="0.2053%" height="15" fill="rgb(231,60,39)"/><text x="4.9043%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.21%)</title><rect x="4.6543%" y="373" width="0.2053%" height="15" fill="rgb(208,69,12)"/><text x="4.9043%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.21%)</title><rect x="4.6543%" y="357" width="0.2053%" height="15" fill="rgb(235,93,37)"/><text x="4.9043%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.21%)</title><rect x="4.6543%" y="341" width="0.2053%" height="15" fill="rgb(213,116,39)"/><text x="4.9043%" y="351.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.21%)</title><rect x="4.6543%" y="325" width="0.2053%" height="15" fill="rgb(222,207,29)"/><text x="4.9043%" y="335.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.21%)</title><rect x="4.6543%" y="309" width="0.2053%" height="15" fill="rgb(206,96,30)"/><text x="4.9043%" y="319.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (132 samples, 4.52%)</title><rect x="4.8597%" y="421" width="4.5175%" height="15" fill="rgb(218,138,4)"/><text x="5.1097%" y="431.50">std::..</text></g><g><title>std::sys::unix::futex::futex_wait (130 samples, 4.45%)</title><rect x="4.9281%" y="405" width="4.4490%" height="15" fill="rgb(250,191,14)"/><text x="5.1781%" y="415.50">std::..</text></g><g><title>syscall (130 samples, 4.45%)</title><rect x="4.9281%" y="389" width="4.4490%" height="15" fill="rgb(239,60,40)"/><text x="5.1781%" y="399.50">sysca..</text></g><g><title>__GI___clone (259 samples, 8.86%)</title><rect x="0.5818%" y="677" width="8.8638%" height="15" fill="rgb(206,27,48)"/><text x="0.8318%" y="687.50">__GI___clone</text></g><g><title>start_thread (259 samples, 8.86%)</title><rect x="0.5818%" y="661" width="8.8638%" height="15" fill="rgb(225,35,8)"/><text x="0.8318%" y="671.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (259 samples, 8.86%)</title><rect x="0.5818%" y="645" width="8.8638%" height="15" fill="rgb(250,213,24)"/><text x="0.8318%" y="655.50">std::sys::uni..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (259 samples, 8.86%)</title><rect x="0.5818%" y="629" width="8.8638%" height="15" fill="rgb(247,123,22)"/><text x="0.8318%" y="639.50">&lt;alloc::boxed..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (259 samples, 8.86%)</title><rect x="0.5818%" y="613" width="8.8638%" height="15" fill="rgb(231,138,38)"/><text x="0.8318%" y="623.50">&lt;alloc::boxed..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (259 samples, 8.86%)</title><rect x="0.5818%" y="597" width="8.8638%" height="15" fill="rgb(231,145,46)"/><text x="0.8318%" y="607.50">core::ops::fu..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (259 samples, 8.86%)</title><rect x="0.5818%" y="581" width="8.8638%" height="15" fill="rgb(251,118,11)"/><text x="0.8318%" y="591.50">std::thread::..</text></g><g><title>std::panic::catch_unwind (259 samples, 8.86%)</title><rect x="0.5818%" y="565" width="8.8638%" height="15" fill="rgb(217,147,25)"/><text x="0.8318%" y="575.50">std::panic::c..</text></g><g><title>std::panicking::try (259 samples, 8.86%)</title><rect x="0.5818%" y="549" width="8.8638%" height="15" fill="rgb(247,81,37)"/><text x="0.8318%" y="559.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (259 samples, 8.86%)</title><rect x="0.5818%" y="533" width="8.8638%" height="15" fill="rgb(209,12,38)"/><text x="0.8318%" y="543.50">std::panickin..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (259 samples, 8.86%)</title><rect x="0.5818%" y="517" width="8.8638%" height="15" fill="rgb(227,1,9)"/><text x="0.8318%" y="527.50">&lt;std::panic::..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (259 samples, 8.86%)</title><rect x="0.5818%" y="501" width="8.8638%" height="15" fill="rgb(248,47,43)"/><text x="0.8318%" y="511.50">std::thread::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (259 samples, 8.86%)</title><rect x="0.5818%" y="485" width="8.8638%" height="15" fill="rgb(221,10,30)"/><text x="0.8318%" y="495.50">std::sys_comm..</text></g><g><title>irust::irust::input_read::{{closure}} (259 samples, 8.86%)</title><rect x="0.5818%" y="469" width="8.8638%" height="15" fill="rgb(210,229,1)"/><text x="0.8318%" y="479.50">irust::irust:..</text></g><g><title>irust::irust::input_read::{{closure}}::{{closure}} (259 samples, 8.86%)</title><rect x="0.5818%" y="453" width="8.8638%" height="15" fill="rgb(222,148,37)"/><text x="0.8318%" y="463.50">irust::irust:..</text></g><g><title>std::thread::park (134 samples, 4.59%)</title><rect x="4.8597%" y="437" width="4.5859%" height="15" fill="rgb(234,67,33)"/><text x="5.1097%" y="447.50">std::..</text></g><g><title>Input (279 samples, 9.55%)</title><rect x="0.0000%" y="693" width="9.5483%" height="15" fill="rgb(247,98,35)"/><text x="0.2500%" y="703.50">Input</text></g><g><title>Watcher (9 samples, 0.31%)</title><rect x="9.5483%" y="693" width="0.3080%" height="15" fill="rgb(247,138,52)"/><text x="9.7983%" y="703.50"></text></g><g><title>__GI___clone (9 samples, 0.31%)</title><rect x="9.5483%" y="677" width="0.3080%" height="15" fill="rgb(213,79,30)"/><text x="9.7983%" y="687.50"></text></g><g><title>[rustup] (3 samples, 0.10%)</title><rect x="10.1643%" y="533" width="0.1027%" height="15" fill="rgb(246,177,23)"/><text x="10.4143%" y="543.50"></text></g><g><title>[rustup] (3 samples, 0.10%)</title><rect x="10.1643%" y="517" width="0.1027%" height="15" fill="rgb(230,62,27)"/><text x="10.4143%" y="527.50"></text></g><g><title>[rustup] (3 samples, 0.10%)</title><rect x="10.1643%" y="501" width="0.1027%" height="15" fill="rgb(216,154,8)"/><text x="10.4143%" y="511.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.10%)</title><rect x="10.1643%" y="485" width="0.1027%" height="15" fill="rgb(244,35,45)"/><text x="10.4143%" y="495.50"></text></g><g><title>_int_realloc (3 samples, 0.10%)</title><rect x="10.1643%" y="469" width="0.1027%" height="15" fill="rgb(251,115,12)"/><text x="10.4143%" y="479.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (3 samples, 0.10%)</title><rect x="10.1643%" y="453" width="0.1027%" height="15" fill="rgb(240,54,50)"/><text x="10.4143%" y="463.50"></text></g><g><title>[rustup] (7 samples, 0.24%)</title><rect x="10.0616%" y="661" width="0.2396%" height="15" fill="rgb(233,84,52)"/><text x="10.3116%" y="671.50"></text></g><g><title>[rustup] (6 samples, 0.21%)</title><rect x="10.0958%" y="645" width="0.2053%" height="15" fill="rgb(207,117,47)"/><text x="10.3458%" y="655.50"></text></g><g><title>[rustup] (5 samples, 0.17%)</title><rect x="10.1300%" y="629" width="0.1711%" height="15" fill="rgb(249,43,39)"/><text x="10.3800%" y="639.50"></text></g><g><title>[rustup] (4 samples, 0.14%)</title><rect x="10.1643%" y="613" width="0.1369%" height="15" fill="rgb(209,38,44)"/><text x="10.4143%" y="623.50"></text></g><g><title>[rustup] (4 samples, 0.14%)</title><rect x="10.1643%" y="597" width="0.1369%" height="15" fill="rgb(236,212,23)"/><text x="10.4143%" y="607.50"></text></g><g><title>[rustup] (4 samples, 0.14%)</title><rect x="10.1643%" y="581" width="0.1369%" height="15" fill="rgb(242,79,21)"/><text x="10.4143%" y="591.50"></text></g><g><title>[rustup] (4 samples, 0.14%)</title><rect x="10.1643%" y="565" width="0.1369%" height="15" fill="rgb(211,96,35)"/><text x="10.4143%" y="575.50"></text></g><g><title>[rustup] (4 samples, 0.14%)</title><rect x="10.1643%" y="549" width="0.1369%" height="15" fill="rgb(253,215,40)"/><text x="10.4143%" y="559.50"></text></g><g><title>[unknown] (16 samples, 0.55%)</title><rect x="10.0616%" y="677" width="0.5476%" height="15" fill="rgb(211,81,21)"/><text x="10.3116%" y="687.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.10%)</title><rect x="10.5065%" y="661" width="0.1027%" height="15" fill="rgb(208,190,38)"/><text x="10.7565%" y="671.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.10%)</title><rect x="10.5065%" y="645" width="0.1027%" height="15" fill="rgb(235,213,38)"/><text x="10.7565%" y="655.50"></text></g><g><title>std::panicking::try (3 samples, 0.10%)</title><rect x="10.5065%" y="629" width="0.1027%" height="15" fill="rgb(237,122,38)"/><text x="10.7565%" y="639.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.10%)</title><rect x="10.5065%" y="613" width="0.1027%" height="15" fill="rgb(244,218,35)"/><text x="10.7565%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.10%)</title><rect x="10.5065%" y="597" width="0.1027%" height="15" fill="rgb(240,68,47)"/><text x="10.7565%" y="607.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.10%)</title><rect x="10.5065%" y="581" width="0.1027%" height="15" fill="rgb(210,16,53)"/><text x="10.7565%" y="591.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.10%)</title><rect x="10.5065%" y="565" width="0.1027%" height="15" fill="rgb(235,124,12)"/><text x="10.7565%" y="575.50"></text></g><g><title>cargo::main (3 samples, 0.10%)</title><rect x="10.5065%" y="549" width="0.1027%" height="15" fill="rgb(224,169,11)"/><text x="10.7565%" y="559.50"></text></g><g><title>cargo::cli::main (3 samples, 0.10%)</title><rect x="10.5065%" y="533" width="0.1027%" height="15" fill="rgb(250,166,2)"/><text x="10.7565%" y="543.50"></text></g><g><title>&lt;cargo::core::compiler::DefaultExecutor as cargo::core::compiler::Executor&gt;::exec (7 samples, 0.24%)</title><rect x="10.6092%" y="501" width="0.2396%" height="15" fill="rgb(242,216,29)"/><text x="10.8592%" y="511.50"></text></g><g><title>cargo::util::process_builder::ProcessBuilder::exec_with_streaming (7 samples, 0.24%)</title><rect x="10.6092%" y="485" width="0.2396%" height="15" fill="rgb(230,116,27)"/><text x="10.8592%" y="495.50"></text></g><g><title>std::process::Command::spawn (7 samples, 0.24%)</title><rect x="10.6092%" y="469" width="0.2396%" height="15" fill="rgb(228,99,48)"/><text x="10.8592%" y="479.50"></text></g><g><title>std::sys::unix::process::process_inner::&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (7 samples, 0.24%)</title><rect x="10.6092%" y="453" width="0.2396%" height="15" fill="rgb(253,11,6)"/><text x="10.8592%" y="463.50"></text></g><g><title>__GI___fork (7 samples, 0.24%)</title><rect x="10.6092%" y="437" width="0.2396%" height="15" fill="rgb(247,143,39)"/><text x="10.8592%" y="447.50"></text></g><g><title>__GI___clone (8 samples, 0.27%)</title><rect x="10.6092%" y="677" width="0.2738%" height="15" fill="rgb(236,97,10)"/><text x="10.8592%" y="687.50"></text></g><g><title>start_thread (8 samples, 0.27%)</title><rect x="10.6092%" y="661" width="0.2738%" height="15" fill="rgb(233,208,19)"/><text x="10.8592%" y="671.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (8 samples, 0.27%)</title><rect x="10.6092%" y="645" width="0.2738%" height="15" fill="rgb(216,164,2)"/><text x="10.8592%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (8 samples, 0.27%)</title><rect x="10.6092%" y="629" width="0.2738%" height="15" fill="rgb(220,129,5)"/><text x="10.8592%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (8 samples, 0.27%)</title><rect x="10.6092%" y="613" width="0.2738%" height="15" fill="rgb(242,17,10)"/><text x="10.8592%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (8 samples, 0.27%)</title><rect x="10.6092%" y="597" width="0.2738%" height="15" fill="rgb(242,107,0)"/><text x="10.8592%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 0.27%)</title><rect x="10.6092%" y="581" width="0.2738%" height="15" fill="rgb(251,28,31)"/><text x="10.8592%" y="591.50"></text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (8 samples, 0.27%)</title><rect x="10.6092%" y="565" width="0.2738%" height="15" fill="rgb(233,223,10)"/><text x="10.8592%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8 samples, 0.27%)</title><rect x="10.6092%" y="549" width="0.2738%" height="15" fill="rgb(215,21,27)"/><text x="10.8592%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8 samples, 0.27%)</title><rect x="10.6092%" y="533" width="0.2738%" height="15" fill="rgb(232,23,21)"/><text x="10.8592%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8 samples, 0.27%)</title><rect x="10.6092%" y="517" width="0.2738%" height="15" fill="rgb(244,5,23)"/><text x="10.8592%" y="527.50"></text></g><g><title>__libc_csu_init (3 samples, 0.10%)</title><rect x="11.1910%" y="645" width="0.1027%" height="15" fill="rgb(226,81,46)"/><text x="11.4410%" y="655.50"></text></g><g><title>curl::init::init_inner (3 samples, 0.10%)</title><rect x="11.1910%" y="629" width="0.1027%" height="15" fill="rgb(247,70,30)"/><text x="11.4410%" y="639.50"></text></g><g><title>std::sync::once::Once::call_inner (3 samples, 0.10%)</title><rect x="11.1910%" y="613" width="0.1027%" height="15" fill="rgb(212,68,19)"/><text x="11.4410%" y="623.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (3 samples, 0.10%)</title><rect x="11.1910%" y="597" width="0.1027%" height="15" fill="rgb(240,187,13)"/><text x="11.4410%" y="607.50"></text></g><g><title>curl_global_init (3 samples, 0.10%)</title><rect x="11.1910%" y="581" width="0.1027%" height="15" fill="rgb(223,113,26)"/><text x="11.4410%" y="591.50"></text></g><g><title>Curl_ossl_init (3 samples, 0.10%)</title><rect x="11.1910%" y="565" width="0.1027%" height="15" fill="rgb(206,192,2)"/><text x="11.4410%" y="575.50"></text></g><g><title>OPENSSL_init_crypto (3 samples, 0.10%)</title><rect x="11.1910%" y="549" width="0.1027%" height="15" fill="rgb(241,108,4)"/><text x="11.4410%" y="559.50"></text></g><g><title>CRYPTO_THREAD_run_once (3 samples, 0.10%)</title><rect x="11.1910%" y="533" width="0.1027%" height="15" fill="rgb(247,173,49)"/><text x="11.4410%" y="543.50"></text></g><g><title>__pthread_once_slow (3 samples, 0.10%)</title><rect x="11.1910%" y="517" width="0.1027%" height="15" fill="rgb(224,114,35)"/><text x="11.4410%" y="527.50"></text></g><g><title>ossl_init_engine_dynamic_ossl_ (3 samples, 0.10%)</title><rect x="11.1910%" y="501" width="0.1027%" height="15" fill="rgb(245,159,27)"/><text x="11.4410%" y="511.50"></text></g><g><title>ERR_clear_error (3 samples, 0.10%)</title><rect x="11.1910%" y="485" width="0.1027%" height="15" fill="rgb(245,172,44)"/><text x="11.4410%" y="495.50"></text></g><g><title>ERR_get_state (3 samples, 0.10%)</title><rect x="11.1910%" y="469" width="0.1027%" height="15" fill="rgb(236,23,11)"/><text x="11.4410%" y="479.50"></text></g><g><title>OPENSSL_init_crypto (3 samples, 0.10%)</title><rect x="11.1910%" y="453" width="0.1027%" height="15" fill="rgb(205,117,38)"/><text x="11.4410%" y="463.50"></text></g><g><title>CRYPTO_THREAD_run_once (3 samples, 0.10%)</title><rect x="11.1910%" y="437" width="0.1027%" height="15" fill="rgb(237,72,25)"/><text x="11.4410%" y="447.50"></text></g><g><title>__pthread_once_slow (3 samples, 0.10%)</title><rect x="11.1910%" y="421" width="0.1027%" height="15" fill="rgb(244,70,9)"/><text x="11.4410%" y="431.50"></text></g><g><title>ossl_init_load_crypto_strings_ossl_ (3 samples, 0.10%)</title><rect x="11.1910%" y="405" width="0.1027%" height="15" fill="rgb(217,125,39)"/><text x="11.4410%" y="415.50"></text></g><g><title>err_load_crypto_strings_int (3 samples, 0.10%)</title><rect x="11.1910%" y="389" width="0.1027%" height="15" fill="rgb(235,36,10)"/><text x="11.4410%" y="399.50"></text></g><g><title>ASN1_item_d2i (5 samples, 0.17%)</title><rect x="11.3279%" y="261" width="0.1711%" height="15" fill="rgb(251,123,47)"/><text x="11.5779%" y="271.50"></text></g><g><title>asn1_item_embed_d2i (5 samples, 0.17%)</title><rect x="11.3279%" y="245" width="0.1711%" height="15" fill="rgb(221,13,13)"/><text x="11.5779%" y="255.50"></text></g><g><title>asn1_template_ex_d2i (4 samples, 0.14%)</title><rect x="11.3621%" y="229" width="0.1369%" height="15" fill="rgb(238,131,9)"/><text x="11.6121%" y="239.50"></text></g><g><title>asn1_template_noexp_d2i (4 samples, 0.14%)</title><rect x="11.3621%" y="213" width="0.1369%" height="15" fill="rgb(211,50,8)"/><text x="11.6121%" y="223.50"></text></g><g><title>asn1_item_embed_d2i (4 samples, 0.14%)</title><rect x="11.3621%" y="197" width="0.1369%" height="15" fill="rgb(245,182,24)"/><text x="11.6121%" y="207.50"></text></g><g><title>asn1_template_ex_d2i (4 samples, 0.14%)</title><rect x="11.3621%" y="181" width="0.1369%" height="15" fill="rgb(242,14,37)"/><text x="11.6121%" y="191.50"></text></g><g><title>asn1_template_noexp_d2i (4 samples, 0.14%)</title><rect x="11.3621%" y="165" width="0.1369%" height="15" fill="rgb(246,228,12)"/><text x="11.6121%" y="175.50"></text></g><g><title>asn1_item_embed_d2i (4 samples, 0.14%)</title><rect x="11.3621%" y="149" width="0.1369%" height="15" fill="rgb(213,55,15)"/><text x="11.6121%" y="159.50"></text></g><g><title>PEM_X509_INFO_read_bio (7 samples, 0.24%)</title><rect x="11.3279%" y="277" width="0.2396%" height="15" fill="rgb(209,9,3)"/><text x="11.5779%" y="287.50"></text></g><g><title>git_libgit2_init (8 samples, 0.27%)</title><rect x="11.3279%" y="389" width="0.2738%" height="15" fill="rgb(230,59,30)"/><text x="11.5779%" y="399.50"></text></g><g><title>__pthread_once_slow (8 samples, 0.27%)</title><rect x="11.3279%" y="373" width="0.2738%" height="15" fill="rgb(209,121,21)"/><text x="11.5779%" y="383.50"></text></g><g><title>init_once (8 samples, 0.27%)</title><rect x="11.3279%" y="357" width="0.2738%" height="15" fill="rgb(220,109,13)"/><text x="11.5779%" y="367.50"></text></g><g><title>git_openssl_stream_global_init (8 samples, 0.27%)</title><rect x="11.3279%" y="341" width="0.2738%" height="15" fill="rgb(232,18,1)"/><text x="11.5779%" y="351.50"></text></g><g><title>X509_STORE_set_default_paths (8 samples, 0.27%)</title><rect x="11.3279%" y="325" width="0.2738%" height="15" fill="rgb(215,41,42)"/><text x="11.5779%" y="335.50"></text></g><g><title>by_file_ctrl (8 samples, 0.27%)</title><rect x="11.3279%" y="309" width="0.2738%" height="15" fill="rgb(224,123,36)"/><text x="11.5779%" y="319.50"></text></g><g><title>X509_load_cert_crl_file (8 samples, 0.27%)</title><rect x="11.3279%" y="293" width="0.2738%" height="15" fill="rgb(240,125,3)"/><text x="11.5779%" y="303.50"></text></g><g><title>cargo::cli::main (10 samples, 0.34%)</title><rect x="11.2936%" y="501" width="0.3422%" height="15" fill="rgb(205,98,50)"/><text x="11.5436%" y="511.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (9 samples, 0.31%)</title><rect x="11.3279%" y="485" width="0.3080%" height="15" fill="rgb(205,185,37)"/><text x="11.5779%" y="495.50"></text></g><g><title>cargo::ops::registry::http_proxy (9 samples, 0.31%)</title><rect x="11.3279%" y="469" width="0.3080%" height="15" fill="rgb(238,207,15)"/><text x="11.5779%" y="479.50"></text></g><g><title>git2::config::Config::open_default (9 samples, 0.31%)</title><rect x="11.3279%" y="453" width="0.3080%" height="15" fill="rgb(213,199,42)"/><text x="11.5779%" y="463.50"></text></g><g><title>libgit2_sys::init (9 samples, 0.31%)</title><rect x="11.3279%" y="437" width="0.3080%" height="15" fill="rgb(235,201,11)"/><text x="11.5779%" y="447.50"></text></g><g><title>std::sync::once::Once::call_inner (9 samples, 0.31%)</title><rect x="11.3279%" y="421" width="0.3080%" height="15" fill="rgb(207,46,11)"/><text x="11.5779%" y="431.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (9 samples, 0.31%)</title><rect x="11.3279%" y="405" width="0.3080%" height="15" fill="rgb(241,35,35)"/><text x="11.5779%" y="415.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 0.38%)</title><rect x="11.2936%" y="613" width="0.3765%" height="15" fill="rgb(243,32,47)"/><text x="11.5436%" y="623.50"></text></g><g><title>std::panicking::try (11 samples, 0.38%)</title><rect x="11.2936%" y="597" width="0.3765%" height="15" fill="rgb(247,202,23)"/><text x="11.5436%" y="607.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 0.38%)</title><rect x="11.2936%" y="581" width="0.3765%" height="15" fill="rgb(219,102,11)"/><text x="11.5436%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11 samples, 0.38%)</title><rect x="11.2936%" y="565" width="0.3765%" height="15" fill="rgb(243,110,44)"/><text x="11.5436%" y="575.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (11 samples, 0.38%)</title><rect x="11.2936%" y="549" width="0.3765%" height="15" fill="rgb(222,74,54)"/><text x="11.5436%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11 samples, 0.38%)</title><rect x="11.2936%" y="533" width="0.3765%" height="15" fill="rgb(216,99,12)"/><text x="11.5436%" y="543.50"></text></g><g><title>cargo::main (11 samples, 0.38%)</title><rect x="11.2936%" y="517" width="0.3765%" height="15" fill="rgb(226,22,26)"/><text x="11.5436%" y="527.50"></text></g><g><title>__libc_start_main (15 samples, 0.51%)</title><rect x="11.1910%" y="661" width="0.5133%" height="15" fill="rgb(217,163,10)"/><text x="11.4410%" y="671.50"></text></g><g><title>main (12 samples, 0.41%)</title><rect x="11.2936%" y="645" width="0.4107%" height="15" fill="rgb(213,25,53)"/><text x="11.5436%" y="655.50"></text></g><g><title>std::rt::lang_start_internal (12 samples, 0.41%)</title><rect x="11.2936%" y="629" width="0.4107%" height="15" fill="rgb(252,105,26)"/><text x="11.5436%" y="639.50"></text></g><g><title>_dl_map_object_from_fd (3 samples, 0.10%)</title><rect x="11.7728%" y="549" width="0.1027%" height="15" fill="rgb(220,39,43)"/><text x="12.0228%" y="559.50"></text></g><g><title>_dl_map_object_deps (7 samples, 0.24%)</title><rect x="11.7385%" y="613" width="0.2396%" height="15" fill="rgb(229,68,48)"/><text x="11.9885%" y="623.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.24%)</title><rect x="11.7385%" y="597" width="0.2396%" height="15" fill="rgb(252,8,32)"/><text x="11.9885%" y="607.50"></text></g><g><title>openaux (6 samples, 0.21%)</title><rect x="11.7728%" y="581" width="0.2053%" height="15" fill="rgb(223,20,43)"/><text x="12.0228%" y="591.50"></text></g><g><title>_dl_map_object (6 samples, 0.21%)</title><rect x="11.7728%" y="565" width="0.2053%" height="15" fill="rgb(229,81,49)"/><text x="12.0228%" y="575.50"></text></g><g><title>open_path (3 samples, 0.10%)</title><rect x="11.8754%" y="549" width="0.1027%" height="15" fill="rgb(236,28,36)"/><text x="12.1254%" y="559.50"></text></g><g><title>open_verify.constprop.0 (3 samples, 0.10%)</title><rect x="11.8754%" y="533" width="0.1027%" height="15" fill="rgb(249,185,26)"/><text x="12.1254%" y="543.50"></text></g><g><title>__GI___open_nocancel (3 samples, 0.10%)</title><rect x="11.8754%" y="517" width="0.1027%" height="15" fill="rgb(249,174,33)"/><text x="12.1254%" y="527.50"></text></g><g><title>_dl_lookup_symbol_x (6 samples, 0.21%)</title><rect x="12.1834%" y="597" width="0.2053%" height="15" fill="rgb(233,201,37)"/><text x="12.4334%" y="607.50"></text></g><g><title>do_lookup_x (5 samples, 0.17%)</title><rect x="12.2177%" y="581" width="0.1711%" height="15" fill="rgb(221,78,26)"/><text x="12.4677%" y="591.50"></text></g><g><title>cargo (75 samples, 2.57%)</title><rect x="9.8563%" y="693" width="2.5667%" height="15" fill="rgb(250,127,30)"/><text x="10.1063%" y="703.50">ca..</text></g><g><title>_start (45 samples, 1.54%)</title><rect x="10.8830%" y="677" width="1.5400%" height="15" fill="rgb(230,49,44)"/><text x="11.1330%" y="687.50"></text></g><g><title>_dl_start (21 samples, 0.72%)</title><rect x="11.7043%" y="661" width="0.7187%" height="15" fill="rgb(229,67,23)"/><text x="11.9543%" y="671.50"></text></g><g><title>_dl_sysdep_start (21 samples, 0.72%)</title><rect x="11.7043%" y="645" width="0.7187%" height="15" fill="rgb(249,83,47)"/><text x="11.9543%" y="655.50"></text></g><g><title>dl_main (21 samples, 0.72%)</title><rect x="11.7043%" y="629" width="0.7187%" height="15" fill="rgb(215,43,3)"/><text x="11.9543%" y="639.50"></text></g><g><title>_dl_relocate_object (13 samples, 0.44%)</title><rect x="11.9781%" y="613" width="0.4449%" height="15" fill="rgb(238,154,13)"/><text x="12.2281%" y="623.50"></text></g><g><title>[gcc] (3 samples, 0.10%)</title><rect x="12.4230%" y="677" width="0.1027%" height="15" fill="rgb(219,56,2)"/><text x="12.6730%" y="687.50"></text></g><g><title>__libc_start_main (3 samples, 0.10%)</title><rect x="12.4230%" y="661" width="0.1027%" height="15" fill="rgb(233,0,4)"/><text x="12.6730%" y="671.50"></text></g><g><title>[gcc] (3 samples, 0.10%)</title><rect x="12.4230%" y="645" width="0.1027%" height="15" fill="rgb(235,30,7)"/><text x="12.6730%" y="655.50"></text></g><g><title>[gcc] (3 samples, 0.10%)</title><rect x="12.4230%" y="629" width="0.1027%" height="15" fill="rgb(250,79,13)"/><text x="12.6730%" y="639.50"></text></g><g><title>[gcc] (3 samples, 0.10%)</title><rect x="12.4230%" y="613" width="0.1027%" height="15" fill="rgb(211,146,34)"/><text x="12.6730%" y="623.50"></text></g><g><title>[gcc] (3 samples, 0.10%)</title><rect x="12.4230%" y="597" width="0.1027%" height="15" fill="rgb(228,22,38)"/><text x="12.6730%" y="607.50"></text></g><g><title>[gcc] (3 samples, 0.10%)</title><rect x="12.4230%" y="581" width="0.1027%" height="15" fill="rgb(235,168,5)"/><text x="12.6730%" y="591.50"></text></g><g><title>cc (11 samples, 0.38%)</title><rect x="12.4230%" y="693" width="0.3765%" height="15" fill="rgb(221,155,16)"/><text x="12.6730%" y="703.50"></text></g><g><title>_start (8 samples, 0.27%)</title><rect x="12.5257%" y="677" width="0.2738%" height="15" fill="rgb(215,215,53)"/><text x="12.7757%" y="687.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.10%)</title><rect x="12.8337%" y="677" width="0.1027%" height="15" fill="rgb(223,4,10)"/><text x="13.0837%" y="687.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.17%)</title><rect x="12.9363%" y="677" width="0.1711%" height="15" fill="rgb(234,103,6)"/><text x="13.1863%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (3 samples, 0.10%)</title><rect x="13.1417%" y="661" width="0.1027%" height="15" fill="rgb(227,97,0)"/><text x="13.3917%" y="671.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.10%)</title><rect x="13.2786%" y="661" width="0.1027%" height="15" fill="rgb(234,150,53)"/><text x="13.5286%" y="671.50"></text></g><g><title>irust::irust::highlight::parse_as (3 samples, 0.10%)</title><rect x="13.5524%" y="661" width="0.1027%" height="15" fill="rgb(228,201,54)"/><text x="13.8024%" y="671.50"></text></g><g><title>[[heap]] (17 samples, 0.58%)</title><rect x="13.1075%" y="677" width="0.5818%" height="15" fill="rgb(222,22,37)"/><text x="13.3575%" y="687.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (12 samples, 0.41%)</title><rect x="13.6893%" y="661" width="0.4107%" height="15" fill="rgb(237,53,32)"/><text x="13.9393%" y="671.50"></text></g><g><title>std::io::stdio::Stdout::lock (5 samples, 0.17%)</title><rect x="13.9288%" y="645" width="0.1711%" height="15" fill="rgb(233,25,53)"/><text x="14.1788%" y="655.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (5 samples, 0.17%)</title><rect x="13.9288%" y="629" width="0.1711%" height="15" fill="rgb(210,40,34)"/><text x="14.1788%" y="639.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (5 samples, 0.17%)</title><rect x="13.9288%" y="613" width="0.1711%" height="15" fill="rgb(241,220,44)"/><text x="14.1788%" y="623.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (9 samples, 0.31%)</title><rect x="14.1684%" y="661" width="0.3080%" height="15" fill="rgb(235,28,35)"/><text x="14.4184%" y="671.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (10 samples, 0.34%)</title><rect x="14.4764%" y="661" width="0.3422%" height="15" fill="rgb(210,56,17)"/><text x="14.7264%" y="671.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.24%)</title><rect x="14.8186%" y="661" width="0.2396%" height="15" fill="rgb(224,130,29)"/><text x="15.0686%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (7 samples, 0.24%)</title><rect x="15.0582%" y="661" width="0.2396%" height="15" fill="rgb(235,212,8)"/><text x="15.3082%" y="671.50"></text></g><g><title>__rdl_alloc (3 samples, 0.10%)</title><rect x="15.3320%" y="661" width="0.1027%" height="15" fill="rgb(223,33,50)"/><text x="15.5820%" y="671.50"></text></g><g><title>_int_free (4 samples, 0.14%)</title><rect x="15.4689%" y="661" width="0.1369%" height="15" fill="rgb(219,149,13)"/><text x="15.7189%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.14%)</title><rect x="15.6400%" y="661" width="0.1369%" height="15" fill="rgb(250,156,29)"/><text x="15.8900%" y="671.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_character (5 samples, 0.17%)</title><rect x="15.9480%" y="661" width="0.1711%" height="15" fill="rgb(216,193,19)"/><text x="16.1980%" y="671.50"></text></g><g><title>irust::irust::buffer::Buffer::insert (5 samples, 0.17%)</title><rect x="15.9480%" y="645" width="0.1711%" height="15" fill="rgb(216,135,14)"/><text x="16.1980%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::insert (5 samples, 0.17%)</title><rect x="15.9480%" y="629" width="0.1711%" height="15" fill="rgb(241,47,5)"/><text x="16.1980%" y="639.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (3 samples, 0.10%)</title><rect x="16.1191%" y="645" width="0.1027%" height="15" fill="rgb(233,42,35)"/><text x="16.3691%" y="655.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (3 samples, 0.10%)</title><rect x="16.1191%" y="629" width="0.1027%" height="15" fill="rgb(231,13,6)"/><text x="16.3691%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (3 samples, 0.10%)</title><rect x="16.1191%" y="613" width="0.1027%" height="15" fill="rgb(207,181,40)"/><text x="16.3691%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (3 samples, 0.10%)</title><rect x="16.1191%" y="597" width="0.1027%" height="15" fill="rgb(254,173,49)"/><text x="16.3691%" y="607.50"></text></g><g><title>irust::irust::highlight::theme::theme_color_to_term_color (4 samples, 0.14%)</title><rect x="16.1191%" y="661" width="0.1369%" height="15" fill="rgb(221,1,38)"/><text x="16.3691%" y="671.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::recv (3 samples, 0.10%)</title><rect x="16.4613%" y="661" width="0.1027%" height="15" fill="rgb(206,124,46)"/><text x="16.7113%" y="671.50"></text></g><g><title>[[stack]] (85 samples, 2.91%)</title><rect x="13.6893%" y="677" width="2.9090%" height="15" fill="rgb(249,21,11)"/><text x="13.9393%" y="687.50">[[..</text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.21%)</title><rect x="16.5982%" y="661" width="0.2053%" height="15" fill="rgb(222,201,40)"/><text x="16.8482%" y="671.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (27 samples, 0.92%)</title><rect x="16.8036%" y="661" width="0.9240%" height="15" fill="rgb(235,61,29)"/><text x="17.0536%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.10%)</title><rect x="17.6249%" y="645" width="0.1027%" height="15" fill="rgb(219,207,3)"/><text x="17.8749%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.10%)</title><rect x="17.6249%" y="629" width="0.1027%" height="15" fill="rgb(222,56,46)"/><text x="17.8749%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.10%)</title><rect x="17.6249%" y="613" width="0.1027%" height="15" fill="rgb(239,76,54)"/><text x="17.8749%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="17.6249%" y="597" width="0.1027%" height="15" fill="rgb(231,124,27)"/><text x="17.8749%" y="607.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (9 samples, 0.31%)</title><rect x="17.7276%" y="661" width="0.3080%" height="15" fill="rgb(249,195,6)"/><text x="17.9776%" y="671.50"></text></g><g><title>[irust] (47 samples, 1.61%)</title><rect x="16.5982%" y="677" width="1.6085%" height="15" fill="rgb(237,174,47)"/><text x="16.8482%" y="687.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (9 samples, 0.31%)</title><rect x="18.2067%" y="661" width="0.3080%" height="15" fill="rgb(206,201,31)"/><text x="18.4567%" y="671.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (59 samples, 2.02%)</title><rect x="18.6174%" y="661" width="2.0192%" height="15" fill="rgb(231,57,52)"/><text x="18.8674%" y="671.50">&lt;..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="20.6366%" y="661" width="0.1369%" height="15" fill="rgb(248,177,22)"/><text x="20.8866%" y="671.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (10 samples, 0.34%)</title><rect x="20.7734%" y="661" width="0.3422%" height="15" fill="rgb(215,211,37)"/><text x="21.0234%" y="671.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (60 samples, 2.05%)</title><rect x="21.1157%" y="661" width="2.0534%" height="15" fill="rgb(241,128,51)"/><text x="21.3657%" y="671.50">&lt;..</text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (27 samples, 0.92%)</title><rect x="22.2450%" y="645" width="0.9240%" height="15" fill="rgb(227,165,31)"/><text x="22.4950%" y="655.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (27 samples, 0.92%)</title><rect x="22.2450%" y="629" width="0.9240%" height="15" fill="rgb(228,167,24)"/><text x="22.4950%" y="639.50"></text></g><g><title>std::memchr::memrchr (13 samples, 0.44%)</title><rect x="22.7242%" y="613" width="0.4449%" height="15" fill="rgb(228,143,12)"/><text x="22.9742%" y="623.50"></text></g><g><title>std::sys::unix::memchr::memrchr (13 samples, 0.44%)</title><rect x="22.7242%" y="597" width="0.4449%" height="15" fill="rgb(249,149,8)"/><text x="22.9742%" y="607.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (13 samples, 0.44%)</title><rect x="22.7242%" y="581" width="0.4449%" height="15" fill="rgb(243,35,44)"/><text x="22.9742%" y="591.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.14%)</title><rect x="23.2033%" y="661" width="0.1369%" height="15" fill="rgb(246,89,9)"/><text x="23.4533%" y="671.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.17%)</title><rect x="23.3402%" y="661" width="0.1711%" height="15" fill="rgb(233,213,13)"/><text x="23.5902%" y="671.50"></text></g><g><title>__GI___libc_sigaction (3 samples, 0.10%)</title><rect x="23.6140%" y="645" width="0.1027%" height="15" fill="rgb(233,141,41)"/><text x="23.8640%" y="655.50"></text></g><g><title>__spawni_child (12 samples, 0.41%)</title><rect x="23.5797%" y="661" width="0.4107%" height="15" fill="rgb(239,167,4)"/><text x="23.8297%" y="671.50"></text></g><g><title>__execvpe_common (8 samples, 0.27%)</title><rect x="23.7166%" y="645" width="0.2738%" height="15" fill="rgb(209,217,16)"/><text x="23.9666%" y="655.50"></text></g><g><title>__GI_execve (8 samples, 0.27%)</title><rect x="23.7166%" y="629" width="0.2738%" height="15" fill="rgb(219,88,35)"/><text x="23.9666%" y="639.50"></text></g><g><title>_int_free (6 samples, 0.21%)</title><rect x="23.9904%" y="661" width="0.2053%" height="15" fill="rgb(220,193,23)"/><text x="24.2404%" y="671.50"></text></g><g><title>_int_malloc (3 samples, 0.10%)</title><rect x="24.1958%" y="661" width="0.1027%" height="15" fill="rgb(230,90,52)"/><text x="24.4458%" y="671.50"></text></g><g><title>_int_realloc (3 samples, 0.10%)</title><rect x="24.2984%" y="661" width="0.1027%" height="15" fill="rgb(252,106,19)"/><text x="24.5484%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="24.4011%" y="661" width="0.1027%" height="15" fill="rgb(206,74,20)"/><text x="24.6511%" y="671.50"></text></g><g><title>core::fmt::Write::write_char (7 samples, 0.24%)</title><rect x="24.5722%" y="661" width="0.2396%" height="15" fill="rgb(230,138,44)"/><text x="24.8222%" y="671.50"></text></g><g><title>core::fmt::write (21 samples, 0.72%)</title><rect x="24.8460%" y="661" width="0.7187%" height="15" fill="rgb(235,182,43)"/><text x="25.0960%" y="671.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input (7 samples, 0.24%)</title><rect x="25.7016%" y="661" width="0.2396%" height="15" fill="rgb(242,16,51)"/><text x="25.9516%" y="671.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner (6 samples, 0.21%)</title><rect x="25.7358%" y="645" width="0.2053%" height="15" fill="rgb(248,9,4)"/><text x="25.9858%" y="655.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char_with_color (6 samples, 0.21%)</title><rect x="25.7358%" y="629" width="0.2053%" height="15" fill="rgb(210,31,22)"/><text x="25.9858%" y="639.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char (3 samples, 0.10%)</title><rect x="25.8385%" y="613" width="0.1027%" height="15" fill="rgb(239,54,39)"/><text x="26.0885%" y="623.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (5 samples, 0.17%)</title><rect x="25.9411%" y="661" width="0.1711%" height="15" fill="rgb(230,99,41)"/><text x="26.1911%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.10%)</title><rect x="26.0096%" y="645" width="0.1027%" height="15" fill="rgb(253,106,12)"/><text x="26.2596%" y="655.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto::{{closure}} (3 samples, 0.10%)</title><rect x="26.0096%" y="629" width="0.1027%" height="15" fill="rgb(213,46,41)"/><text x="26.2596%" y="639.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.10%)</title><rect x="26.0096%" y="613" width="0.1027%" height="15" fill="rgb(215,133,35)"/><text x="26.2596%" y="623.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (3 samples, 0.10%)</title><rect x="26.2149%" y="661" width="0.1027%" height="15" fill="rgb(213,28,5)"/><text x="26.4649%" y="671.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (25 samples, 0.86%)</title><rect x="26.3176%" y="661" width="0.8556%" height="15" fill="rgb(215,77,49)"/><text x="26.5676%" y="671.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (7 samples, 0.24%)</title><rect x="26.9336%" y="645" width="0.2396%" height="15" fill="rgb(248,100,22)"/><text x="27.1836%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (7 samples, 0.24%)</title><rect x="26.9336%" y="629" width="0.2396%" height="15" fill="rgb(208,67,9)"/><text x="27.1836%" y="639.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (7 samples, 0.24%)</title><rect x="26.9336%" y="613" width="0.2396%" height="15" fill="rgb(219,133,21)"/><text x="27.1836%" y="623.50"></text></g><g><title>[unknown] (265 samples, 9.07%)</title><rect x="18.2067%" y="677" width="9.0691%" height="15" fill="rgb(246,46,29)"/><text x="18.4567%" y="687.50">[unknown]</text></g><g><title>__GI___clone (24 samples, 0.82%)</title><rect x="27.2758%" y="677" width="0.8214%" height="15" fill="rgb(246,185,52)"/><text x="27.5258%" y="687.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (4 samples, 0.14%)</title><rect x="28.2683%" y="661" width="0.1369%" height="15" fill="rgb(252,136,11)"/><text x="28.5183%" y="671.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (3 samples, 0.10%)</title><rect x="28.3025%" y="645" width="0.1027%" height="15" fill="rgb(219,138,53)"/><text x="28.5525%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.10%)</title><rect x="28.3025%" y="629" width="0.1027%" height="15" fill="rgb(211,51,23)"/><text x="28.5525%" y="639.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (3 samples, 0.10%)</title><rect x="28.3025%" y="613" width="0.1027%" height="15" fill="rgb(247,221,28)"/><text x="28.5525%" y="623.50"></text></g><g><title>_fini (8 samples, 0.27%)</title><rect x="28.1656%" y="677" width="0.2738%" height="15" fill="rgb(251,222,45)"/><text x="28.4156%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.10%)</title><rect x="28.6790%" y="485" width="0.1027%" height="15" fill="rgb(217,162,53)"/><text x="28.9290%" y="495.50"></text></g><g><title>&lt;irust::irust::IRust as core::ops::drop::Drop&gt;::drop (3 samples, 0.10%)</title><rect x="28.6790%" y="469" width="0.1027%" height="15" fill="rgb(229,93,14)"/><text x="28.9290%" y="479.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::exit (3 samples, 0.10%)</title><rect x="28.6790%" y="453" width="0.1027%" height="15" fill="rgb(209,67,49)"/><text x="28.9290%" y="463.50"></text></g><g><title>irust::irust::history::History::save (3 samples, 0.10%)</title><rect x="28.6790%" y="437" width="0.1027%" height="15" fill="rgb(213,87,29)"/><text x="28.9290%" y="447.50"></text></g><g><title>irust::irust::cursor::Cursor::new (8 samples, 0.27%)</title><rect x="28.7817%" y="469" width="0.2738%" height="15" fill="rgb(205,151,52)"/><text x="29.0317%" y="479.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::get_current_pos (8 samples, 0.27%)</title><rect x="28.7817%" y="453" width="0.2738%" height="15" fill="rgb(253,215,39)"/><text x="29.0317%" y="463.50"></text></g><g><title>crossterm::cursor::sys::unix::position (8 samples, 0.27%)</title><rect x="28.7817%" y="437" width="0.2738%" height="15" fill="rgb(221,220,41)"/><text x="29.0317%" y="447.50"></text></g><g><title>crossterm::cursor::sys::unix::read_position (8 samples, 0.27%)</title><rect x="28.7817%" y="421" width="0.2738%" height="15" fill="rgb(218,133,21)"/><text x="29.0317%" y="431.50"></text></g><g><title>crossterm::cursor::sys::unix::read_position_raw (8 samples, 0.27%)</title><rect x="28.7817%" y="405" width="0.2738%" height="15" fill="rgb(221,193,43)"/><text x="29.0317%" y="415.50"></text></g><g><title>crossterm::event::poll_internal (8 samples, 0.27%)</title><rect x="28.7817%" y="389" width="0.2738%" height="15" fill="rgb(240,128,52)"/><text x="29.0317%" y="399.50"></text></g><g><title>crossterm::event::read::InternalEventReader::poll (8 samples, 0.27%)</title><rect x="28.7817%" y="373" width="0.2738%" height="15" fill="rgb(253,114,12)"/><text x="29.0317%" y="383.50"></text></g><g><title>&lt;crossterm::event::source::unix::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (8 samples, 0.27%)</title><rect x="28.7817%" y="357" width="0.2738%" height="15" fill="rgb(215,223,47)"/><text x="29.0317%" y="367.50"></text></g><g><title>mio::poll::Poll::poll (7 samples, 0.24%)</title><rect x="28.8159%" y="341" width="0.2396%" height="15" fill="rgb(248,225,23)"/><text x="29.0659%" y="351.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (7 samples, 0.24%)</title><rect x="28.8159%" y="325" width="0.2396%" height="15" fill="rgb(250,108,0)"/><text x="29.0659%" y="335.50"></text></g><g><title>epoll_wait (7 samples, 0.24%)</title><rect x="28.8159%" y="309" width="0.2396%" height="15" fill="rgb(228,208,7)"/><text x="29.0659%" y="319.50"></text></g><g><title>irust::irust::IRust::new (11 samples, 0.38%)</title><rect x="28.7817%" y="485" width="0.3765%" height="15" fill="rgb(244,45,10)"/><text x="29.0317%" y="495.50"></text></g><g><title>&lt;irust::irust::buffer::Buffer as alloc::string::ToString&gt;::to_string (14 samples, 0.48%)</title><rect x="29.2608%" y="437" width="0.4791%" height="15" fill="rgb(207,125,25)"/><text x="29.5108%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (14 samples, 0.48%)</title><rect x="29.2608%" y="421" width="0.4791%" height="15" fill="rgb(210,195,18)"/><text x="29.5108%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (14 samples, 0.48%)</title><rect x="29.2608%" y="405" width="0.4791%" height="15" fill="rgb(249,80,12)"/><text x="29.5108%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (14 samples, 0.48%)</title><rect x="29.2608%" y="389" width="0.4791%" height="15" fill="rgb(221,65,9)"/><text x="29.5108%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (14 samples, 0.48%)</title><rect x="29.2608%" y="373" width="0.4791%" height="15" fill="rgb(235,49,36)"/><text x="29.5108%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.48%)</title><rect x="29.2608%" y="357" width="0.4791%" height="15" fill="rgb(225,32,20)"/><text x="29.5108%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.48%)</title><rect x="29.2608%" y="341" width="0.4791%" height="15" fill="rgb(215,141,46)"/><text x="29.5108%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.48%)</title><rect x="29.2608%" y="325" width="0.4791%" height="15" fill="rgb(250,160,47)"/><text x="29.5108%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 0.41%)</title><rect x="29.3292%" y="309" width="0.4107%" height="15" fill="rgb(216,222,40)"/><text x="29.5792%" y="319.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8 samples, 0.27%)</title><rect x="29.4661%" y="293" width="0.2738%" height="15" fill="rgb(234,217,39)"/><text x="29.7161%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (8 samples, 0.27%)</title><rect x="29.4661%" y="277" width="0.2738%" height="15" fill="rgb(207,178,40)"/><text x="29.7161%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (8 samples, 0.27%)</title><rect x="29.4661%" y="261" width="0.2738%" height="15" fill="rgb(221,136,13)"/><text x="29.7161%" y="271.50"></text></g><g><title>alloc::string::String::push (8 samples, 0.27%)</title><rect x="29.4661%" y="245" width="0.2738%" height="15" fill="rgb(249,199,10)"/><text x="29.7161%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (8 samples, 0.27%)</title><rect x="29.4661%" y="229" width="0.2738%" height="15" fill="rgb(249,222,13)"/><text x="29.7161%" y="239.50"></text></g><g><title>irust::irust::cursor::Cursor::move_right_unbounded (5 samples, 0.17%)</title><rect x="29.7399%" y="437" width="0.1711%" height="15" fill="rgb(244,185,38)"/><text x="29.9899%" y="447.50"></text></g><g><title>irust::irust::cursor::Cursor::move_right_inner (5 samples, 0.17%)</title><rect x="29.7399%" y="421" width="0.1711%" height="15" fill="rgb(236,202,9)"/><text x="29.9899%" y="431.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_internal_pos (5 samples, 0.17%)</title><rect x="29.7399%" y="405" width="0.1711%" height="15" fill="rgb(250,229,37)"/><text x="29.9899%" y="415.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (5 samples, 0.17%)</title><rect x="29.7399%" y="389" width="0.1711%" height="15" fill="rgb(206,174,23)"/><text x="29.9899%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.17%)</title><rect x="29.7399%" y="373" width="0.1711%" height="15" fill="rgb(211,33,43)"/><text x="29.9899%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto::{{closure}} (5 samples, 0.17%)</title><rect x="29.7399%" y="357" width="0.1711%" height="15" fill="rgb(245,58,50)"/><text x="29.9899%" y="367.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5 samples, 0.17%)</title><rect x="29.7399%" y="341" width="0.1711%" height="15" fill="rgb(244,68,36)"/><text x="29.9899%" y="351.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5 samples, 0.17%)</title><rect x="29.7399%" y="325" width="0.1711%" height="15" fill="rgb(232,229,15)"/><text x="29.9899%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (5 samples, 0.17%)</title><rect x="29.7399%" y="309" width="0.1711%" height="15" fill="rgb(254,30,23)"/><text x="29.9899%" y="319.50"></text></g><g><title>core::fmt::write (5 samples, 0.17%)</title><rect x="29.7399%" y="293" width="0.1711%" height="15" fill="rgb(235,160,14)"/><text x="29.9899%" y="303.50"></text></g><g><title>crossterm::cursor::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::cursor::MoveTo&gt;&gt;::fmt (4 samples, 0.14%)</title><rect x="29.7741%" y="277" width="0.1369%" height="15" fill="rgb(212,155,44)"/><text x="30.0241%" y="287.50"></text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (4 samples, 0.14%)</title><rect x="29.7741%" y="261" width="0.1369%" height="15" fill="rgb(226,2,50)"/><text x="30.0241%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.10%)</title><rect x="29.8084%" y="245" width="0.1027%" height="15" fill="rgb(234,177,6)"/><text x="30.0584%" y="255.50"></text></g><g><title>core::fmt::write (3 samples, 0.10%)</title><rect x="29.8084%" y="229" width="0.1027%" height="15" fill="rgb(217,24,9)"/><text x="30.0584%" y="239.50"></text></g><g><title>&lt;irust::irust::buffer::Buffer as alloc::string::ToString&gt;::to_string (21 samples, 0.72%)</title><rect x="30.0137%" y="421" width="0.7187%" height="15" fill="rgb(220,13,46)"/><text x="30.2637%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.72%)</title><rect x="30.0137%" y="405" width="0.7187%" height="15" fill="rgb(239,221,27)"/><text x="30.2637%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (21 samples, 0.72%)</title><rect x="30.0137%" y="389" width="0.7187%" height="15" fill="rgb(222,198,25)"/><text x="30.2637%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (21 samples, 0.72%)</title><rect x="30.0137%" y="373" width="0.7187%" height="15" fill="rgb(211,99,13)"/><text x="30.2637%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (21 samples, 0.72%)</title><rect x="30.0137%" y="357" width="0.7187%" height="15" fill="rgb(232,111,31)"/><text x="30.2637%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (20 samples, 0.68%)</title><rect x="30.0479%" y="341" width="0.6845%" height="15" fill="rgb(245,82,37)"/><text x="30.2979%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.68%)</title><rect x="30.0479%" y="325" width="0.6845%" height="15" fill="rgb(227,149,46)"/><text x="30.2979%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.68%)</title><rect x="30.0479%" y="309" width="0.6845%" height="15" fill="rgb(218,36,50)"/><text x="30.2979%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (20 samples, 0.68%)</title><rect x="30.0479%" y="293" width="0.6845%" height="15" fill="rgb(226,80,48)"/><text x="30.2979%" y="303.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (14 samples, 0.48%)</title><rect x="30.2533%" y="277" width="0.4791%" height="15" fill="rgb(238,224,15)"/><text x="30.5033%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (14 samples, 0.48%)</title><rect x="30.2533%" y="261" width="0.4791%" height="15" fill="rgb(241,136,10)"/><text x="30.5033%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (14 samples, 0.48%)</title><rect x="30.2533%" y="245" width="0.4791%" height="15" fill="rgb(208,32,45)"/><text x="30.5033%" y="255.50"></text></g><g><title>alloc::string::String::push (14 samples, 0.48%)</title><rect x="30.2533%" y="229" width="0.4791%" height="15" fill="rgb(207,135,9)"/><text x="30.5033%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (14 samples, 0.48%)</title><rect x="30.2533%" y="213" width="0.4791%" height="15" fill="rgb(206,86,44)"/><text x="30.5033%" y="223.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 0.14%)</title><rect x="30.7666%" y="341" width="0.1369%" height="15" fill="rgb(245,177,15)"/><text x="31.0166%" y="351.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 0.14%)</title><rect x="30.7666%" y="325" width="0.1369%" height="15" fill="rgb(206,64,50)"/><text x="31.0166%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.14%)</title><rect x="30.7666%" y="309" width="0.1369%" height="15" fill="rgb(234,36,40)"/><text x="31.0166%" y="319.50"></text></g><g><title>core::fmt::write (4 samples, 0.14%)</title><rect x="30.7666%" y="293" width="0.1369%" height="15" fill="rgb(213,64,8)"/><text x="31.0166%" y="303.50"></text></g><g><title>crossterm::cursor::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::cursor::MoveTo&gt;&gt;::fmt (4 samples, 0.14%)</title><rect x="30.7666%" y="277" width="0.1369%" height="15" fill="rgb(210,75,36)"/><text x="31.0166%" y="287.50"></text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (4 samples, 0.14%)</title><rect x="30.7666%" y="261" width="0.1369%" height="15" fill="rgb(229,88,21)"/><text x="31.0166%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (4 samples, 0.14%)</title><rect x="30.7666%" y="245" width="0.1369%" height="15" fill="rgb(252,204,47)"/><text x="31.0166%" y="255.50"></text></g><g><title>core::fmt::write (4 samples, 0.14%)</title><rect x="30.7666%" y="229" width="0.1369%" height="15" fill="rgb(208,77,27)"/><text x="31.0166%" y="239.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_start (6 samples, 0.21%)</title><rect x="30.7324%" y="421" width="0.2053%" height="15" fill="rgb(221,76,26)"/><text x="30.9824%" y="431.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_internal_pos (5 samples, 0.17%)</title><rect x="30.7666%" y="405" width="0.1711%" height="15" fill="rgb(225,139,18)"/><text x="31.0166%" y="415.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (5 samples, 0.17%)</title><rect x="30.7666%" y="389" width="0.1711%" height="15" fill="rgb(230,137,11)"/><text x="31.0166%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.17%)</title><rect x="30.7666%" y="373" width="0.1711%" height="15" fill="rgb(212,28,1)"/><text x="31.0166%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto::{{closure}} (5 samples, 0.17%)</title><rect x="30.7666%" y="357" width="0.1711%" height="15" fill="rgb(248,164,17)"/><text x="31.0166%" y="367.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 0.14%)</title><rect x="31.0062%" y="357" width="0.1369%" height="15" fill="rgb(222,171,42)"/><text x="31.2562%" y="367.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 0.14%)</title><rect x="31.0062%" y="341" width="0.1369%" height="15" fill="rgb(243,84,45)"/><text x="31.2562%" y="351.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.10%)</title><rect x="31.0404%" y="325" width="0.1027%" height="15" fill="rgb(252,49,23)"/><text x="31.2904%" y="335.50"></text></g><g><title>irust::irust::cursor::Cursor::hide (7 samples, 0.24%)</title><rect x="30.9377%" y="421" width="0.2396%" height="15" fill="rgb(215,19,7)"/><text x="31.1877%" y="431.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::hide (7 samples, 0.24%)</title><rect x="30.9377%" y="405" width="0.2396%" height="15" fill="rgb(238,81,41)"/><text x="31.1877%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (6 samples, 0.21%)</title><rect x="30.9719%" y="389" width="0.2053%" height="15" fill="rgb(210,199,37)"/><text x="31.2219%" y="399.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::hide::{{closure}} (6 samples, 0.21%)</title><rect x="30.9719%" y="373" width="0.2053%" height="15" fill="rgb(244,192,49)"/><text x="31.2219%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (4 samples, 0.14%)</title><rect x="32.1355%" y="309" width="0.1369%" height="15" fill="rgb(226,211,11)"/><text x="32.3855%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.14%)</title><rect x="32.1355%" y="293" width="0.1369%" height="15" fill="rgb(236,162,54)"/><text x="32.3855%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (4 samples, 0.14%)</title><rect x="32.1355%" y="277" width="0.1369%" height="15" fill="rgb(220,229,9)"/><text x="32.3855%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="32.1697%" y="261" width="0.1027%" height="15" fill="rgb(250,87,22)"/><text x="32.4197%" y="271.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (3 samples, 0.10%)</title><rect x="32.1697%" y="245" width="0.1027%" height="15" fill="rgb(239,43,17)"/><text x="32.4197%" y="255.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.62%)</title><rect x="32.2724%" y="197" width="0.6160%" height="15" fill="rgb(231,177,25)"/><text x="32.5224%" y="207.50"></text></g><g><title>_int_malloc (15 samples, 0.51%)</title><rect x="32.3751%" y="181" width="0.5133%" height="15" fill="rgb(219,179,1)"/><text x="32.6251%" y="191.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (24 samples, 0.82%)</title><rect x="32.1355%" y="405" width="0.8214%" height="15" fill="rgb(238,219,53)"/><text x="32.3855%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (24 samples, 0.82%)</title><rect x="32.1355%" y="389" width="0.8214%" height="15" fill="rgb(232,167,36)"/><text x="32.3855%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (24 samples, 0.82%)</title><rect x="32.1355%" y="373" width="0.8214%" height="15" fill="rgb(244,19,51)"/><text x="32.3855%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (24 samples, 0.82%)</title><rect x="32.1355%" y="357" width="0.8214%" height="15" fill="rgb(224,6,22)"/><text x="32.3855%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (24 samples, 0.82%)</title><rect x="32.1355%" y="341" width="0.8214%" height="15" fill="rgb(224,145,5)"/><text x="32.3855%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.82%)</title><rect x="32.1355%" y="325" width="0.8214%" height="15" fill="rgb(234,130,49)"/><text x="32.3855%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20 samples, 0.68%)</title><rect x="32.2724%" y="309" width="0.6845%" height="15" fill="rgb(254,6,2)"/><text x="32.5224%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (20 samples, 0.68%)</title><rect x="32.2724%" y="293" width="0.6845%" height="15" fill="rgb(208,96,46)"/><text x="32.5224%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.68%)</title><rect x="32.2724%" y="277" width="0.6845%" height="15" fill="rgb(239,3,39)"/><text x="32.5224%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.68%)</title><rect x="32.2724%" y="261" width="0.6845%" height="15" fill="rgb(233,210,1)"/><text x="32.5224%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (20 samples, 0.68%)</title><rect x="32.2724%" y="245" width="0.6845%" height="15" fill="rgb(244,137,37)"/><text x="32.5224%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.68%)</title><rect x="32.2724%" y="229" width="0.6845%" height="15" fill="rgb(240,136,2)"/><text x="32.5224%" y="239.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.68%)</title><rect x="32.2724%" y="213" width="0.6845%" height="15" fill="rgb(239,18,37)"/><text x="32.5224%" y="223.50"></text></g><g><title>irust::irust::highlight::highlight (14 samples, 0.48%)</title><rect x="33.0253%" y="405" width="0.4791%" height="15" fill="rgb(218,185,22)"/><text x="33.2753%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.31%)</title><rect x="33.6413%" y="293" width="0.3080%" height="15" fill="rgb(225,218,4)"/><text x="33.8913%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.31%)</title><rect x="33.6413%" y="277" width="0.3080%" height="15" fill="rgb(230,182,32)"/><text x="33.8913%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (9 samples, 0.31%)</title><rect x="33.6413%" y="261" width="0.3080%" height="15" fill="rgb(242,56,43)"/><text x="33.8913%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.27%)</title><rect x="33.6756%" y="245" width="0.2738%" height="15" fill="rgb(233,99,24)"/><text x="33.9256%" y="255.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (8 samples, 0.27%)</title><rect x="33.6756%" y="229" width="0.2738%" height="15" fill="rgb(234,209,42)"/><text x="33.9256%" y="239.50"></text></g><g><title>__GI___libc_malloc (68 samples, 2.33%)</title><rect x="34.0862%" y="181" width="2.3272%" height="15" fill="rgb(227,7,12)"/><text x="34.3362%" y="191.50">_..</text></g><g><title>_int_malloc (52 samples, 1.78%)</title><rect x="34.6338%" y="165" width="1.7796%" height="15" fill="rgb(245,203,43)"/><text x="34.8838%" y="175.50">_..</text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.10%)</title><rect x="36.3107%" y="149" width="0.1027%" height="15" fill="rgb(238,205,33)"/><text x="36.5607%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (89 samples, 3.05%)</title><rect x="33.6413%" y="341" width="3.0459%" height="15" fill="rgb(231,56,7)"/><text x="33.8913%" y="351.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (89 samples, 3.05%)</title><rect x="33.6413%" y="325" width="3.0459%" height="15" fill="rgb(244,186,29)"/><text x="33.8913%" y="335.50">all..</text></g><g><title>alloc::slice::hack::to_vec (89 samples, 3.05%)</title><rect x="33.6413%" y="309" width="3.0459%" height="15" fill="rgb(234,111,31)"/><text x="33.8913%" y="319.50">all..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (80 samples, 2.74%)</title><rect x="33.9493%" y="293" width="2.7379%" height="15" fill="rgb(241,149,10)"/><text x="34.1993%" y="303.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (77 samples, 2.64%)</title><rect x="34.0520%" y="277" width="2.6352%" height="15" fill="rgb(249,206,44)"/><text x="34.3020%" y="287.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (77 samples, 2.64%)</title><rect x="34.0520%" y="261" width="2.6352%" height="15" fill="rgb(251,153,30)"/><text x="34.3020%" y="271.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (77 samples, 2.64%)</title><rect x="34.0520%" y="245" width="2.6352%" height="15" fill="rgb(239,152,38)"/><text x="34.3020%" y="255.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (77 samples, 2.64%)</title><rect x="34.0520%" y="229" width="2.6352%" height="15" fill="rgb(249,139,47)"/><text x="34.3020%" y="239.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 2.64%)</title><rect x="34.0520%" y="213" width="2.6352%" height="15" fill="rgb(244,64,35)"/><text x="34.3020%" y="223.50">al..</text></g><g><title>alloc::alloc::alloc (77 samples, 2.64%)</title><rect x="34.0520%" y="197" width="2.6352%" height="15" fill="rgb(216,46,15)"/><text x="34.3020%" y="207.50">al..</text></g><g><title>__rdl_alloc (8 samples, 0.27%)</title><rect x="36.4134%" y="181" width="0.2738%" height="15" fill="rgb(250,74,19)"/><text x="36.6634%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.27%)</title><rect x="36.4134%" y="165" width="0.2738%" height="15" fill="rgb(249,42,33)"/><text x="36.6634%" y="175.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (92 samples, 3.15%)</title><rect x="33.6413%" y="389" width="3.1485%" height="15" fill="rgb(242,149,17)"/><text x="33.8913%" y="399.50">&lt;ch..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (92 samples, 3.15%)</title><rect x="33.6413%" y="373" width="3.1485%" height="15" fill="rgb(244,29,21)"/><text x="33.8913%" y="383.50">&lt;al..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (92 samples, 3.15%)</title><rect x="33.6413%" y="357" width="3.1485%" height="15" fill="rgb(220,130,37)"/><text x="33.8913%" y="367.50">all..</text></g><g><title>alloc::string::String::from_utf8_unchecked (3 samples, 0.10%)</title><rect x="36.6872%" y="341" width="0.1027%" height="15" fill="rgb(211,67,2)"/><text x="36.9372%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (8 samples, 0.27%)</title><rect x="36.8241%" y="357" width="0.2738%" height="15" fill="rgb(235,68,52)"/><text x="37.0741%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="36.9268%" y="341" width="0.1711%" height="15" fill="rgb(246,142,3)"/><text x="37.1768%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.14%)</title><rect x="36.9610%" y="325" width="0.1369%" height="15" fill="rgb(241,25,7)"/><text x="37.2110%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.14%)</title><rect x="36.9610%" y="309" width="0.1369%" height="15" fill="rgb(242,119,39)"/><text x="37.2110%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.34%)</title><rect x="36.7899%" y="389" width="0.3422%" height="15" fill="rgb(241,98,45)"/><text x="37.0399%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.31%)</title><rect x="36.8241%" y="373" width="0.3080%" height="15" fill="rgb(254,28,30)"/><text x="37.0741%" y="383.50"></text></g><g><title>alloc::string::String::push (7 samples, 0.24%)</title><rect x="37.1321%" y="389" width="0.2396%" height="15" fill="rgb(241,142,54)"/><text x="37.3821%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (7 samples, 0.24%)</title><rect x="37.1321%" y="373" width="0.2396%" height="15" fill="rgb(222,85,15)"/><text x="37.3821%" y="383.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (6 samples, 0.21%)</title><rect x="37.5428%" y="213" width="0.2053%" height="15" fill="rgb(210,85,47)"/><text x="37.7928%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (44 samples, 1.51%)</title><rect x="37.3717%" y="389" width="1.5058%" height="15" fill="rgb(224,206,25)"/><text x="37.6217%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (43 samples, 1.47%)</title><rect x="37.4059%" y="373" width="1.4716%" height="15" fill="rgb(243,201,19)"/><text x="37.6559%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (43 samples, 1.47%)</title><rect x="37.4059%" y="357" width="1.4716%" height="15" fill="rgb(236,59,4)"/><text x="37.6559%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (43 samples, 1.47%)</title><rect x="37.4059%" y="341" width="1.4716%" height="15" fill="rgb(254,179,45)"/><text x="37.6559%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (43 samples, 1.47%)</title><rect x="37.4059%" y="325" width="1.4716%" height="15" fill="rgb(226,14,10)"/><text x="37.6559%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (42 samples, 1.44%)</title><rect x="37.4401%" y="309" width="1.4374%" height="15" fill="rgb(244,27,41)"/><text x="37.6901%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (42 samples, 1.44%)</title><rect x="37.4401%" y="293" width="1.4374%" height="15" fill="rgb(235,35,32)"/><text x="37.6901%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (42 samples, 1.44%)</title><rect x="37.4401%" y="277" width="1.4374%" height="15" fill="rgb(218,68,31)"/><text x="37.6901%" y="287.50"></text></g><g><title>alloc::alloc::realloc (42 samples, 1.44%)</title><rect x="37.4401%" y="261" width="1.4374%" height="15" fill="rgb(207,120,37)"/><text x="37.6901%" y="271.50"></text></g><g><title>__GI___libc_realloc (42 samples, 1.44%)</title><rect x="37.4401%" y="245" width="1.4374%" height="15" fill="rgb(227,98,0)"/><text x="37.6901%" y="255.50"></text></g><g><title>_int_realloc (42 samples, 1.44%)</title><rect x="37.4401%" y="229" width="1.4374%" height="15" fill="rgb(207,7,3)"/><text x="37.6901%" y="239.50"></text></g><g><title>_int_malloc (32 samples, 1.10%)</title><rect x="37.7823%" y="213" width="1.0951%" height="15" fill="rgb(206,98,19)"/><text x="38.0323%" y="223.50"></text></g><g><title>malloc_consolidate (20 samples, 0.68%)</title><rect x="38.1930%" y="197" width="0.6845%" height="15" fill="rgb(217,5,26)"/><text x="38.4430%" y="207.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_alphabetic (3 samples, 0.10%)</title><rect x="38.8775%" y="373" width="0.1027%" height="15" fill="rgb(235,190,38)"/><text x="39.1275%" y="383.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_alphanumeric (4 samples, 0.14%)</title><rect x="38.8775%" y="389" width="0.1369%" height="15" fill="rgb(247,86,24)"/><text x="39.1275%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.27%)</title><rect x="39.1170%" y="261" width="0.2738%" height="15" fill="rgb(205,101,16)"/><text x="39.3670%" y="271.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.27%)</title><rect x="39.1170%" y="245" width="0.2738%" height="15" fill="rgb(246,168,33)"/><text x="39.3670%" y="255.50"></text></g><g><title>_int_malloc (6 samples, 0.21%)</title><rect x="39.1855%" y="229" width="0.2053%" height="15" fill="rgb(231,114,1)"/><text x="39.4355%" y="239.50"></text></g><g><title>alloc::string::String::reserve (11 samples, 0.38%)</title><rect x="39.0486%" y="341" width="0.3765%" height="15" fill="rgb(207,184,53)"/><text x="39.2986%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (11 samples, 0.38%)</title><rect x="39.0486%" y="325" width="0.3765%" height="15" fill="rgb(224,95,51)"/><text x="39.2986%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.38%)</title><rect x="39.0486%" y="309" width="0.3765%" height="15" fill="rgb(212,188,45)"/><text x="39.2986%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (9 samples, 0.31%)</title><rect x="39.1170%" y="293" width="0.3080%" height="15" fill="rgb(223,154,38)"/><text x="39.3670%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.31%)</title><rect x="39.1170%" y="277" width="0.3080%" height="15" fill="rgb(251,22,52)"/><text x="39.3670%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.51%)</title><rect x="39.0486%" y="389" width="0.5133%" height="15" fill="rgb(229,209,22)"/><text x="39.2986%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (15 samples, 0.51%)</title><rect x="39.0486%" y="373" width="0.5133%" height="15" fill="rgb(234,138,34)"/><text x="39.2986%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (15 samples, 0.51%)</title><rect x="39.0486%" y="357" width="0.5133%" height="15" fill="rgb(212,95,11)"/><text x="39.2986%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.14%)</title><rect x="39.4251%" y="341" width="0.1369%" height="15" fill="rgb(240,179,47)"/><text x="39.6751%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.10%)</title><rect x="39.4593%" y="325" width="0.1027%" height="15" fill="rgb(240,163,11)"/><text x="39.7093%" y="335.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (6 samples, 0.21%)</title><rect x="39.9384%" y="341" width="0.2053%" height="15" fill="rgb(236,37,12)"/><text x="40.1884%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (6 samples, 0.21%)</title><rect x="39.9384%" y="325" width="0.2053%" height="15" fill="rgb(232,164,16)"/><text x="40.1884%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (17 samples, 0.58%)</title><rect x="39.6304%" y="389" width="0.5818%" height="15" fill="rgb(244,205,15)"/><text x="39.8804%" y="399.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (17 samples, 0.58%)</title><rect x="39.6304%" y="373" width="0.5818%" height="15" fill="rgb(223,117,47)"/><text x="39.8804%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (17 samples, 0.58%)</title><rect x="39.6304%" y="357" width="0.5818%" height="15" fill="rgb(244,107,35)"/><text x="39.8804%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.62%)</title><rect x="40.2464%" y="373" width="0.6160%" height="15" fill="rgb(205,140,8)"/><text x="40.4964%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (18 samples, 0.62%)</title><rect x="40.2464%" y="357" width="0.6160%" height="15" fill="rgb(228,84,46)"/><text x="40.4964%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.62%)</title><rect x="40.2464%" y="341" width="0.6160%" height="15" fill="rgb(254,188,9)"/><text x="40.4964%" y="351.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.62%)</title><rect x="40.2464%" y="325" width="0.6160%" height="15" fill="rgb(206,112,54)"/><text x="40.4964%" y="335.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.62%)</title><rect x="40.2464%" y="309" width="0.6160%" height="15" fill="rgb(216,84,49)"/><text x="40.4964%" y="319.50"></text></g><g><title>_int_malloc (11 samples, 0.38%)</title><rect x="40.4860%" y="293" width="0.3765%" height="15" fill="rgb(214,194,35)"/><text x="40.7360%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.38%)</title><rect x="40.9993%" y="245" width="0.3765%" height="15" fill="rgb(249,28,3)"/><text x="41.2493%" y="255.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.38%)</title><rect x="40.9993%" y="229" width="0.3765%" height="15" fill="rgb(222,56,52)"/><text x="41.2493%" y="239.50"></text></g><g><title>_int_malloc (8 samples, 0.27%)</title><rect x="41.1020%" y="213" width="0.2738%" height="15" fill="rgb(245,217,50)"/><text x="41.3520%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.41%)</title><rect x="40.9993%" y="261" width="0.4107%" height="15" fill="rgb(213,201,24)"/><text x="41.2493%" y="271.50"></text></g><g><title>alloc::string::String::reserve (14 samples, 0.48%)</title><rect x="40.9651%" y="325" width="0.4791%" height="15" fill="rgb(248,116,28)"/><text x="41.2151%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (14 samples, 0.48%)</title><rect x="40.9651%" y="309" width="0.4791%" height="15" fill="rgb(219,72,43)"/><text x="41.2151%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.44%)</title><rect x="40.9993%" y="293" width="0.4449%" height="15" fill="rgb(209,138,14)"/><text x="41.2493%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (13 samples, 0.44%)</title><rect x="40.9993%" y="277" width="0.4449%" height="15" fill="rgb(222,18,33)"/><text x="41.2493%" y="287.50"></text></g><g><title>&lt;alloc::string::Drain as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.24%)</title><rect x="41.5127%" y="293" width="0.2396%" height="15" fill="rgb(213,199,7)"/><text x="41.7627%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.24%)</title><rect x="41.5127%" y="277" width="0.2396%" height="15" fill="rgb(250,110,10)"/><text x="41.7627%" y="287.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.24%)</title><rect x="41.5127%" y="261" width="0.2396%" height="15" fill="rgb(248,123,6)"/><text x="41.7627%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (27 samples, 0.92%)</title><rect x="40.9309%" y="341" width="0.9240%" height="15" fill="rgb(206,91,31)"/><text x="41.1809%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12 samples, 0.41%)</title><rect x="41.4442%" y="325" width="0.4107%" height="15" fill="rgb(211,154,13)"/><text x="41.6942%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.34%)</title><rect x="41.5127%" y="309" width="0.3422%" height="15" fill="rgb(225,148,7)"/><text x="41.7627%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.10%)</title><rect x="41.7522%" y="293" width="0.1027%" height="15" fill="rgb(220,160,43)"/><text x="42.0022%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (3 samples, 0.10%)</title><rect x="41.7522%" y="277" width="0.1027%" height="15" fill="rgb(213,52,39)"/><text x="42.0022%" y="287.50"></text></g><g><title>alloc::string::String::push (3 samples, 0.10%)</title><rect x="41.7522%" y="261" width="0.1027%" height="15" fill="rgb(243,137,7)"/><text x="42.0022%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (3 samples, 0.10%)</title><rect x="41.7522%" y="245" width="0.1027%" height="15" fill="rgb(230,79,13)"/><text x="42.0022%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (29 samples, 0.99%)</title><rect x="40.8966%" y="373" width="0.9925%" height="15" fill="rgb(247,105,23)"/><text x="41.1466%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (28 samples, 0.96%)</title><rect x="40.9309%" y="357" width="0.9582%" height="15" fill="rgb(223,179,41)"/><text x="41.1809%" y="367.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="42.1287%" y="357" width="0.1027%" height="15" fill="rgb(218,9,34)"/><text x="42.3787%" y="367.50"></text></g><g><title>__GI___libc_free (4 samples, 0.14%)</title><rect x="42.2313%" y="229" width="0.1369%" height="15" fill="rgb(222,106,8)"/><text x="42.4813%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.17%)</title><rect x="42.2313%" y="357" width="0.1711%" height="15" fill="rgb(211,220,0)"/><text x="42.4813%" y="367.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.17%)</title><rect x="42.2313%" y="341" width="0.1711%" height="15" fill="rgb(229,52,16)"/><text x="42.4813%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.17%)</title><rect x="42.2313%" y="325" width="0.1711%" height="15" fill="rgb(212,155,18)"/><text x="42.4813%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.17%)</title><rect x="42.2313%" y="309" width="0.1711%" height="15" fill="rgb(242,21,14)"/><text x="42.4813%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.17%)</title><rect x="42.2313%" y="293" width="0.1711%" height="15" fill="rgb(222,19,48)"/><text x="42.4813%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.17%)</title><rect x="42.2313%" y="277" width="0.1711%" height="15" fill="rgb(232,45,27)"/><text x="42.4813%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (5 samples, 0.17%)</title><rect x="42.2313%" y="261" width="0.1711%" height="15" fill="rgb(249,103,42)"/><text x="42.4813%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.17%)</title><rect x="42.2313%" y="245" width="0.1711%" height="15" fill="rgb(246,81,33)"/><text x="42.4813%" y="255.50"></text></g><g><title>irust::irust::highlight::is_const (7 samples, 0.24%)</title><rect x="42.4367%" y="357" width="0.2396%" height="15" fill="rgb(252,33,42)"/><text x="42.6867%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (7 samples, 0.24%)</title><rect x="42.4367%" y="341" width="0.2396%" height="15" fill="rgb(209,212,41)"/><text x="42.6867%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7 samples, 0.24%)</title><rect x="42.4367%" y="325" width="0.2396%" height="15" fill="rgb(207,154,6)"/><text x="42.6867%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (5 samples, 0.17%)</title><rect x="42.5051%" y="309" width="0.1711%" height="15" fill="rgb(223,64,47)"/><text x="42.7551%" y="319.50"></text></g><g><title>irust::irust::highlight::is_const::{{closure}} (5 samples, 0.17%)</title><rect x="42.5051%" y="293" width="0.1711%" height="15" fill="rgb(211,161,38)"/><text x="42.7551%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_uppercase (5 samples, 0.17%)</title><rect x="42.5051%" y="277" width="0.1711%" height="15" fill="rgb(219,138,40)"/><text x="42.7551%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.10%)</title><rect x="42.7789%" y="213" width="0.1027%" height="15" fill="rgb(241,228,46)"/><text x="43.0289%" y="223.50"></text></g><g><title>irust::irust::highlight::is_keyword (5 samples, 0.17%)</title><rect x="42.7447%" y="357" width="0.1711%" height="15" fill="rgb(223,209,38)"/><text x="42.9947%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (5 samples, 0.17%)</title><rect x="42.7447%" y="341" width="0.1711%" height="15" fill="rgb(236,164,45)"/><text x="42.9947%" y="351.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (5 samples, 0.17%)</title><rect x="42.7447%" y="325" width="0.1711%" height="15" fill="rgb(231,15,5)"/><text x="42.9947%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (5 samples, 0.17%)</title><rect x="42.7447%" y="309" width="0.1711%" height="15" fill="rgb(252,35,15)"/><text x="42.9947%" y="319.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (4 samples, 0.14%)</title><rect x="42.7789%" y="293" width="0.1369%" height="15" fill="rgb(248,181,18)"/><text x="43.0289%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.14%)</title><rect x="42.7789%" y="277" width="0.1369%" height="15" fill="rgb(233,39,42)"/><text x="43.0289%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.14%)</title><rect x="42.7789%" y="261" width="0.1369%" height="15" fill="rgb(238,110,33)"/><text x="43.0289%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.14%)</title><rect x="42.7789%" y="245" width="0.1369%" height="15" fill="rgb(233,195,10)"/><text x="43.0289%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.14%)</title><rect x="42.7789%" y="229" width="0.1369%" height="15" fill="rgb(254,105,3)"/><text x="43.0289%" y="239.50"></text></g><g><title>irust::irust::highlight::catch_all (83 samples, 2.84%)</title><rect x="40.2122%" y="389" width="2.8405%" height="15" fill="rgb(221,225,9)"/><text x="40.4622%" y="399.50">ir..</text></g><g><title>irust::irust::highlight::parse_as (34 samples, 1.16%)</title><rect x="41.8891%" y="373" width="1.1636%" height="15" fill="rgb(224,227,45)"/><text x="42.1391%" y="383.50"></text></g><g><title>irust::irust::highlight::parse (281 samples, 9.62%)</title><rect x="33.5044%" y="405" width="9.6167%" height="15" fill="rgb(229,198,43)"/><text x="33.7544%" y="415.50">irust::irust::..</text></g><g><title>core::str::&lt;impl str&gt;::starts_with (4 samples, 0.14%)</title><rect x="43.2238%" y="389" width="0.1369%" height="15" fill="rgb(206,209,35)"/><text x="43.4738%" y="399.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (4 samples, 0.14%)</title><rect x="43.2238%" y="373" width="0.1369%" height="15" fill="rgb(245,195,53)"/><text x="43.4738%" y="383.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (4 samples, 0.14%)</title><rect x="43.2238%" y="357" width="0.1369%" height="15" fill="rgb(240,92,26)"/><text x="43.4738%" y="367.50"></text></g><g><title>irust::irust::highlight::theme::theme_color_to_term_color (3 samples, 0.10%)</title><rect x="43.2580%" y="341" width="0.1027%" height="15" fill="rgb(207,40,23)"/><text x="43.5080%" y="351.50"></text></g><g><title>__memcmp_sse4_1 (5 samples, 0.17%)</title><rect x="43.5318%" y="325" width="0.1711%" height="15" fill="rgb(223,111,35)"/><text x="43.7818%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (11 samples, 0.38%)</title><rect x="43.3607%" y="341" width="0.3765%" height="15" fill="rgb(229,147,28)"/><text x="43.6107%" y="351.50"></text></g><g><title>irust::irust::highlight::theme::theme_color_to_term_color (20 samples, 0.68%)</title><rect x="43.1211%" y="405" width="0.6845%" height="15" fill="rgb(211,29,28)"/><text x="43.3711%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.44%)</title><rect x="43.3607%" y="389" width="0.4449%" height="15" fill="rgb(228,72,33)"/><text x="43.6107%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.44%)</title><rect x="43.3607%" y="373" width="0.4449%" height="15" fill="rgb(205,214,31)"/><text x="43.6107%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.44%)</title><rect x="43.3607%" y="357" width="0.4449%" height="15" fill="rgb(224,111,15)"/><text x="43.6107%" y="367.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (7 samples, 0.24%)</title><rect x="44.0452%" y="213" width="0.2396%" height="15" fill="rgb(253,21,26)"/><text x="44.2952%" y="223.50"></text></g><g><title>_int_free (4 samples, 0.14%)</title><rect x="44.2847%" y="213" width="0.1369%" height="15" fill="rgb(245,139,43)"/><text x="44.5347%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (17 samples, 0.58%)</title><rect x="43.9767%" y="325" width="0.5818%" height="15" fill="rgb(252,170,7)"/><text x="44.2267%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.58%)</title><rect x="43.9767%" y="309" width="0.5818%" height="15" fill="rgb(231,118,14)"/><text x="44.2267%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (17 samples, 0.58%)</title><rect x="43.9767%" y="293" width="0.5818%" height="15" fill="rgb(238,83,0)"/><text x="44.2267%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 0.58%)</title><rect x="43.9767%" y="277" width="0.5818%" height="15" fill="rgb(221,39,39)"/><text x="44.2267%" y="287.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.58%)</title><rect x="43.9767%" y="261" width="0.5818%" height="15" fill="rgb(222,119,46)"/><text x="44.2267%" y="271.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.58%)</title><rect x="43.9767%" y="245" width="0.5818%" height="15" fill="rgb(222,165,49)"/><text x="44.2267%" y="255.50"></text></g><g><title>_int_realloc (16 samples, 0.55%)</title><rect x="44.0110%" y="229" width="0.5476%" height="15" fill="rgb(219,113,52)"/><text x="44.2610%" y="239.50"></text></g><g><title>_int_malloc (4 samples, 0.14%)</title><rect x="44.4216%" y="213" width="0.1369%" height="15" fill="rgb(214,7,15)"/><text x="44.6716%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::grow (18 samples, 0.62%)</title><rect x="43.9767%" y="373" width="0.6160%" height="15" fill="rgb(235,32,4)"/><text x="44.2267%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (18 samples, 0.62%)</title><rect x="43.9767%" y="357" width="0.6160%" height="15" fill="rgb(238,90,54)"/><text x="44.2267%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (18 samples, 0.62%)</title><rect x="43.9767%" y="341" width="0.6160%" height="15" fill="rgb(213,208,19)"/><text x="44.2267%" y="351.50"></text></g><g><title>irust::irust::highlight::highlight (389 samples, 13.31%)</title><rect x="31.3142%" y="421" width="13.3128%" height="15" fill="rgb(233,156,4)"/><text x="31.5642%" y="431.50">irust::irust::highli..</text></g><g><title>irust::irust::printer::Printer::push (24 samples, 0.82%)</title><rect x="43.8056%" y="405" width="0.8214%" height="15" fill="rgb(207,194,5)"/><text x="44.0556%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (22 samples, 0.75%)</title><rect x="43.8741%" y="389" width="0.7529%" height="15" fill="rgb(206,111,30)"/><text x="44.1241%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.24%)</title><rect x="45.9959%" y="405" width="0.2396%" height="15" fill="rgb(243,70,54)"/><text x="46.2459%" y="415.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.24%)</title><rect x="45.9959%" y="389" width="0.2396%" height="15" fill="rgb(242,28,8)"/><text x="46.2459%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="46.1328%" y="373" width="0.1027%" height="15" fill="rgb(219,106,18)"/><text x="46.3828%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (12 samples, 0.41%)</title><rect x="46.2697%" y="373" width="0.4107%" height="15" fill="rgb(244,222,10)"/><text x="46.5197%" y="383.50"></text></g><g><title>core::ptr::read (11 samples, 0.38%)</title><rect x="46.3039%" y="357" width="0.3765%" height="15" fill="rgb(236,179,52)"/><text x="46.5539%" y="367.50"></text></g><g><title>&lt;irust::irust::printer::Printer as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.48%)</title><rect x="46.2355%" y="405" width="0.4791%" height="15" fill="rgb(213,23,39)"/><text x="46.4855%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (14 samples, 0.48%)</title><rect x="46.2355%" y="389" width="0.4791%" height="15" fill="rgb(238,48,10)"/><text x="46.4855%" y="399.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.10%)</title><rect x="46.7146%" y="373" width="0.1027%" height="15" fill="rgb(251,196,23)"/><text x="46.9646%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::as_mut_slices (3 samples, 0.10%)</title><rect x="46.7146%" y="357" width="0.1027%" height="15" fill="rgb(250,152,24)"/><text x="46.9646%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.62%)</title><rect x="46.8172%" y="357" width="0.6160%" height="15" fill="rgb(209,150,17)"/><text x="47.0672%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (17 samples, 0.58%)</title><rect x="46.8515%" y="341" width="0.5818%" height="15" fill="rgb(234,202,34)"/><text x="47.1015%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.58%)</title><rect x="46.8515%" y="325" width="0.5818%" height="15" fill="rgb(253,148,53)"/><text x="47.1015%" y="335.50"></text></g><g><title>_int_free (17 samples, 0.58%)</title><rect x="46.8515%" y="309" width="0.5818%" height="15" fill="rgb(218,129,16)"/><text x="47.1015%" y="319.50"></text></g><g><title>malloc_consolidate (16 samples, 0.55%)</title><rect x="46.8857%" y="293" width="0.5476%" height="15" fill="rgb(216,85,19)"/><text x="47.1357%" y="303.50"></text></g><g><title>unlink_chunk.constprop.0 (6 samples, 0.21%)</title><rect x="47.2279%" y="277" width="0.2053%" height="15" fill="rgb(235,228,7)"/><text x="47.4779%" y="287.50"></text></g><g><title>__GI___libc_free (9 samples, 0.31%)</title><rect x="47.6728%" y="293" width="0.3080%" height="15" fill="rgb(245,175,0)"/><text x="47.9228%" y="303.50"></text></g><g><title>core::ptr::drop_in_place (74 samples, 2.53%)</title><rect x="46.7146%" y="405" width="2.5325%" height="15" fill="rgb(208,168,36)"/><text x="46.9646%" y="415.50">co..</text></g><g><title>core::ptr::drop_in_place (74 samples, 2.53%)</title><rect x="46.7146%" y="389" width="2.5325%" height="15" fill="rgb(246,171,24)"/><text x="46.9646%" y="399.50">co..</text></g><g><title>core::ptr::drop_in_place (71 samples, 2.43%)</title><rect x="46.8172%" y="373" width="2.4298%" height="15" fill="rgb(215,142,24)"/><text x="47.0672%" y="383.50">co..</text></g><g><title>core::ptr::drop_in_place (53 samples, 1.81%)</title><rect x="47.4333%" y="357" width="1.8138%" height="15" fill="rgb(250,187,7)"/><text x="47.6833%" y="367.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 1.81%)</title><rect x="47.4333%" y="341" width="1.8138%" height="15" fill="rgb(228,66,33)"/><text x="47.6833%" y="351.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (53 samples, 1.81%)</title><rect x="47.4333%" y="325" width="1.8138%" height="15" fill="rgb(234,215,21)"/><text x="47.6833%" y="335.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (53 samples, 1.81%)</title><rect x="47.4333%" y="309" width="1.8138%" height="15" fill="rgb(222,191,20)"/><text x="47.6833%" y="319.50">a..</text></g><g><title>_int_free (34 samples, 1.16%)</title><rect x="48.0835%" y="293" width="1.1636%" height="15" fill="rgb(245,79,54)"/><text x="48.3335%" y="303.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.10%)</title><rect x="49.3498%" y="181" width="0.1027%" height="15" fill="rgb(240,10,37)"/><text x="49.5998%" y="191.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.14%)</title><rect x="49.3498%" y="245" width="0.1369%" height="15" fill="rgb(214,192,32)"/><text x="49.5998%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="49.3498%" y="229" width="0.1369%" height="15" fill="rgb(209,36,54)"/><text x="49.5998%" y="239.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="49.3498%" y="213" width="0.1369%" height="15" fill="rgb(220,10,11)"/><text x="49.5998%" y="223.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="49.3498%" y="197" width="0.1369%" height="15" fill="rgb(221,106,17)"/><text x="49.5998%" y="207.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.10%)</title><rect x="49.7262%" y="117" width="0.1027%" height="15" fill="rgb(251,142,44)"/><text x="49.9762%" y="127.50"></text></g><g><title>__memrchr_sse2 (4 samples, 0.14%)</title><rect x="49.8631%" y="69" width="0.1369%" height="15" fill="rgb(238,13,15)"/><text x="50.1131%" y="79.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (9 samples, 0.31%)</title><rect x="49.7262%" y="149" width="0.3080%" height="15" fill="rgb(208,107,27)"/><text x="49.9762%" y="159.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (9 samples, 0.31%)</title><rect x="49.7262%" y="133" width="0.3080%" height="15" fill="rgb(205,136,37)"/><text x="49.9762%" y="143.50"></text></g><g><title>std::memchr::memrchr (5 samples, 0.17%)</title><rect x="49.8631%" y="117" width="0.1711%" height="15" fill="rgb(250,205,27)"/><text x="50.1131%" y="127.50"></text></g><g><title>std::sys::unix::memchr::memrchr (5 samples, 0.17%)</title><rect x="49.8631%" y="101" width="0.1711%" height="15" fill="rgb(210,80,43)"/><text x="50.1131%" y="111.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (5 samples, 0.17%)</title><rect x="49.8631%" y="85" width="0.1711%" height="15" fill="rgb(247,160,36)"/><text x="50.1131%" y="95.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (12 samples, 0.41%)</title><rect x="49.6578%" y="181" width="0.4107%" height="15" fill="rgb(234,13,49)"/><text x="49.9078%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (11 samples, 0.38%)</title><rect x="49.6920%" y="165" width="0.3765%" height="15" fill="rgb(234,122,0)"/><text x="49.9420%" y="175.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.17%)</title><rect x="50.1369%" y="149" width="0.1711%" height="15" fill="rgb(207,146,38)"/><text x="50.3869%" y="159.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="50.1711%" y="133" width="0.1369%" height="15" fill="rgb(207,177,25)"/><text x="50.4211%" y="143.50"></text></g><g><title>core::fmt::write (31 samples, 1.06%)</title><rect x="49.3155%" y="261" width="1.0609%" height="15" fill="rgb(211,178,42)"/><text x="49.5655%" y="271.50"></text></g><g><title>crossterm::cursor::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::cursor::MoveTo&gt;&gt;::fmt (25 samples, 0.86%)</title><rect x="49.5209%" y="245" width="0.8556%" height="15" fill="rgb(230,69,54)"/><text x="49.7709%" y="255.50"></text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (25 samples, 0.86%)</title><rect x="49.5209%" y="229" width="0.8556%" height="15" fill="rgb(214,135,41)"/><text x="49.7709%" y="239.50"></text></g><g><title>core::fmt::Formatter::write_fmt (23 samples, 0.79%)</title><rect x="49.5893%" y="213" width="0.7871%" height="15" fill="rgb(237,67,25)"/><text x="49.8393%" y="223.50"></text></g><g><title>core::fmt::write (21 samples, 0.72%)</title><rect x="49.6578%" y="197" width="0.7187%" height="15" fill="rgb(222,189,50)"/><text x="49.9078%" y="207.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (9 samples, 0.31%)</title><rect x="50.0684%" y="181" width="0.3080%" height="15" fill="rgb(245,148,34)"/><text x="50.3184%" y="191.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (9 samples, 0.31%)</title><rect x="50.0684%" y="165" width="0.3080%" height="15" fill="rgb(222,29,6)"/><text x="50.3184%" y="175.50"></text></g><g><title>std::io::Write::write_fmt (32 samples, 1.10%)</title><rect x="49.3155%" y="277" width="1.0951%" height="15" fill="rgb(221,189,43)"/><text x="49.5655%" y="287.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (34 samples, 1.16%)</title><rect x="49.2813%" y="309" width="1.1636%" height="15" fill="rgb(207,36,27)"/><text x="49.5313%" y="319.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (34 samples, 1.16%)</title><rect x="49.2813%" y="293" width="1.1636%" height="15" fill="rgb(217,90,24)"/><text x="49.5313%" y="303.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_next_row_terminal_start (36 samples, 1.23%)</title><rect x="49.2813%" y="405" width="1.2320%" height="15" fill="rgb(224,66,35)"/><text x="49.5313%" y="415.50"></text></g><g><title>irust::irust::cursor::Cursor::goto (36 samples, 1.23%)</title><rect x="49.2813%" y="389" width="1.2320%" height="15" fill="rgb(221,13,50)"/><text x="49.5313%" y="399.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_internal_pos (36 samples, 1.23%)</title><rect x="49.2813%" y="373" width="1.2320%" height="15" fill="rgb(236,68,49)"/><text x="49.5313%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (36 samples, 1.23%)</title><rect x="49.2813%" y="357" width="1.2320%" height="15" fill="rgb(229,146,28)"/><text x="49.5313%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (36 samples, 1.23%)</title><rect x="49.2813%" y="341" width="1.2320%" height="15" fill="rgb(225,31,38)"/><text x="49.5313%" y="351.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto::{{closure}} (36 samples, 1.23%)</title><rect x="49.2813%" y="325" width="1.2320%" height="15" fill="rgb(250,208,3)"/><text x="49.5313%" y="335.50"></text></g><g><title>irust::irust::cursor::Cursor::is_at_last_terminal_col (7 samples, 0.24%)</title><rect x="50.5476%" y="405" width="0.2396%" height="15" fill="rgb(246,54,23)"/><text x="50.7976%" y="415.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.17%)</title><rect x="51.1294%" y="181" width="0.1711%" height="15" fill="rgb(243,76,11)"/><text x="51.3794%" y="191.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.17%)</title><rect x="51.1294%" y="165" width="0.1711%" height="15" fill="rgb(245,21,50)"/><text x="51.3794%" y="175.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.24%)</title><rect x="51.1294%" y="213" width="0.2396%" height="15" fill="rgb(228,9,43)"/><text x="51.3794%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.24%)</title><rect x="51.1294%" y="197" width="0.2396%" height="15" fill="rgb(208,100,47)"/><text x="51.3794%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="51.4031%" y="165" width="0.1369%" height="15" fill="rgb(232,26,8)"/><text x="51.6531%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="51.4031%" y="149" width="0.1369%" height="15" fill="rgb(216,166,38)"/><text x="51.6531%" y="159.50"></text></g><g><title>core::fmt::write (19 samples, 0.65%)</title><rect x="50.9240%" y="293" width="0.6502%" height="15" fill="rgb(251,202,51)"/><text x="51.1740%" y="303.50"></text></g><g><title>crossterm::style::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::style::SetForegroundColor&gt;&gt;::fmt (16 samples, 0.55%)</title><rect x="51.0267%" y="277" width="0.5476%" height="15" fill="rgb(254,216,34)"/><text x="51.2767%" y="287.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (16 samples, 0.55%)</title><rect x="51.0267%" y="261" width="0.5476%" height="15" fill="rgb(251,32,27)"/><text x="51.2767%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (16 samples, 0.55%)</title><rect x="51.0267%" y="245" width="0.5476%" height="15" fill="rgb(208,127,28)"/><text x="51.2767%" y="255.50"></text></g><g><title>core::fmt::write (16 samples, 0.55%)</title><rect x="51.0267%" y="229" width="0.5476%" height="15" fill="rgb(224,137,22)"/><text x="51.2767%" y="239.50"></text></g><g><title>crossterm::style::ansi::&lt;impl core::fmt::Display for crossterm::style::types::colored::Colored&gt;::fmt (5 samples, 0.17%)</title><rect x="51.4031%" y="213" width="0.1711%" height="15" fill="rgb(254,70,32)"/><text x="51.6531%" y="223.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.17%)</title><rect x="51.4031%" y="197" width="0.1711%" height="15" fill="rgb(229,75,37)"/><text x="51.6531%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.17%)</title><rect x="51.4031%" y="181" width="0.1711%" height="15" fill="rgb(252,64,23)"/><text x="51.6531%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (20 samples, 0.68%)</title><rect x="50.9240%" y="309" width="0.6845%" height="15" fill="rgb(232,162,48)"/><text x="51.1740%" y="319.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (24 samples, 0.82%)</title><rect x="50.8556%" y="389" width="0.8214%" height="15" fill="rgb(246,160,12)"/><text x="51.1056%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (23 samples, 0.79%)</title><rect x="50.8898%" y="373" width="0.7871%" height="15" fill="rgb(247,166,0)"/><text x="51.1398%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg::{{closure}} (23 samples, 0.79%)</title><rect x="50.8898%" y="357" width="0.7871%" height="15" fill="rgb(249,219,21)"/><text x="51.1398%" y="367.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (23 samples, 0.79%)</title><rect x="50.8898%" y="341" width="0.7871%" height="15" fill="rgb(205,209,3)"/><text x="51.1398%" y="351.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (23 samples, 0.79%)</title><rect x="50.8898%" y="325" width="0.7871%" height="15" fill="rgb(243,44,1)"/><text x="51.1398%" y="335.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (6 samples, 0.21%)</title><rect x="52.0876%" y="213" width="0.2053%" height="15" fill="rgb(206,159,16)"/><text x="52.3376%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.24%)</title><rect x="52.0876%" y="277" width="0.2396%" height="15" fill="rgb(244,77,30)"/><text x="52.3376%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.24%)</title><rect x="52.0876%" y="261" width="0.2396%" height="15" fill="rgb(218,69,12)"/><text x="52.3376%" y="271.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.24%)</title><rect x="52.0876%" y="245" width="0.2396%" height="15" fill="rgb(212,87,7)"/><text x="52.3376%" y="255.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (7 samples, 0.24%)</title><rect x="52.0876%" y="229" width="0.2396%" height="15" fill="rgb(245,114,25)"/><text x="52.3376%" y="239.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.17%)</title><rect x="52.7036%" y="181" width="0.1711%" height="15" fill="rgb(210,61,42)"/><text x="52.9536%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (4 samples, 0.14%)</title><rect x="52.7379%" y="165" width="0.1369%" height="15" fill="rgb(211,52,33)"/><text x="52.9879%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.14%)</title><rect x="52.7379%" y="149" width="0.1369%" height="15" fill="rgb(234,58,33)"/><text x="52.9879%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (4 samples, 0.14%)</title><rect x="52.7379%" y="133" width="0.1369%" height="15" fill="rgb(220,115,36)"/><text x="52.9879%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (8 samples, 0.27%)</title><rect x="52.6694%" y="245" width="0.2738%" height="15" fill="rgb(243,153,54)"/><text x="52.9194%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.24%)</title><rect x="52.7036%" y="229" width="0.2396%" height="15" fill="rgb(251,47,18)"/><text x="52.9536%" y="239.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.24%)</title><rect x="52.7036%" y="213" width="0.2396%" height="15" fill="rgb(242,102,42)"/><text x="52.9536%" y="223.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.24%)</title><rect x="52.7036%" y="197" width="0.2396%" height="15" fill="rgb(234,31,38)"/><text x="52.9536%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.24%)</title><rect x="53.0459%" y="197" width="0.2396%" height="15" fill="rgb(221,117,51)"/><text x="53.2959%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.24%)</title><rect x="53.0459%" y="181" width="0.2396%" height="15" fill="rgb(212,20,18)"/><text x="53.2959%" y="191.50"></text></g><g><title>std::memchr::memrchr (4 samples, 0.14%)</title><rect x="53.1485%" y="165" width="0.1369%" height="15" fill="rgb(245,133,36)"/><text x="53.3985%" y="175.50"></text></g><g><title>std::sys::unix::memchr::memrchr (4 samples, 0.14%)</title><rect x="53.1485%" y="149" width="0.1369%" height="15" fill="rgb(212,6,19)"/><text x="53.3985%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (4 samples, 0.14%)</title><rect x="53.1485%" y="133" width="0.1369%" height="15" fill="rgb(218,1,36)"/><text x="53.3985%" y="143.50"></text></g><g><title>std::io::Write::write_fmt (32 samples, 1.10%)</title><rect x="52.3272%" y="277" width="1.0951%" height="15" fill="rgb(246,84,54)"/><text x="52.5772%" y="287.50"></text></g><g><title>core::fmt::write (29 samples, 0.99%)</title><rect x="52.4298%" y="261" width="0.9925%" height="15" fill="rgb(242,110,6)"/><text x="52.6798%" y="271.50"></text></g><g><title>core::fmt::Write::write_char (14 samples, 0.48%)</title><rect x="52.9432%" y="245" width="0.4791%" height="15" fill="rgb(214,47,5)"/><text x="53.1932%" y="255.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (12 samples, 0.41%)</title><rect x="53.0116%" y="229" width="0.4107%" height="15" fill="rgb(218,159,25)"/><text x="53.2616%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (12 samples, 0.41%)</title><rect x="53.0116%" y="213" width="0.4107%" height="15" fill="rgb(215,211,28)"/><text x="53.2616%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.14%)</title><rect x="53.2854%" y="197" width="0.1369%" height="15" fill="rgb(238,59,32)"/><text x="53.5354%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.14%)</title><rect x="53.2854%" y="181" width="0.1369%" height="15" fill="rgb(226,82,3)"/><text x="53.5354%" y="191.50"></text></g><g><title>core::cell::BorrowRefMut::new (4 samples, 0.14%)</title><rect x="53.2854%" y="165" width="0.1369%" height="15" fill="rgb(240,164,32)"/><text x="53.5354%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.10%)</title><rect x="53.3196%" y="149" width="0.1027%" height="15" fill="rgb(232,46,7)"/><text x="53.5696%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.10%)</title><rect x="53.3196%" y="133" width="0.1027%" height="15" fill="rgb(229,129,53)"/><text x="53.5696%" y="143.50"></text></g><g><title>core::mem::replace (3 samples, 0.10%)</title><rect x="53.3196%" y="117" width="0.1027%" height="15" fill="rgb(234,188,29)"/><text x="53.5696%" y="127.50"></text></g><g><title>core::mem::swap (3 samples, 0.10%)</title><rect x="53.3196%" y="101" width="0.1027%" height="15" fill="rgb(246,141,4)"/><text x="53.5696%" y="111.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (3 samples, 0.10%)</title><rect x="53.3196%" y="85" width="0.1027%" height="15" fill="rgb(229,23,39)"/><text x="53.5696%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="53.3196%" y="69" width="0.1027%" height="15" fill="rgb(206,12,3)"/><text x="53.5696%" y="79.50"></text></g><g><title>__GI___pthread_mutex_lock (4 samples, 0.14%)</title><rect x="53.4223%" y="229" width="0.1369%" height="15" fill="rgb(252,226,20)"/><text x="53.6723%" y="239.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (50 samples, 1.71%)</title><rect x="51.9165%" y="309" width="1.7112%" height="15" fill="rgb(216,123,35)"/><text x="52.1665%" y="319.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (48 samples, 1.64%)</title><rect x="51.9849%" y="293" width="1.6427%" height="15" fill="rgb(212,68,40)"/><text x="52.2349%" y="303.50"></text></g><g><title>std::io::stdio::Stdout::lock (6 samples, 0.21%)</title><rect x="53.4223%" y="277" width="0.2053%" height="15" fill="rgb(254,125,32)"/><text x="53.6723%" y="287.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (6 samples, 0.21%)</title><rect x="53.4223%" y="261" width="0.2053%" height="15" fill="rgb(253,97,22)"/><text x="53.6723%" y="271.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (6 samples, 0.21%)</title><rect x="53.4223%" y="245" width="0.2053%" height="15" fill="rgb(241,101,14)"/><text x="53.6723%" y="255.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (54 samples, 1.85%)</title><rect x="51.8480%" y="325" width="1.8480%" height="15" fill="rgb(238,103,29)"/><text x="52.0980%" y="335.50">i..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (56 samples, 1.92%)</title><rect x="51.8138%" y="357" width="1.9165%" height="15" fill="rgb(233,195,47)"/><text x="52.0638%" y="367.50">i..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (55 samples, 1.88%)</title><rect x="51.8480%" y="341" width="1.8823%" height="15" fill="rgb(246,218,30)"/><text x="52.0980%" y="351.50">c..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (87 samples, 2.98%)</title><rect x="50.7871%" y="405" width="2.9774%" height="15" fill="rgb(219,145,47)"/><text x="51.0371%" y="415.50">iru..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char (61 samples, 2.09%)</title><rect x="51.6769%" y="389" width="2.0876%" height="15" fill="rgb(243,12,26)"/><text x="51.9269%" y="399.50">i..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (57 samples, 1.95%)</title><rect x="51.8138%" y="373" width="1.9507%" height="15" fill="rgb(214,87,16)"/><text x="52.0638%" y="383.50">i..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (16 samples, 0.55%)</title><rect x="54.2437%" y="389" width="0.5476%" height="15" fill="rgb(208,99,42)"/><text x="54.4937%" y="399.50"></text></g><g><title>&lt;crossterm::style::types::color::Color as core::cmp::PartialEq&gt;::ne (7 samples, 0.24%)</title><rect x="54.5517%" y="373" width="0.2396%" height="15" fill="rgb(253,99,2)"/><text x="54.8017%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.10%)</title><rect x="54.7912%" y="389" width="0.1027%" height="15" fill="rgb(220,168,23)"/><text x="55.0412%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (4 samples, 0.14%)</title><rect x="54.9624%" y="373" width="0.1369%" height="15" fill="rgb(242,38,24)"/><text x="55.2124%" y="383.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (8 samples, 0.27%)</title><rect x="55.4415%" y="245" width="0.2738%" height="15" fill="rgb(225,182,9)"/><text x="55.6915%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (15 samples, 0.51%)</title><rect x="55.3730%" y="309" width="0.5133%" height="15" fill="rgb(243,178,37)"/><text x="55.6230%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (15 samples, 0.51%)</title><rect x="55.3730%" y="293" width="0.5133%" height="15" fill="rgb(232,139,19)"/><text x="55.6230%" y="303.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.51%)</title><rect x="55.3730%" y="277" width="0.5133%" height="15" fill="rgb(225,201,24)"/><text x="55.6230%" y="287.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (15 samples, 0.51%)</title><rect x="55.3730%" y="261" width="0.5133%" height="15" fill="rgb(221,47,46)"/><text x="55.6230%" y="271.50"></text></g><g><title>pthread_mutex_unlock (5 samples, 0.17%)</title><rect x="55.7153%" y="245" width="0.1711%" height="15" fill="rgb(249,23,13)"/><text x="55.9653%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.10%)</title><rect x="56.5366%" y="149" width="0.1027%" height="15" fill="rgb(219,9,5)"/><text x="56.7866%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="56.5366%" y="133" width="0.1027%" height="15" fill="rgb(254,171,16)"/><text x="56.7866%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.10%)</title><rect x="56.5366%" y="117" width="0.1027%" height="15" fill="rgb(230,171,20)"/><text x="56.7866%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (3 samples, 0.10%)</title><rect x="56.5366%" y="101" width="0.1027%" height="15" fill="rgb(210,71,41)"/><text x="56.7866%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.10%)</title><rect x="56.5366%" y="85" width="0.1027%" height="15" fill="rgb(206,173,20)"/><text x="56.7866%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="56.6393%" y="149" width="0.1027%" height="15" fill="rgb(233,88,34)"/><text x="56.8893%" y="159.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (3 samples, 0.10%)</title><rect x="56.6393%" y="133" width="0.1027%" height="15" fill="rgb(223,209,46)"/><text x="56.8893%" y="143.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (10 samples, 0.34%)</title><rect x="56.4339%" y="213" width="0.3422%" height="15" fill="rgb(250,43,18)"/><text x="56.6839%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.27%)</title><rect x="56.5024%" y="197" width="0.2738%" height="15" fill="rgb(208,13,10)"/><text x="56.7524%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.27%)</title><rect x="56.5024%" y="181" width="0.2738%" height="15" fill="rgb(212,200,36)"/><text x="56.7524%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.27%)</title><rect x="56.5024%" y="165" width="0.2738%" height="15" fill="rgb(225,90,30)"/><text x="56.7524%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3 samples, 0.10%)</title><rect x="56.7762%" y="197" width="0.1027%" height="15" fill="rgb(236,182,39)"/><text x="57.0262%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (15 samples, 0.51%)</title><rect x="56.4339%" y="245" width="0.5133%" height="15" fill="rgb(212,144,35)"/><text x="56.6839%" y="255.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (15 samples, 0.51%)</title><rect x="56.4339%" y="229" width="0.5133%" height="15" fill="rgb(228,63,44)"/><text x="56.6839%" y="239.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (5 samples, 0.17%)</title><rect x="56.7762%" y="213" width="0.1711%" height="15" fill="rgb(228,109,6)"/><text x="57.0262%" y="223.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (21 samples, 0.72%)</title><rect x="56.3313%" y="277" width="0.7187%" height="15" fill="rgb(238,117,24)"/><text x="56.5813%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (18 samples, 0.62%)</title><rect x="56.4339%" y="261" width="0.6160%" height="15" fill="rgb(242,26,26)"/><text x="56.6839%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (3 samples, 0.10%)</title><rect x="56.9473%" y="245" width="0.1027%" height="15" fill="rgb(221,92,48)"/><text x="57.1973%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.10%)</title><rect x="56.9473%" y="229" width="0.1027%" height="15" fill="rgb(209,209,32)"/><text x="57.1973%" y="239.50"></text></g><g><title>core::cell::BorrowRefMut::new (3 samples, 0.10%)</title><rect x="56.9473%" y="213" width="0.1027%" height="15" fill="rgb(221,70,22)"/><text x="57.1973%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (3 samples, 0.10%)</title><rect x="57.0500%" y="277" width="0.1027%" height="15" fill="rgb(248,145,5)"/><text x="57.3000%" y="287.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (3 samples, 0.10%)</title><rect x="57.0500%" y="261" width="0.1027%" height="15" fill="rgb(226,116,26)"/><text x="57.3000%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (3 samples, 0.10%)</title><rect x="57.0500%" y="245" width="0.1027%" height="15" fill="rgb(244,5,17)"/><text x="57.3000%" y="255.50"></text></g><g><title>core::cmp::min (3 samples, 0.10%)</title><rect x="57.0500%" y="229" width="0.1027%" height="15" fill="rgb(252,159,33)"/><text x="57.3000%" y="239.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.10%)</title><rect x="57.0500%" y="213" width="0.1027%" height="15" fill="rgb(206,71,0)"/><text x="57.3000%" y="223.50"></text></g><g><title>core::fmt::Arguments::new_v1 (4 samples, 0.14%)</title><rect x="57.2553%" y="245" width="0.1369%" height="15" fill="rgb(233,118,54)"/><text x="57.5053%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.24%)</title><rect x="58.1451%" y="213" width="0.2396%" height="15" fill="rgb(234,83,48)"/><text x="58.3951%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (7 samples, 0.24%)</title><rect x="58.1451%" y="197" width="0.2396%" height="15" fill="rgb(228,3,54)"/><text x="58.3951%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.10%)</title><rect x="58.8638%" y="85" width="0.1027%" height="15" fill="rgb(226,155,13)"/><text x="59.1138%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="58.8638%" y="69" width="0.1027%" height="15" fill="rgb(241,28,37)"/><text x="59.1138%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.10%)</title><rect x="58.8638%" y="53" width="0.1027%" height="15" fill="rgb(233,93,10)"/><text x="59.1138%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (3 samples, 0.10%)</title><rect x="58.8638%" y="37" width="0.1027%" height="15" fill="rgb(225,113,19)"/><text x="59.1138%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.44%)</title><rect x="58.9665%" y="85" width="0.4449%" height="15" fill="rgb(241,2,18)"/><text x="59.2165%" y="95.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (13 samples, 0.44%)</title><rect x="58.9665%" y="69" width="0.4449%" height="15" fill="rgb(228,207,21)"/><text x="59.2165%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (20 samples, 0.68%)</title><rect x="58.7611%" y="133" width="0.6845%" height="15" fill="rgb(213,211,35)"/><text x="59.0111%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (20 samples, 0.68%)</title><rect x="58.7611%" y="117" width="0.6845%" height="15" fill="rgb(209,83,10)"/><text x="59.0111%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (20 samples, 0.68%)</title><rect x="58.7611%" y="101" width="0.6845%" height="15" fill="rgb(209,164,1)"/><text x="59.0111%" y="111.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (67 samples, 2.29%)</title><rect x="58.6927%" y="149" width="2.2930%" height="15" fill="rgb(213,184,43)"/><text x="58.9427%" y="159.50">&lt;..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (45 samples, 1.54%)</title><rect x="59.4456%" y="133" width="1.5400%" height="15" fill="rgb(231,61,34)"/><text x="59.6956%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (45 samples, 1.54%)</title><rect x="59.4456%" y="117" width="1.5400%" height="15" fill="rgb(235,75,3)"/><text x="59.6956%" y="127.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (45 samples, 1.54%)</title><rect x="59.4456%" y="101" width="1.5400%" height="15" fill="rgb(220,106,47)"/><text x="59.6956%" y="111.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (45 samples, 1.54%)</title><rect x="59.4456%" y="85" width="1.5400%" height="15" fill="rgb(210,196,33)"/><text x="59.6956%" y="95.50"></text></g><g><title>__GI___libc_write (45 samples, 1.54%)</title><rect x="59.4456%" y="69" width="1.5400%" height="15" fill="rgb(229,154,42)"/><text x="59.6956%" y="79.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (3 samples, 0.10%)</title><rect x="60.9856%" y="149" width="0.1027%" height="15" fill="rgb(228,114,26)"/><text x="61.2356%" y="159.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (3 samples, 0.10%)</title><rect x="60.9856%" y="133" width="0.1027%" height="15" fill="rgb(208,144,1)"/><text x="61.2356%" y="143.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (3 samples, 0.10%)</title><rect x="60.9856%" y="117" width="0.1027%" height="15" fill="rgb(239,112,37)"/><text x="61.2356%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.10%)</title><rect x="60.9856%" y="101" width="0.1027%" height="15" fill="rgb(210,96,50)"/><text x="61.2356%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (3 samples, 0.10%)</title><rect x="60.9856%" y="85" width="0.1027%" height="15" fill="rgb(222,178,2)"/><text x="61.2356%" y="95.50"></text></g><g><title>__memrchr_sse2 (24 samples, 0.82%)</title><rect x="61.1567%" y="101" width="0.8214%" height="15" fill="rgb(226,74,18)"/><text x="61.4067%" y="111.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (101 samples, 3.46%)</title><rect x="58.5900%" y="181" width="3.4565%" height="15" fill="rgb(225,67,54)"/><text x="58.8400%" y="191.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (101 samples, 3.46%)</title><rect x="58.5900%" y="165" width="3.4565%" height="15" fill="rgb(251,92,32)"/><text x="58.8400%" y="175.50">&lt;st..</text></g><g><title>std::memchr::memrchr (28 samples, 0.96%)</title><rect x="61.0883%" y="149" width="0.9582%" height="15" fill="rgb(228,149,22)"/><text x="61.3383%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr (28 samples, 0.96%)</title><rect x="61.0883%" y="133" width="0.9582%" height="15" fill="rgb(243,54,13)"/><text x="61.3383%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (28 samples, 0.96%)</title><rect x="61.0883%" y="117" width="0.9582%" height="15" fill="rgb(243,180,28)"/><text x="61.3383%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (109 samples, 3.73%)</title><rect x="58.3847%" y="213" width="3.7303%" height="15" fill="rgb(208,167,24)"/><text x="58.6347%" y="223.50">&lt;std..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (105 samples, 3.59%)</title><rect x="58.5216%" y="197" width="3.5934%" height="15" fill="rgb(245,73,45)"/><text x="58.7716%" y="207.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.17%)</title><rect x="62.3888%" y="133" width="0.1711%" height="15" fill="rgb(237,203,48)"/><text x="62.6388%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (4 samples, 0.14%)</title><rect x="62.4230%" y="117" width="0.1369%" height="15" fill="rgb(211,197,16)"/><text x="62.6730%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.14%)</title><rect x="62.4230%" y="101" width="0.1369%" height="15" fill="rgb(243,99,51)"/><text x="62.6730%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (4 samples, 0.14%)</title><rect x="62.4230%" y="85" width="0.1369%" height="15" fill="rgb(215,123,29)"/><text x="62.6730%" y="95.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (16 samples, 0.55%)</title><rect x="62.3546%" y="165" width="0.5476%" height="15" fill="rgb(239,186,37)"/><text x="62.6046%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (16 samples, 0.55%)</title><rect x="62.3546%" y="149" width="0.5476%" height="15" fill="rgb(252,136,39)"/><text x="62.6046%" y="159.50"></text></g><g><title>std::memchr::memrchr (9 samples, 0.31%)</title><rect x="62.5941%" y="133" width="0.3080%" height="15" fill="rgb(223,213,32)"/><text x="62.8441%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr (9 samples, 0.31%)</title><rect x="62.5941%" y="117" width="0.3080%" height="15" fill="rgb(233,115,5)"/><text x="62.8441%" y="127.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (9 samples, 0.31%)</title><rect x="62.5941%" y="101" width="0.3080%" height="15" fill="rgb(207,226,44)"/><text x="62.8441%" y="111.50"></text></g><g><title>__memrchr_sse2 (4 samples, 0.14%)</title><rect x="62.7652%" y="85" width="0.1369%" height="15" fill="rgb(208,126,0)"/><text x="63.0152%" y="95.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (21 samples, 0.72%)</title><rect x="62.2519%" y="197" width="0.7187%" height="15" fill="rgb(244,66,21)"/><text x="62.5019%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (19 samples, 0.65%)</title><rect x="62.3203%" y="181" width="0.6502%" height="15" fill="rgb(222,97,12)"/><text x="62.5703%" y="191.50"></text></g><g><title>core::fmt::write (205 samples, 7.02%)</title><rect x="56.0233%" y="293" width="7.0157%" height="15" fill="rgb(219,213,19)"/><text x="56.2733%" y="303.50">core::fmt..</text></g><g><title>crossterm::style::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::style::SetForegroundColor&gt;&gt;::fmt (171 samples, 5.85%)</title><rect x="57.1869%" y="277" width="5.8522%" height="15" fill="rgb(252,169,30)"/><text x="57.4369%" y="287.50">crosste..</text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (170 samples, 5.82%)</title><rect x="57.2211%" y="261" width="5.8179%" height="15" fill="rgb(206,32,51)"/><text x="57.4711%" y="271.50">crosste..</text></g><g><title>core::fmt::Formatter::write_fmt (165 samples, 5.65%)</title><rect x="57.3922%" y="245" width="5.6468%" height="15" fill="rgb(250,172,42)"/><text x="57.6422%" y="255.50">core::f..</text></g><g><title>core::fmt::write (162 samples, 5.54%)</title><rect x="57.4949%" y="229" width="5.5441%" height="15" fill="rgb(209,34,43)"/><text x="57.7449%" y="239.50">core::f..</text></g><g><title>crossterm::style::ansi::&lt;impl core::fmt::Display for crossterm::style::types::colored::Colored&gt;::fmt (23 samples, 0.79%)</title><rect x="62.2519%" y="213" width="0.7871%" height="15" fill="rgb(223,11,35)"/><text x="62.5019%" y="223.50"></text></g><g><title>std::io::Write::write_fmt (210 samples, 7.19%)</title><rect x="55.8864%" y="309" width="7.1869%" height="15" fill="rgb(251,219,26)"/><text x="56.1364%" y="319.50">std::io::W..</text></g><g><title>__GI___pthread_mutex_lock (6 samples, 0.21%)</title><rect x="63.0732%" y="261" width="0.2053%" height="15" fill="rgb(231,119,3)"/><text x="63.3232%" y="271.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (241 samples, 8.25%)</title><rect x="55.0992%" y="341" width="8.2478%" height="15" fill="rgb(216,97,11)"/><text x="55.3492%" y="351.50">&lt;std::io::s..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (237 samples, 8.11%)</title><rect x="55.2361%" y="325" width="8.1109%" height="15" fill="rgb(223,59,9)"/><text x="55.4861%" y="335.50">&lt;&amp;std::io::..</text></g><g><title>std::io::stdio::Stdout::lock (8 samples, 0.27%)</title><rect x="63.0732%" y="309" width="0.2738%" height="15" fill="rgb(233,93,31)"/><text x="63.3232%" y="319.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (8 samples, 0.27%)</title><rect x="63.0732%" y="293" width="0.2738%" height="15" fill="rgb(239,81,33)"/><text x="63.3232%" y="303.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (8 samples, 0.27%)</title><rect x="63.0732%" y="277" width="0.2738%" height="15" fill="rgb(213,120,34)"/><text x="63.3232%" y="287.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (249 samples, 8.52%)</title><rect x="54.8939%" y="389" width="8.5216%" height="15" fill="rgb(243,49,53)"/><text x="55.1439%" y="399.50">irust::irust..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (243 samples, 8.32%)</title><rect x="55.0992%" y="373" width="8.3162%" height="15" fill="rgb(247,216,33)"/><text x="55.3492%" y="383.50">core::result..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg::{{closure}} (243 samples, 8.32%)</title><rect x="55.0992%" y="357" width="8.3162%" height="15" fill="rgb(226,26,14)"/><text x="55.3492%" y="367.50">irust::irust..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (13 samples, 0.44%)</title><rect x="64.1684%" y="373" width="0.4449%" height="15" fill="rgb(215,49,53)"/><text x="64.4184%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (6 samples, 0.21%)</title><rect x="64.7502%" y="341" width="0.2053%" height="15" fill="rgb(245,162,40)"/><text x="65.0002%" y="351.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 0.14%)</title><rect x="65.8453%" y="277" width="0.1369%" height="15" fill="rgb(229,68,17)"/><text x="66.0953%" y="287.50"></text></g><g><title>__GI___pthread_mutex_unlock (4 samples, 0.14%)</title><rect x="65.9822%" y="213" width="0.1369%" height="15" fill="rgb(213,182,10)"/><text x="66.2322%" y="223.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (31 samples, 1.06%)</title><rect x="66.1191%" y="213" width="1.0609%" height="15" fill="rgb(245,125,30)"/><text x="66.3691%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 1.37%)</title><rect x="65.9822%" y="277" width="1.3689%" height="15" fill="rgb(232,202,2)"/><text x="66.2322%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 1.37%)</title><rect x="65.9822%" y="261" width="1.3689%" height="15" fill="rgb(237,140,51)"/><text x="66.2322%" y="271.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 1.37%)</title><rect x="65.9822%" y="245" width="1.3689%" height="15" fill="rgb(236,157,25)"/><text x="66.2322%" y="255.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (40 samples, 1.37%)</title><rect x="65.9822%" y="229" width="1.3689%" height="15" fill="rgb(219,209,0)"/><text x="66.2322%" y="239.50"></text></g><g><title>pthread_mutex_unlock (5 samples, 0.17%)</title><rect x="67.1800%" y="213" width="0.1711%" height="15" fill="rgb(240,116,54)"/><text x="67.4300%" y="223.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.10%)</title><rect x="67.6249%" y="261" width="0.1027%" height="15" fill="rgb(216,10,36)"/><text x="67.8749%" y="271.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (8 samples, 0.27%)</title><rect x="68.4463%" y="245" width="0.2738%" height="15" fill="rgb(222,72,44)"/><text x="68.6963%" y="255.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (3 samples, 0.10%)</title><rect x="68.6174%" y="229" width="0.1027%" height="15" fill="rgb(232,159,9)"/><text x="68.8674%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="68.7201%" y="245" width="0.1027%" height="15" fill="rgb(210,39,32)"/><text x="68.9701%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (3 samples, 0.10%)</title><rect x="68.7201%" y="229" width="0.1027%" height="15" fill="rgb(216,194,45)"/><text x="68.9701%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::capacity (5 samples, 0.17%)</title><rect x="69.4387%" y="165" width="0.1711%" height="15" fill="rgb(218,18,35)"/><text x="69.6887%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (6 samples, 0.21%)</title><rect x="69.6099%" y="117" width="0.2053%" height="15" fill="rgb(207,83,51)"/><text x="69.8599%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.21%)</title><rect x="69.6099%" y="101" width="0.2053%" height="15" fill="rgb(225,63,43)"/><text x="69.8599%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (6 samples, 0.21%)</title><rect x="69.6099%" y="85" width="0.2053%" height="15" fill="rgb(207,57,36)"/><text x="69.8599%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (6 samples, 0.21%)</title><rect x="69.6099%" y="69" width="0.2053%" height="15" fill="rgb(216,99,33)"/><text x="69.8599%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (6 samples, 0.21%)</title><rect x="69.6099%" y="53" width="0.2053%" height="15" fill="rgb(225,42,16)"/><text x="69.8599%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.55%)</title><rect x="69.8152%" y="117" width="0.5476%" height="15" fill="rgb(220,201,45)"/><text x="70.0652%" y="127.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (14 samples, 0.48%)</title><rect x="69.8836%" y="101" width="0.4791%" height="15" fill="rgb(225,33,4)"/><text x="70.1336%" y="111.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (45 samples, 1.54%)</title><rect x="69.0623%" y="181" width="1.5400%" height="15" fill="rgb(224,33,50)"/><text x="69.3123%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (29 samples, 0.99%)</title><rect x="69.6099%" y="165" width="0.9925%" height="15" fill="rgb(246,198,51)"/><text x="69.8599%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (29 samples, 0.99%)</title><rect x="69.6099%" y="149" width="0.9925%" height="15" fill="rgb(205,22,4)"/><text x="69.8599%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (29 samples, 0.99%)</title><rect x="69.6099%" y="133" width="0.9925%" height="15" fill="rgb(206,3,8)"/><text x="69.8599%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.24%)</title><rect x="70.3628%" y="117" width="0.2396%" height="15" fill="rgb(251,23,15)"/><text x="70.6128%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (7 samples, 0.24%)</title><rect x="70.3628%" y="101" width="0.2396%" height="15" fill="rgb(252,88,28)"/><text x="70.6128%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3 samples, 0.10%)</title><rect x="70.6366%" y="165" width="0.1027%" height="15" fill="rgb(212,127,14)"/><text x="70.8866%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (53 samples, 1.81%)</title><rect x="69.0623%" y="213" width="1.8138%" height="15" fill="rgb(247,145,37)"/><text x="69.3123%" y="223.50">&lt;..</text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (53 samples, 1.81%)</title><rect x="69.0623%" y="197" width="1.8138%" height="15" fill="rgb(209,117,53)"/><text x="69.3123%" y="207.50">&lt;..</text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (8 samples, 0.27%)</title><rect x="70.6023%" y="181" width="0.2738%" height="15" fill="rgb(212,90,42)"/><text x="70.8523%" y="191.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (4 samples, 0.14%)</title><rect x="70.7392%" y="165" width="0.1369%" height="15" fill="rgb(218,164,37)"/><text x="70.9892%" y="175.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (4 samples, 0.14%)</title><rect x="70.7392%" y="149" width="0.1369%" height="15" fill="rgb(246,65,34)"/><text x="70.9892%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.14%)</title><rect x="70.7392%" y="133" width="0.1369%" height="15" fill="rgb(231,100,33)"/><text x="70.9892%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (4 samples, 0.14%)</title><rect x="70.7392%" y="117" width="0.1369%" height="15" fill="rgb(228,126,14)"/><text x="70.9892%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (63 samples, 2.16%)</title><rect x="68.8227%" y="245" width="2.1561%" height="15" fill="rgb(215,173,21)"/><text x="69.0727%" y="255.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (59 samples, 2.02%)</title><rect x="68.9596%" y="229" width="2.0192%" height="15" fill="rgb(210,6,40)"/><text x="69.2096%" y="239.50">&lt;..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (3 samples, 0.10%)</title><rect x="70.8761%" y="213" width="0.1027%" height="15" fill="rgb(212,48,18)"/><text x="71.1261%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.10%)</title><rect x="70.8761%" y="197" width="0.1027%" height="15" fill="rgb(230,214,11)"/><text x="71.1261%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (3 samples, 0.10%)</title><rect x="70.8761%" y="181" width="0.1027%" height="15" fill="rgb(254,105,39)"/><text x="71.1261%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.10%)</title><rect x="71.6632%" y="101" width="0.1027%" height="15" fill="rgb(245,158,5)"/><text x="71.9132%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (14 samples, 0.48%)</title><rect x="71.6632%" y="149" width="0.4791%" height="15" fill="rgb(249,208,11)"/><text x="71.9132%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.48%)</title><rect x="71.6632%" y="133" width="0.4791%" height="15" fill="rgb(210,39,28)"/><text x="71.9132%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (14 samples, 0.48%)</title><rect x="71.6632%" y="117" width="0.4791%" height="15" fill="rgb(211,56,53)"/><text x="71.9132%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.38%)</title><rect x="71.7659%" y="101" width="0.3765%" height="15" fill="rgb(226,201,30)"/><text x="72.0159%" y="111.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (8 samples, 0.27%)</title><rect x="71.8686%" y="85" width="0.2738%" height="15" fill="rgb(239,101,34)"/><text x="72.1186%" y="95.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (34 samples, 1.16%)</title><rect x="71.3552%" y="165" width="1.1636%" height="15" fill="rgb(226,209,5)"/><text x="71.6052%" y="175.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (11 samples, 0.38%)</title><rect x="72.1424%" y="149" width="0.3765%" height="15" fill="rgb(250,105,47)"/><text x="72.3924%" y="159.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (11 samples, 0.38%)</title><rect x="72.1424%" y="133" width="0.3765%" height="15" fill="rgb(230,72,3)"/><text x="72.3924%" y="143.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (11 samples, 0.38%)</title><rect x="72.1424%" y="117" width="0.3765%" height="15" fill="rgb(232,218,39)"/><text x="72.3924%" y="127.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (11 samples, 0.38%)</title><rect x="72.1424%" y="101" width="0.3765%" height="15" fill="rgb(248,166,6)"/><text x="72.3924%" y="111.50"></text></g><g><title>__GI___libc_write (11 samples, 0.38%)</title><rect x="72.1424%" y="85" width="0.3765%" height="15" fill="rgb(247,89,20)"/><text x="72.3924%" y="95.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (5 samples, 0.17%)</title><rect x="72.5188%" y="165" width="0.1711%" height="15" fill="rgb(248,130,54)"/><text x="72.7688%" y="175.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (4 samples, 0.14%)</title><rect x="72.5530%" y="149" width="0.1369%" height="15" fill="rgb(234,196,4)"/><text x="72.8030%" y="159.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (4 samples, 0.14%)</title><rect x="72.5530%" y="133" width="0.1369%" height="15" fill="rgb(250,143,31)"/><text x="72.8030%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.14%)</title><rect x="72.5530%" y="117" width="0.1369%" height="15" fill="rgb(211,110,34)"/><text x="72.8030%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (4 samples, 0.14%)</title><rect x="72.5530%" y="101" width="0.1369%" height="15" fill="rgb(215,124,48)"/><text x="72.8030%" y="111.50"></text></g><g><title>__memrchr_sse2 (28 samples, 0.96%)</title><rect x="72.7926%" y="117" width="0.9582%" height="15" fill="rgb(216,46,13)"/><text x="73.0426%" y="127.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (73 samples, 2.50%)</title><rect x="71.3210%" y="197" width="2.4983%" height="15" fill="rgb(205,184,25)"/><text x="71.5710%" y="207.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (73 samples, 2.50%)</title><rect x="71.3210%" y="181" width="2.4983%" height="15" fill="rgb(228,1,10)"/><text x="71.5710%" y="191.50">&lt;s..</text></g><g><title>std::memchr::memrchr (33 samples, 1.13%)</title><rect x="72.6899%" y="165" width="1.1294%" height="15" fill="rgb(213,116,27)"/><text x="72.9399%" y="175.50"></text></g><g><title>std::sys::unix::memchr::memrchr (33 samples, 1.13%)</title><rect x="72.6899%" y="149" width="1.1294%" height="15" fill="rgb(241,95,50)"/><text x="72.9399%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (33 samples, 1.13%)</title><rect x="72.6899%" y="133" width="1.1294%" height="15" fill="rgb(238,48,32)"/><text x="72.9399%" y="143.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (5 samples, 0.17%)</title><rect x="73.8193%" y="197" width="0.1711%" height="15" fill="rgb(235,113,49)"/><text x="74.0693%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (5 samples, 0.17%)</title><rect x="73.8193%" y="181" width="0.1711%" height="15" fill="rgb(205,127,43)"/><text x="74.0693%" y="191.50"></text></g><g><title>core::cell::BorrowRefMut::new (5 samples, 0.17%)</title><rect x="73.8193%" y="165" width="0.1711%" height="15" fill="rgb(250,162,2)"/><text x="74.0693%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.10%)</title><rect x="73.8877%" y="149" width="0.1027%" height="15" fill="rgb(220,13,41)"/><text x="74.1377%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.10%)</title><rect x="73.8877%" y="133" width="0.1027%" height="15" fill="rgb(249,221,25)"/><text x="74.1377%" y="143.50"></text></g><g><title>core::mem::replace (3 samples, 0.10%)</title><rect x="73.8877%" y="117" width="0.1027%" height="15" fill="rgb(215,208,19)"/><text x="74.1377%" y="127.50"></text></g><g><title>core::mem::swap (3 samples, 0.10%)</title><rect x="73.8877%" y="101" width="0.1027%" height="15" fill="rgb(236,175,2)"/><text x="74.1377%" y="111.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (3 samples, 0.10%)</title><rect x="73.8877%" y="85" width="0.1027%" height="15" fill="rgb(241,52,2)"/><text x="74.1377%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="73.8877%" y="69" width="0.1027%" height="15" fill="rgb(248,140,14)"/><text x="74.1377%" y="79.50"></text></g><g><title>core::fmt::Write::write_char (89 samples, 3.05%)</title><rect x="70.9788%" y="245" width="3.0459%" height="15" fill="rgb(253,22,42)"/><text x="71.2288%" y="255.50">cor..</text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (86 samples, 2.94%)</title><rect x="71.0815%" y="229" width="2.9432%" height="15" fill="rgb(234,61,47)"/><text x="71.3315%" y="239.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (82 samples, 2.81%)</title><rect x="71.2183%" y="213" width="2.8063%" height="15" fill="rgb(208,226,15)"/><text x="71.4683%" y="223.50">&lt;s..</text></g><g><title>core::fmt::write (189 samples, 6.47%)</title><rect x="67.7276%" y="261" width="6.4682%" height="15" fill="rgb(217,221,4)"/><text x="67.9776%" y="271.50">core::fm..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.10%)</title><rect x="74.0931%" y="245" width="0.1027%" height="15" fill="rgb(212,174,34)"/><text x="74.3431%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.10%)</title><rect x="74.0931%" y="229" width="0.1027%" height="15" fill="rgb(253,83,4)"/><text x="74.3431%" y="239.50"></text></g><g><title>std::io::Write::write_fmt (202 samples, 6.91%)</title><rect x="67.3511%" y="277" width="6.9131%" height="15" fill="rgb(250,195,49)"/><text x="67.6011%" y="287.50">std::io::..</text></g><g><title>__GI___pthread_mutex_lock (36 samples, 1.23%)</title><rect x="74.2642%" y="229" width="1.2320%" height="15" fill="rgb(241,192,25)"/><text x="74.5142%" y="239.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (312 samples, 10.68%)</title><rect x="65.1608%" y="309" width="10.6776%" height="15" fill="rgb(208,124,10)"/><text x="65.4108%" y="319.50">&lt;std::io::stdio:..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (303 samples, 10.37%)</title><rect x="65.4689%" y="293" width="10.3696%" height="15" fill="rgb(222,33,0)"/><text x="65.7189%" y="303.50">&lt;&amp;std::io::stdi..</text></g><g><title>std::io::stdio::Stdout::lock (46 samples, 1.57%)</title><rect x="74.2642%" y="277" width="1.5743%" height="15" fill="rgb(234,209,28)"/><text x="74.5142%" y="287.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (46 samples, 1.57%)</title><rect x="74.2642%" y="261" width="1.5743%" height="15" fill="rgb(224,11,23)"/><text x="74.5142%" y="271.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (46 samples, 1.57%)</title><rect x="74.2642%" y="245" width="1.5743%" height="15" fill="rgb(232,99,1)"/><text x="74.5142%" y="255.50"></text></g><g><title>pthread_mutex_lock (10 samples, 0.34%)</title><rect x="75.4962%" y="229" width="0.3422%" height="15" fill="rgb(237,95,45)"/><text x="75.7462%" y="239.50"></text></g><g><title>core::fmt::Arguments::new_v1 (5 samples, 0.17%)</title><rect x="75.8385%" y="309" width="0.1711%" height="15" fill="rgb(208,109,11)"/><text x="76.0885%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5 samples, 0.17%)</title><rect x="76.0096%" y="309" width="0.1711%" height="15" fill="rgb(216,190,48)"/><text x="76.2596%" y="319.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (331 samples, 11.33%)</title><rect x="64.9555%" y="325" width="11.3279%" height="15" fill="rgb(251,171,36)"/><text x="65.2055%" y="335.50">irust::irust::raw..</text></g><g><title>std::io::stdio::stdout (3 samples, 0.10%)</title><rect x="76.1807%" y="309" width="0.1027%" height="15" fill="rgb(230,62,22)"/><text x="76.4307%" y="319.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (339 samples, 11.60%)</title><rect x="64.7159%" y="357" width="11.6016%" height="15" fill="rgb(225,114,35)"/><text x="64.9659%" y="367.50">irust::irust::raw..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (332 samples, 11.36%)</title><rect x="64.9555%" y="341" width="11.3621%" height="15" fill="rgb(215,118,42)"/><text x="65.2055%" y="351.50">core::result::Res..</text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner (928 samples, 31.76%)</title><rect x="44.6270%" y="421" width="31.7591%" height="15" fill="rgb(243,119,21)"/><text x="44.8770%" y="431.50">irust::irust::printer::&lt;impl irust::irust::IRust&gt;::..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char_with_color (661 samples, 22.62%)</title><rect x="53.7645%" y="405" width="22.6215%" height="15" fill="rgb(252,177,53)"/><text x="54.0145%" y="415.50">irust::irust::writer::&lt;impl irust::i..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char (379 samples, 12.97%)</title><rect x="63.4155%" y="389" width="12.9706%" height="15" fill="rgb(237,209,29)"/><text x="63.6655%" y="399.50">irust::irust::write..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (344 samples, 11.77%)</title><rect x="64.6133%" y="373" width="11.7728%" height="15" fill="rgb(212,65,23)"/><text x="64.8633%" y="383.50">irust::irust::raw..</text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (3 samples, 0.10%)</title><rect x="76.7967%" y="245" width="0.1027%" height="15" fill="rgb(230,222,46)"/><text x="77.0467%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (3 samples, 0.10%)</title><rect x="76.7967%" y="229" width="0.1027%" height="15" fill="rgb(215,135,32)"/><text x="77.0467%" y="239.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (3 samples, 0.10%)</title><rect x="76.7967%" y="213" width="0.1027%" height="15" fill="rgb(246,101,22)"/><text x="77.0467%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (3 samples, 0.10%)</title><rect x="76.7967%" y="197" width="0.1027%" height="15" fill="rgb(206,107,13)"/><text x="77.0467%" y="207.50"></text></g><g><title>irust::irust::buffer::Buffer::buffer_pos_to_relative_cursor_pos::{{closure}} (3 samples, 0.10%)</title><rect x="76.7967%" y="181" width="0.1027%" height="15" fill="rgb(250,100,44)"/><text x="77.0467%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (6 samples, 0.21%)</title><rect x="76.7625%" y="357" width="0.2053%" height="15" fill="rgb(231,147,38)"/><text x="77.0125%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (6 samples, 0.21%)</title><rect x="76.7625%" y="341" width="0.2053%" height="15" fill="rgb(229,8,40)"/><text x="77.0125%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (6 samples, 0.21%)</title><rect x="76.7625%" y="325" width="0.2053%" height="15" fill="rgb(221,135,30)"/><text x="77.0125%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.21%)</title><rect x="76.7625%" y="309" width="0.2053%" height="15" fill="rgb(249,193,18)"/><text x="77.0125%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.17%)</title><rect x="76.7967%" y="293" width="0.1711%" height="15" fill="rgb(209,133,39)"/><text x="77.0467%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.17%)</title><rect x="76.7967%" y="277" width="0.1711%" height="15" fill="rgb(232,100,14)"/><text x="77.0467%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5 samples, 0.17%)</title><rect x="76.7967%" y="261" width="0.1711%" height="15" fill="rgb(224,185,1)"/><text x="77.0467%" y="271.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::scroll_if_needed_for_input (19 samples, 0.65%)</title><rect x="76.3860%" y="421" width="0.6502%" height="15" fill="rgb(223,139,8)"/><text x="76.6360%" y="431.50"></text></g><g><title>irust::irust::cursor::Cursor::input_last_pos (19 samples, 0.65%)</title><rect x="76.3860%" y="405" width="0.6502%" height="15" fill="rgb(232,213,38)"/><text x="76.6360%" y="415.50"></text></g><g><title>irust::irust::buffer::Buffer::last_buffer_pos_to_relative_cursor_pos (18 samples, 0.62%)</title><rect x="76.4203%" y="389" width="0.6160%" height="15" fill="rgb(207,94,22)"/><text x="76.6703%" y="399.50"></text></g><g><title>irust::irust::buffer::Buffer::buffer_pos_to_relative_cursor_pos (18 samples, 0.62%)</title><rect x="76.4203%" y="373" width="0.6160%" height="15" fill="rgb(219,183,54)"/><text x="76.6703%" y="383.50"></text></g><g><title>irust::irust::cursor::Cursor::goto (3 samples, 0.10%)</title><rect x="77.1047%" y="405" width="0.1027%" height="15" fill="rgb(216,185,54)"/><text x="77.3547%" y="415.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_internal_pos (3 samples, 0.10%)</title><rect x="77.1047%" y="389" width="0.1027%" height="15" fill="rgb(254,217,39)"/><text x="77.3547%" y="399.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (3 samples, 0.10%)</title><rect x="77.1047%" y="373" width="0.1027%" height="15" fill="rgb(240,178,23)"/><text x="77.3547%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.10%)</title><rect x="77.1047%" y="357" width="0.1027%" height="15" fill="rgb(218,11,47)"/><text x="77.3547%" y="367.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto::{{closure}} (3 samples, 0.10%)</title><rect x="77.1047%" y="341" width="0.1027%" height="15" fill="rgb(218,51,51)"/><text x="77.3547%" y="351.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.10%)</title><rect x="77.1047%" y="325" width="0.1027%" height="15" fill="rgb(238,126,27)"/><text x="77.3547%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.10%)</title><rect x="77.1047%" y="309" width="0.1027%" height="15" fill="rgb(249,202,22)"/><text x="77.3547%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.10%)</title><rect x="77.1047%" y="293" width="0.1027%" height="15" fill="rgb(254,195,49)"/><text x="77.3547%" y="303.50"></text></g><g><title>core::fmt::write (3 samples, 0.10%)</title><rect x="77.1047%" y="277" width="0.1027%" height="15" fill="rgb(208,123,14)"/><text x="77.3547%" y="287.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_character (1,405 samples, 48.08%)</title><rect x="29.2608%" y="453" width="48.0835%" height="15" fill="rgb(224,200,8)"/><text x="29.5108%" y="463.50">irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_character</text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input (1,384 samples, 47.36%)</title><rect x="29.9795%" y="437" width="47.3648%" height="15" fill="rgb(217,61,36)"/><text x="30.2295%" y="447.50">irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_from_terminal_start (7 samples, 0.24%)</title><rect x="77.1047%" y="421" width="0.2396%" height="15" fill="rgb(206,35,45)"/><text x="77.3547%" y="431.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (4 samples, 0.14%)</title><rect x="77.2074%" y="405" width="0.1369%" height="15" fill="rgb(217,65,33)"/><text x="77.4574%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (7 samples, 0.24%)</title><rect x="77.3443%" y="357" width="0.2396%" height="15" fill="rgb(222,158,48)"/><text x="77.5943%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 0.24%)</title><rect x="77.3443%" y="341" width="0.2396%" height="15" fill="rgb(254,2,54)"/><text x="77.5943%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.24%)</title><rect x="77.3443%" y="325" width="0.2396%" height="15" fill="rgb(250,143,38)"/><text x="77.5943%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.24%)</title><rect x="77.3443%" y="309" width="0.2396%" height="15" fill="rgb(248,25,0)"/><text x="77.5943%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 0.24%)</title><rect x="77.3443%" y="293" width="0.2396%" height="15" fill="rgb(206,152,27)"/><text x="77.5943%" y="303.50"></text></g><g><title>core::iter::adapters::filter_fold::{{closure}} (6 samples, 0.21%)</title><rect x="77.3785%" y="277" width="0.2053%" height="15" fill="rgb(240,77,30)"/><text x="77.6285%" y="287.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (6 samples, 0.21%)</title><rect x="77.3785%" y="261" width="0.2053%" height="15" fill="rgb(231,5,3)"/><text x="77.6285%" y="271.50"></text></g><g><title>irust::utils::remove_comments::{{closure}} (4 samples, 0.14%)</title><rect x="77.4470%" y="245" width="0.1369%" height="15" fill="rgb(207,226,32)"/><text x="77.6970%" y="255.50"></text></g><g><title>alloc::string::String::push (4 samples, 0.14%)</title><rect x="77.4470%" y="229" width="0.1369%" height="15" fill="rgb(222,207,47)"/><text x="77.6970%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (4 samples, 0.14%)</title><rect x="77.4470%" y="213" width="0.1369%" height="15" fill="rgb(229,115,45)"/><text x="77.6970%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (4 samples, 0.14%)</title><rect x="77.4470%" y="197" width="0.1369%" height="15" fill="rgb(224,191,6)"/><text x="77.6970%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.14%)</title><rect x="77.4470%" y="181" width="0.1369%" height="15" fill="rgb(230,227,24)"/><text x="77.6970%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (4 samples, 0.14%)</title><rect x="77.4470%" y="165" width="0.1369%" height="15" fill="rgb(228,80,19)"/><text x="77.6970%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.14%)</title><rect x="77.4470%" y="149" width="0.1369%" height="15" fill="rgb(247,229,0)"/><text x="77.6970%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.14%)</title><rect x="77.4470%" y="133" width="0.1369%" height="15" fill="rgb(237,194,15)"/><text x="77.6970%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (4 samples, 0.14%)</title><rect x="77.4470%" y="117" width="0.1369%" height="15" fill="rgb(219,203,20)"/><text x="77.6970%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.14%)</title><rect x="77.4470%" y="101" width="0.1369%" height="15" fill="rgb(234,128,8)"/><text x="77.6970%" y="111.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.14%)</title><rect x="77.4470%" y="85" width="0.1369%" height="15" fill="rgb(248,202,8)"/><text x="77.6970%" y="95.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.14%)</title><rect x="77.4470%" y="69" width="0.1369%" height="15" fill="rgb(206,104,37)"/><text x="77.6970%" y="79.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::incomplete_input (8 samples, 0.27%)</title><rect x="77.3443%" y="437" width="0.2738%" height="15" fill="rgb(223,8,27)"/><text x="77.5943%" y="447.50"></text></g><g><title>irust::utils::StringTools::unmatched_brackets (8 samples, 0.27%)</title><rect x="77.3443%" y="421" width="0.2738%" height="15" fill="rgb(216,217,28)"/><text x="77.5943%" y="431.50"></text></g><g><title>irust::utils::remove_comments (8 samples, 0.27%)</title><rect x="77.3443%" y="405" width="0.2738%" height="15" fill="rgb(249,199,1)"/><text x="77.5943%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.27%)</title><rect x="77.3443%" y="389" width="0.2738%" height="15" fill="rgb(240,85,17)"/><text x="77.5943%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (8 samples, 0.27%)</title><rect x="77.3443%" y="373" width="0.2738%" height="15" fill="rgb(206,108,45)"/><text x="77.5943%" y="383.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (5 samples, 0.17%)</title><rect x="77.6865%" y="373" width="0.1711%" height="15" fill="rgb(245,210,41)"/><text x="77.9365%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (4 samples, 0.14%)</title><rect x="77.7207%" y="357" width="0.1369%" height="15" fill="rgb(206,13,37)"/><text x="77.9707%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.14%)</title><rect x="77.7207%" y="341" width="0.1369%" height="15" fill="rgb(250,61,18)"/><text x="77.9707%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.14%)</title><rect x="77.7207%" y="325" width="0.1369%" height="15" fill="rgb(235,172,48)"/><text x="77.9707%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.14%)</title><rect x="77.7207%" y="309" width="0.1369%" height="15" fill="rgb(249,201,17)"/><text x="77.9707%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.14%)</title><rect x="77.7207%" y="293" width="0.1369%" height="15" fill="rgb(219,208,6)"/><text x="77.9707%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.10%)</title><rect x="77.7550%" y="277" width="0.1027%" height="15" fill="rgb(248,31,23)"/><text x="78.0050%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.10%)</title><rect x="77.7550%" y="261" width="0.1027%" height="15" fill="rgb(245,15,42)"/><text x="78.0050%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.10%)</title><rect x="77.7550%" y="245" width="0.1027%" height="15" fill="rgb(222,217,39)"/><text x="78.0050%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.10%)</title><rect x="77.7550%" y="229" width="0.1027%" height="15" fill="rgb(210,219,27)"/><text x="78.0050%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.10%)</title><rect x="77.7550%" y="213" width="0.1027%" height="15" fill="rgb(252,166,36)"/><text x="78.0050%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.10%)</title><rect x="77.7550%" y="197" width="0.1027%" height="15" fill="rgb(245,132,34)"/><text x="78.0050%" y="207.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.10%)</title><rect x="77.7550%" y="181" width="0.1027%" height="15" fill="rgb(236,54,3)"/><text x="78.0050%" y="191.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.10%)</title><rect x="77.7550%" y="165" width="0.1027%" height="15" fill="rgb(241,173,43)"/><text x="78.0050%" y="175.50"></text></g><g><title>_int_malloc (3 samples, 0.10%)</title><rect x="77.7550%" y="149" width="0.1027%" height="15" fill="rgb(215,190,9)"/><text x="78.0050%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (3 samples, 0.10%)</title><rect x="77.8576%" y="373" width="0.1027%" height="15" fill="rgb(242,101,16)"/><text x="78.1076%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.10%)</title><rect x="77.8576%" y="357" width="0.1027%" height="15" fill="rgb(223,190,21)"/><text x="78.1076%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="77.8576%" y="341" width="0.1027%" height="15" fill="rgb(215,228,25)"/><text x="78.1076%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.10%)</title><rect x="77.8576%" y="325" width="0.1027%" height="15" fill="rgb(225,36,22)"/><text x="78.1076%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.10%)</title><rect x="77.8576%" y="309" width="0.1027%" height="15" fill="rgb(251,106,46)"/><text x="78.1076%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.10%)</title><rect x="77.8576%" y="293" width="0.1027%" height="15" fill="rgb(208,90,1)"/><text x="78.1076%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (3 samples, 0.10%)</title><rect x="77.8576%" y="277" width="0.1027%" height="15" fill="rgb(243,10,4)"/><text x="78.1076%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.10%)</title><rect x="77.8576%" y="261" width="0.1027%" height="15" fill="rgb(212,137,27)"/><text x="78.1076%" y="271.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.10%)</title><rect x="77.8576%" y="245" width="0.1027%" height="15" fill="rgb(231,220,49)"/><text x="78.1076%" y="255.50"></text></g><g><title>irust::irust::highlight::parse (14 samples, 0.48%)</title><rect x="77.6865%" y="389" width="0.4791%" height="15" fill="rgb(237,96,20)"/><text x="77.9365%" y="399.50"></text></g><g><title>irust::irust::highlight::catch_all (4 samples, 0.14%)</title><rect x="78.0287%" y="373" width="0.1369%" height="15" fill="rgb(239,229,30)"/><text x="78.2787%" y="383.50"></text></g><g><title>irust::irust::highlight::highlight (16 samples, 0.55%)</title><rect x="77.6523%" y="405" width="0.5476%" height="15" fill="rgb(219,65,33)"/><text x="77.9023%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (3 samples, 0.10%)</title><rect x="78.2341%" y="309" width="0.1027%" height="15" fill="rgb(243,134,7)"/><text x="78.4841%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.10%)</title><rect x="78.2341%" y="293" width="0.1027%" height="15" fill="rgb(216,177,54)"/><text x="78.4841%" y="303.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.14%)</title><rect x="78.2341%" y="389" width="0.1369%" height="15" fill="rgb(211,160,20)"/><text x="78.4841%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.14%)</title><rect x="78.2341%" y="373" width="0.1369%" height="15" fill="rgb(239,85,39)"/><text x="78.4841%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.14%)</title><rect x="78.2341%" y="357" width="0.1369%" height="15" fill="rgb(232,125,22)"/><text x="78.4841%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.14%)</title><rect x="78.2341%" y="341" width="0.1369%" height="15" fill="rgb(244,57,34)"/><text x="78.4841%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="78.2341%" y="325" width="0.1369%" height="15" fill="rgb(214,203,32)"/><text x="78.4841%" y="335.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (4 samples, 0.14%)</title><rect x="78.4394%" y="389" width="0.1369%" height="15" fill="rgb(207,58,43)"/><text x="78.6894%" y="399.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char (3 samples, 0.10%)</title><rect x="78.4736%" y="373" width="0.1027%" height="15" fill="rgb(215,193,15)"/><text x="78.7236%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (3 samples, 0.10%)</title><rect x="78.4736%" y="357" width="0.1027%" height="15" fill="rgb(232,15,44)"/><text x="78.7236%" y="367.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (3 samples, 0.10%)</title><rect x="78.4736%" y="341" width="0.1027%" height="15" fill="rgb(212,3,48)"/><text x="78.7236%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.10%)</title><rect x="78.4736%" y="325" width="0.1027%" height="15" fill="rgb(218,128,7)"/><text x="78.7236%" y="335.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (3 samples, 0.10%)</title><rect x="78.4736%" y="309" width="0.1027%" height="15" fill="rgb(226,216,39)"/><text x="78.7236%" y="319.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.10%)</title><rect x="78.4736%" y="293" width="0.1027%" height="15" fill="rgb(243,47,51)"/><text x="78.7236%" y="303.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.10%)</title><rect x="78.4736%" y="277" width="0.1027%" height="15" fill="rgb(241,183,40)"/><text x="78.7236%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.10%)</title><rect x="78.4736%" y="261" width="0.1027%" height="15" fill="rgb(231,217,32)"/><text x="78.7236%" y="271.50"></text></g><g><title>core::fmt::write (3 samples, 0.10%)</title><rect x="78.4736%" y="245" width="0.1027%" height="15" fill="rgb(229,61,38)"/><text x="78.7236%" y="255.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.10%)</title><rect x="78.8501%" y="133" width="0.1027%" height="15" fill="rgb(225,210,5)"/><text x="79.1001%" y="143.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.17%)</title><rect x="78.8501%" y="165" width="0.1711%" height="15" fill="rgb(231,79,45)"/><text x="79.1001%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.17%)</title><rect x="78.8501%" y="149" width="0.1711%" height="15" fill="rgb(224,100,7)"/><text x="79.1001%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.24%)</title><rect x="78.8159%" y="197" width="0.2396%" height="15" fill="rgb(241,198,18)"/><text x="79.0659%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.24%)</title><rect x="78.8159%" y="181" width="0.2396%" height="15" fill="rgb(252,97,53)"/><text x="79.0659%" y="191.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (11 samples, 0.38%)</title><rect x="78.7132%" y="373" width="0.3765%" height="15" fill="rgb(220,88,7)"/><text x="78.9632%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (10 samples, 0.34%)</title><rect x="78.7474%" y="357" width="0.3422%" height="15" fill="rgb(213,176,14)"/><text x="78.9974%" y="367.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg::{{closure}} (9 samples, 0.31%)</title><rect x="78.7817%" y="341" width="0.3080%" height="15" fill="rgb(246,73,7)"/><text x="79.0317%" y="351.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (9 samples, 0.31%)</title><rect x="78.7817%" y="325" width="0.3080%" height="15" fill="rgb(245,64,36)"/><text x="79.0317%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (9 samples, 0.31%)</title><rect x="78.7817%" y="309" width="0.3080%" height="15" fill="rgb(245,80,10)"/><text x="79.0317%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (8 samples, 0.27%)</title><rect x="78.8159%" y="293" width="0.2738%" height="15" fill="rgb(232,107,50)"/><text x="79.0659%" y="303.50"></text></g><g><title>core::fmt::write (8 samples, 0.27%)</title><rect x="78.8159%" y="277" width="0.2738%" height="15" fill="rgb(253,3,0)"/><text x="79.0659%" y="287.50"></text></g><g><title>crossterm::style::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::style::SetForegroundColor&gt;&gt;::fmt (8 samples, 0.27%)</title><rect x="78.8159%" y="261" width="0.2738%" height="15" fill="rgb(212,99,53)"/><text x="79.0659%" y="271.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (8 samples, 0.27%)</title><rect x="78.8159%" y="245" width="0.2738%" height="15" fill="rgb(249,111,54)"/><text x="79.0659%" y="255.50"></text></g><g><title>core::fmt::Formatter::write_fmt (8 samples, 0.27%)</title><rect x="78.8159%" y="229" width="0.2738%" height="15" fill="rgb(249,55,30)"/><text x="79.0659%" y="239.50"></text></g><g><title>core::fmt::write (8 samples, 0.27%)</title><rect x="78.8159%" y="213" width="0.2738%" height="15" fill="rgb(237,47,42)"/><text x="79.0659%" y="223.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.14%)</title><rect x="79.2608%" y="229" width="0.1369%" height="15" fill="rgb(211,20,18)"/><text x="79.5108%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.10%)</title><rect x="79.2950%" y="213" width="0.1027%" height="15" fill="rgb(231,203,46)"/><text x="79.5450%" y="223.50"></text></g><g><title>std::io::Write::write_fmt (11 samples, 0.38%)</title><rect x="79.1923%" y="261" width="0.3765%" height="15" fill="rgb(237,142,3)"/><text x="79.4423%" y="271.50"></text></g><g><title>core::fmt::write (9 samples, 0.31%)</title><rect x="79.2608%" y="245" width="0.3080%" height="15" fill="rgb(241,107,1)"/><text x="79.5108%" y="255.50"></text></g><g><title>core::fmt::Write::write_char (5 samples, 0.17%)</title><rect x="79.3977%" y="229" width="0.1711%" height="15" fill="rgb(229,83,13)"/><text x="79.6477%" y="239.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.17%)</title><rect x="79.3977%" y="213" width="0.1711%" height="15" fill="rgb(241,91,40)"/><text x="79.6477%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.17%)</title><rect x="79.3977%" y="197" width="0.1711%" height="15" fill="rgb(225,3,45)"/><text x="79.6477%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="79.4319%" y="181" width="0.1369%" height="15" fill="rgb(244,223,14)"/><text x="79.6819%" y="191.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="79.4319%" y="165" width="0.1369%" height="15" fill="rgb(224,124,37)"/><text x="79.6819%" y="175.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (16 samples, 0.55%)</title><rect x="79.1239%" y="293" width="0.5476%" height="15" fill="rgb(251,171,30)"/><text x="79.3739%" y="303.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (16 samples, 0.55%)</title><rect x="79.1239%" y="277" width="0.5476%" height="15" fill="rgb(236,46,54)"/><text x="79.3739%" y="287.50"></text></g><g><title>std::io::stdio::Stdout::lock (3 samples, 0.10%)</title><rect x="79.5688%" y="261" width="0.1027%" height="15" fill="rgb(245,213,5)"/><text x="79.8188%" y="271.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (3 samples, 0.10%)</title><rect x="79.5688%" y="245" width="0.1027%" height="15" fill="rgb(230,144,27)"/><text x="79.8188%" y="255.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (3 samples, 0.10%)</title><rect x="79.5688%" y="229" width="0.1027%" height="15" fill="rgb(220,86,6)"/><text x="79.8188%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (3 samples, 0.10%)</title><rect x="79.5688%" y="213" width="0.1027%" height="15" fill="rgb(240,20,13)"/><text x="79.8188%" y="223.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (18 samples, 0.62%)</title><rect x="79.1239%" y="309" width="0.6160%" height="15" fill="rgb(217,89,34)"/><text x="79.3739%" y="319.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner (46 samples, 1.57%)</title><rect x="78.1999%" y="405" width="1.5743%" height="15" fill="rgb(229,13,5)"/><text x="78.4499%" y="415.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char_with_color (35 samples, 1.20%)</title><rect x="78.5763%" y="389" width="1.1978%" height="15" fill="rgb(244,67,35)"/><text x="78.8263%" y="399.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char (20 samples, 0.68%)</title><rect x="79.0897%" y="373" width="0.6845%" height="15" fill="rgb(221,40,2)"/><text x="79.3397%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (19 samples, 0.65%)</title><rect x="79.1239%" y="357" width="0.6502%" height="15" fill="rgb(237,157,21)"/><text x="79.3739%" y="367.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (19 samples, 0.65%)</title><rect x="79.1239%" y="341" width="0.6502%" height="15" fill="rgb(222,94,11)"/><text x="79.3739%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (19 samples, 0.65%)</title><rect x="79.1239%" y="325" width="0.6502%" height="15" fill="rgb(249,113,6)"/><text x="79.3739%" y="335.50"></text></g><g><title>irust::irust::IRust::handle_input_event (1,480 samples, 50.65%)</title><rect x="29.1581%" y="469" width="50.6502%" height="15" fill="rgb(238,137,36)"/><text x="29.4081%" y="479.50">irust::irust::IRust::handle_input_event</text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_enter (72 samples, 2.46%)</title><rect x="77.3443%" y="453" width="2.4641%" height="15" fill="rgb(210,102,26)"/><text x="77.5943%" y="463.50">ir..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_from_next_line (64 samples, 2.19%)</title><rect x="77.6181%" y="437" width="2.1903%" height="15" fill="rgb(218,30,30)"/><text x="77.8681%" y="447.50">i..</text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input (64 samples, 2.19%)</title><rect x="77.6181%" y="421" width="2.1903%" height="15" fill="rgb(214,67,26)"/><text x="77.8681%" y="431.50">i..</text></g><g><title>__GI___libc_write (86 samples, 2.94%)</title><rect x="79.8768%" y="309" width="2.9432%" height="15" fill="rgb(251,9,53)"/><text x="80.1268%" y="319.50">__..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (88 samples, 3.01%)</title><rect x="79.8426%" y="421" width="3.0116%" height="15" fill="rgb(228,204,25)"/><text x="80.0926%" y="431.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (88 samples, 3.01%)</title><rect x="79.8426%" y="405" width="3.0116%" height="15" fill="rgb(207,153,8)"/><text x="80.0926%" y="415.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (88 samples, 3.01%)</title><rect x="79.8426%" y="389" width="3.0116%" height="15" fill="rgb(242,9,16)"/><text x="80.0926%" y="399.50">&lt;st..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (88 samples, 3.01%)</title><rect x="79.8426%" y="373" width="3.0116%" height="15" fill="rgb(217,211,10)"/><text x="80.0926%" y="383.50">std..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (87 samples, 2.98%)</title><rect x="79.8768%" y="357" width="2.9774%" height="15" fill="rgb(219,228,52)"/><text x="80.1268%" y="367.50">&lt;st..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (87 samples, 2.98%)</title><rect x="79.8768%" y="341" width="2.9774%" height="15" fill="rgb(231,92,29)"/><text x="80.1268%" y="351.50">&lt;st..</text></g><g><title>std::sys::unix::fd::FileDesc::write (87 samples, 2.98%)</title><rect x="79.8768%" y="325" width="2.9774%" height="15" fill="rgb(232,8,23)"/><text x="80.1268%" y="335.50">std..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::flush (89 samples, 3.05%)</title><rect x="79.8426%" y="469" width="3.0459%" height="15" fill="rgb(216,211,34)"/><text x="80.0926%" y="479.50">iru..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (89 samples, 3.05%)</title><rect x="79.8426%" y="453" width="3.0459%" height="15" fill="rgb(236,151,0)"/><text x="80.0926%" y="463.50">&lt;st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (89 samples, 3.05%)</title><rect x="79.8426%" y="437" width="3.0459%" height="15" fill="rgb(209,168,3)"/><text x="80.0926%" y="447.50">&lt;&amp;s..</text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (92 samples, 3.15%)</title><rect x="82.9569%" y="437" width="3.1485%" height="15" fill="rgb(208,129,28)"/><text x="83.2069%" y="447.50">std..</text></g><g><title>std::thread::park (90 samples, 3.08%)</title><rect x="83.0253%" y="421" width="3.0801%" height="15" fill="rgb(229,78,22)"/><text x="83.2753%" y="431.50">std..</text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (90 samples, 3.08%)</title><rect x="83.0253%" y="405" width="3.0801%" height="15" fill="rgb(228,187,13)"/><text x="83.2753%" y="415.50">std..</text></g><g><title>std::sys::unix::futex::futex_wait (89 samples, 3.05%)</title><rect x="83.0595%" y="389" width="3.0459%" height="15" fill="rgb(240,119,24)"/><text x="83.3095%" y="399.50">std..</text></g><g><title>syscall (89 samples, 3.05%)</title><rect x="83.0595%" y="373" width="3.0459%" height="15" fill="rgb(209,194,42)"/><text x="83.3095%" y="383.50">sys..</text></g><g><title>core::ptr::drop_in_place (3 samples, 0.10%)</title><rect x="86.2423%" y="405" width="0.1027%" height="15" fill="rgb(247,200,46)"/><text x="86.4923%" y="415.50"></text></g><g><title>alloc::alloc::box_free (3 samples, 0.10%)</title><rect x="86.2423%" y="389" width="0.1027%" height="15" fill="rgb(218,76,16)"/><text x="86.4923%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (3 samples, 0.10%)</title><rect x="86.2423%" y="373" width="0.1027%" height="15" fill="rgb(225,21,48)"/><text x="86.4923%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.10%)</title><rect x="86.2423%" y="357" width="0.1027%" height="15" fill="rgb(239,223,50)"/><text x="86.4923%" y="367.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (103 samples, 3.52%)</title><rect x="82.8884%" y="469" width="3.5250%" height="15" fill="rgb(244,45,21)"/><text x="83.1384%" y="479.50">std..</text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::recv (102 samples, 3.49%)</title><rect x="82.9227%" y="453" width="3.4908%" height="15" fill="rgb(232,33,43)"/><text x="83.1727%" y="463.50">std..</text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (7 samples, 0.24%)</title><rect x="86.1739%" y="437" width="0.2396%" height="15" fill="rgb(209,8,3)"/><text x="86.4239%" y="447.50"></text></g><g><title>std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (6 samples, 0.21%)</title><rect x="86.2081%" y="421" width="0.2053%" height="15" fill="rgb(214,25,53)"/><text x="86.4581%" y="431.50"></text></g><g><title>__libc_start_main (1,751 samples, 59.92%)</title><rect x="28.6790%" y="661" width="59.9247%" height="15" fill="rgb(254,186,54)"/><text x="28.9290%" y="671.50">__libc_start_main</text></g><g><title>main (1,751 samples, 59.92%)</title><rect x="28.6790%" y="645" width="59.9247%" height="15" fill="rgb(208,174,49)"/><text x="28.9290%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (1,751 samples, 59.92%)</title><rect x="28.6790%" y="629" width="59.9247%" height="15" fill="rgb(233,191,51)"/><text x="28.9290%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,751 samples, 59.92%)</title><rect x="28.6790%" y="613" width="59.9247%" height="15" fill="rgb(222,134,10)"/><text x="28.9290%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,751 samples, 59.92%)</title><rect x="28.6790%" y="597" width="59.9247%" height="15" fill="rgb(230,226,20)"/><text x="28.9290%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,751 samples, 59.92%)</title><rect x="28.6790%" y="581" width="59.9247%" height="15" fill="rgb(251,111,25)"/><text x="28.9290%" y="591.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,751 samples, 59.92%)</title><rect x="28.6790%" y="565" width="59.9247%" height="15" fill="rgb(224,40,46)"/><text x="28.9290%" y="575.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,751 samples, 59.92%)</title><rect x="28.6790%" y="549" width="59.9247%" height="15" fill="rgb(236,108,47)"/><text x="28.9290%" y="559.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,751 samples, 59.92%)</title><rect x="28.6790%" y="533" width="59.9247%" height="15" fill="rgb(234,93,0)"/><text x="28.9290%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,751 samples, 59.92%)</title><rect x="28.6790%" y="517" width="59.9247%" height="15" fill="rgb(224,213,32)"/><text x="28.9290%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>irust::main (1,751 samples, 59.92%)</title><rect x="28.6790%" y="501" width="59.9247%" height="15" fill="rgb(251,11,48)"/><text x="28.9290%" y="511.50">irust::main</text></g><g><title>irust::irust::IRust::run (1,737 samples, 59.45%)</title><rect x="29.1581%" y="485" width="59.4456%" height="15" fill="rgb(236,173,5)"/><text x="29.4081%" y="495.50">irust::irust::IRust::run</text></g><g><title>std::thread::Thread::unpark (64 samples, 2.19%)</title><rect x="86.4134%" y="469" width="2.1903%" height="15" fill="rgb(230,95,12)"/><text x="86.6634%" y="479.50">s..</text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (64 samples, 2.19%)</title><rect x="86.4134%" y="453" width="2.1903%" height="15" fill="rgb(232,209,1)"/><text x="86.6634%" y="463.50">s..</text></g><g><title>syscall (64 samples, 2.19%)</title><rect x="86.4134%" y="437" width="2.1903%" height="15" fill="rgb(232,6,1)"/><text x="86.6634%" y="447.50">s..</text></g><g><title>_start (1,759 samples, 60.20%)</title><rect x="28.4394%" y="677" width="60.1985%" height="15" fill="rgb(210,224,50)"/><text x="28.6894%" y="687.50">_start</text></g><g><title>core::fmt::write (15 samples, 0.51%)</title><rect x="88.8433%" y="661" width="0.5133%" height="15" fill="rgb(228,127,35)"/><text x="89.0933%" y="671.50"></text></g><g><title>irust (2,239 samples, 76.63%)</title><rect x="12.8337%" y="693" width="76.6256%" height="15" fill="rgb(245,102,45)"/><text x="13.0837%" y="703.50">irust</text></g><g><title>std::io::stdio::stdout::INSTANCE (20 samples, 0.68%)</title><rect x="88.7748%" y="677" width="0.6845%" height="15" fill="rgb(214,1,49)"/><text x="89.0248%" y="687.50"></text></g><g><title>[[heap]] (3 samples, 0.10%)</title><rect x="89.4593%" y="677" width="0.1027%" height="15" fill="rgb(226,163,40)"/><text x="89.7093%" y="687.50"></text></g><g><title>[ld] (9 samples, 0.31%)</title><rect x="89.8700%" y="549" width="0.3080%" height="15" fill="rgb(239,212,28)"/><text x="90.1200%" y="559.50"></text></g><g><title>__GI_fnmatch (5 samples, 0.17%)</title><rect x="90.1780%" y="549" width="0.1711%" height="15" fill="rgb(220,20,13)"/><text x="90.4280%" y="559.50"></text></g><g><title>internal_fnmatch (3 samples, 0.10%)</title><rect x="90.2464%" y="533" width="0.1027%" height="15" fill="rgb(210,164,35)"/><text x="90.4964%" y="543.50"></text></g><g><title>__strcmp_sse2_unaligned (3 samples, 0.10%)</title><rect x="90.3491%" y="549" width="0.1027%" height="15" fill="rgb(248,109,41)"/><text x="90.5991%" y="559.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.17%)</title><rect x="90.6229%" y="485" width="0.1711%" height="15" fill="rgb(238,23,50)"/><text x="90.8729%" y="495.50"></text></g><g><title>_bfd_elf_new_section_hook (4 samples, 0.14%)</title><rect x="90.6571%" y="469" width="0.1369%" height="15" fill="rgb(211,48,49)"/><text x="90.9071%" y="479.50"></text></g><g><title>_bfd_elf_make_section_from_shdr (8 samples, 0.27%)</title><rect x="90.5886%" y="501" width="0.2738%" height="15" fill="rgb(223,36,21)"/><text x="90.8386%" y="511.50"></text></g><g><title>bfd_section_from_shdr (10 samples, 0.34%)</title><rect x="90.5886%" y="517" width="0.3422%" height="15" fill="rgb(207,123,46)"/><text x="90.8386%" y="527.50"></text></g><g><title>[ld] (37 samples, 1.27%)</title><rect x="89.6988%" y="565" width="1.2663%" height="15" fill="rgb(240,218,32)"/><text x="89.9488%" y="575.50"></text></g><g><title>bfd_check_format_matches (14 samples, 0.48%)</title><rect x="90.4860%" y="549" width="0.4791%" height="15" fill="rgb(252,5,43)"/><text x="90.7360%" y="559.50"></text></g><g><title>bfd_elf64_object_p (13 samples, 0.44%)</title><rect x="90.5202%" y="533" width="0.4449%" height="15" fill="rgb(252,84,19)"/><text x="90.7702%" y="543.50"></text></g><g><title>[ld] (4 samples, 0.14%)</title><rect x="91.1020%" y="549" width="0.1369%" height="15" fill="rgb(243,152,39)"/><text x="91.3520%" y="559.50"></text></g><g><title>[ld] (4 samples, 0.14%)</title><rect x="91.1020%" y="533" width="0.1369%" height="15" fill="rgb(234,160,15)"/><text x="91.3520%" y="543.50"></text></g><g><title>[ld] (4 samples, 0.14%)</title><rect x="91.1020%" y="517" width="0.1369%" height="15" fill="rgb(237,34,20)"/><text x="91.3520%" y="527.50"></text></g><g><title>[liblto_plugin.so.0.0.0] (4 samples, 0.14%)</title><rect x="91.1020%" y="501" width="0.1369%" height="15" fill="rgb(229,97,13)"/><text x="91.3520%" y="511.50"></text></g><g><title>[liblto_plugin.so.0.0.0] (4 samples, 0.14%)</title><rect x="91.1020%" y="485" width="0.1369%" height="15" fill="rgb(234,71,50)"/><text x="91.3520%" y="495.50"></text></g><g><title>bfd_hash_insert (3 samples, 0.10%)</title><rect x="91.2731%" y="517" width="0.1027%" height="15" fill="rgb(253,155,4)"/><text x="91.5231%" y="527.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.17%)</title><rect x="91.2389%" y="549" width="0.1711%" height="15" fill="rgb(222,185,37)"/><text x="91.4889%" y="559.50"></text></g><g><title>bfd_link_hash_lookup (4 samples, 0.14%)</title><rect x="91.2731%" y="533" width="0.1369%" height="15" fill="rgb(251,177,13)"/><text x="91.5231%" y="543.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.17%)</title><rect x="91.4100%" y="549" width="0.1711%" height="15" fill="rgb(250,179,40)"/><text x="91.6600%" y="559.50"></text></g><g><title>bfd_bread (3 samples, 0.10%)</title><rect x="91.6838%" y="501" width="0.1027%" height="15" fill="rgb(242,44,2)"/><text x="91.9338%" y="511.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.10%)</title><rect x="91.6838%" y="485" width="0.1027%" height="15" fill="rgb(216,177,13)"/><text x="91.9338%" y="495.50"></text></g><g><title>__GI__IO_fread (3 samples, 0.10%)</title><rect x="91.6838%" y="469" width="0.1027%" height="15" fill="rgb(216,106,43)"/><text x="91.9338%" y="479.50"></text></g><g><title>_IO_file_xsgetn (3 samples, 0.10%)</title><rect x="91.6838%" y="453" width="0.1027%" height="15" fill="rgb(216,183,2)"/><text x="91.9338%" y="463.50"></text></g><g><title>bfd_elf_link_add_symbols (5 samples, 0.17%)</title><rect x="91.6496%" y="549" width="0.1711%" height="15" fill="rgb(249,75,3)"/><text x="91.8996%" y="559.50"></text></g><g><title>_bfd_elf_link_read_relocs (5 samples, 0.17%)</title><rect x="91.6496%" y="533" width="0.1711%" height="15" fill="rgb(219,67,39)"/><text x="91.8996%" y="543.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.17%)</title><rect x="91.6496%" y="517" width="0.1711%" height="15" fill="rgb(253,228,2)"/><text x="91.8996%" y="527.50"></text></g><g><title>[ld] (63 samples, 2.16%)</title><rect x="89.6988%" y="581" width="2.1561%" height="15" fill="rgb(235,138,27)"/><text x="89.9488%" y="591.50">[..</text></g><g><title>bfd_elf_link_add_symbols (25 samples, 0.86%)</title><rect x="90.9993%" y="565" width="0.8556%" height="15" fill="rgb(236,97,51)"/><text x="91.2493%" y="575.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.14%)</title><rect x="92.0602%" y="565" width="0.1369%" height="15" fill="rgb(240,80,30)"/><text x="92.3102%" y="575.50"></text></g><g><title>[ld] (74 samples, 2.53%)</title><rect x="89.6988%" y="597" width="2.5325%" height="15" fill="rgb(230,178,19)"/><text x="89.9488%" y="607.50">[l..</text></g><g><title>bfd_elf_link_add_symbols (10 samples, 0.34%)</title><rect x="91.8891%" y="581" width="0.3422%" height="15" fill="rgb(210,190,27)"/><text x="92.1391%" y="591.50"></text></g><g><title>[ld] (78 samples, 2.67%)</title><rect x="89.6646%" y="613" width="2.6694%" height="15" fill="rgb(222,107,31)"/><text x="89.9146%" y="623.50">[l..</text></g><g><title>bfd_elf_size_dynamic_sections (3 samples, 0.10%)</title><rect x="92.2313%" y="597" width="0.1027%" height="15" fill="rgb(216,127,34)"/><text x="92.4813%" y="607.50"></text></g><g><title>bfd_link_hash_traverse (3 samples, 0.10%)</title><rect x="92.2313%" y="581" width="0.1027%" height="15" fill="rgb(234,116,52)"/><text x="92.4813%" y="591.50"></text></g><g><title>_bfd_elf_link_check_relocs (5 samples, 0.17%)</title><rect x="92.3340%" y="613" width="0.1711%" height="15" fill="rgb(222,124,15)"/><text x="92.5840%" y="623.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.17%)</title><rect x="92.3340%" y="597" width="0.1711%" height="15" fill="rgb(231,179,28)"/><text x="92.5840%" y="607.50"></text></g><g><title>_bfd_elf_merge_sections (3 samples, 0.10%)</title><rect x="92.5051%" y="613" width="0.1027%" height="15" fill="rgb(226,93,45)"/><text x="92.7551%" y="623.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.10%)</title><rect x="92.5051%" y="597" width="0.1027%" height="15" fill="rgb(215,8,51)"/><text x="92.7551%" y="607.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.10%)</title><rect x="92.7789%" y="581" width="0.1027%" height="15" fill="rgb(223,106,5)"/><text x="93.0289%" y="591.50"></text></g><g><title>_bfd_elf_rela_local_sym (4 samples, 0.14%)</title><rect x="92.8816%" y="581" width="0.1369%" height="15" fill="rgb(250,191,5)"/><text x="93.1316%" y="591.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.10%)</title><rect x="92.9158%" y="565" width="0.1027%" height="15" fill="rgb(242,132,44)"/><text x="93.1658%" y="575.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.10%)</title><rect x="92.9158%" y="549" width="0.1027%" height="15" fill="rgb(251,152,29)"/><text x="93.1658%" y="559.50"></text></g><g><title>[libbfd-2.35.1.so] (11 samples, 0.38%)</title><rect x="92.7105%" y="597" width="0.3765%" height="15" fill="rgb(218,179,5)"/><text x="92.9605%" y="607.50"></text></g><g><title>bfd_elf_final_link (25 samples, 0.86%)</title><rect x="92.6078%" y="613" width="0.8556%" height="15" fill="rgb(227,67,19)"/><text x="92.8578%" y="623.50"></text></g><g><title>bfd_set_section_contents (4 samples, 0.14%)</title><rect x="93.3265%" y="597" width="0.1369%" height="15" fill="rgb(233,119,31)"/><text x="93.5765%" y="607.50"></text></g><g><title>_bfd_elf_set_section_contents (4 samples, 0.14%)</title><rect x="93.3265%" y="581" width="0.1369%" height="15" fill="rgb(241,120,22)"/><text x="93.5765%" y="591.50"></text></g><g><title>_bfd_elf_gc_mark_extra_sections (3 samples, 0.10%)</title><rect x="93.4976%" y="597" width="0.1027%" height="15" fill="rgb(224,102,30)"/><text x="93.7476%" y="607.50"></text></g><g><title>bfd_elf_gc_sections (6 samples, 0.21%)</title><rect x="93.4634%" y="613" width="0.2053%" height="15" fill="rgb(210,164,37)"/><text x="93.7134%" y="623.50"></text></g><g><title>[ld] (120 samples, 4.11%)</title><rect x="89.5962%" y="629" width="4.1068%" height="15" fill="rgb(226,191,16)"/><text x="89.8462%" y="639.50">[ld]</text></g><g><title>[ld] (6 samples, 0.21%)</title><rect x="93.7029%" y="549" width="0.2053%" height="15" fill="rgb(214,40,45)"/><text x="93.9529%" y="559.50"></text></g><g><title>[ld] (6 samples, 0.21%)</title><rect x="93.7029%" y="533" width="0.2053%" height="15" fill="rgb(244,29,26)"/><text x="93.9529%" y="543.50"></text></g><g><title>__libc_start_main (128 samples, 4.38%)</title><rect x="89.5962%" y="661" width="4.3806%" height="15" fill="rgb(216,16,5)"/><text x="89.8462%" y="671.50">__lib..</text></g><g><title>[ld] (128 samples, 4.38%)</title><rect x="89.5962%" y="645" width="4.3806%" height="15" fill="rgb(249,76,35)"/><text x="89.8462%" y="655.50">[ld]</text></g><g><title>bfd_close (8 samples, 0.27%)</title><rect x="93.7029%" y="629" width="0.2738%" height="15" fill="rgb(207,11,44)"/><text x="93.9529%" y="639.50"></text></g><g><title>_bfd_elf_write_object_contents (8 samples, 0.27%)</title><rect x="93.7029%" y="613" width="0.2738%" height="15" fill="rgb(228,190,49)"/><text x="93.9529%" y="623.50"></text></g><g><title>[ld] (8 samples, 0.27%)</title><rect x="93.7029%" y="597" width="0.2738%" height="15" fill="rgb(214,173,12)"/><text x="93.9529%" y="607.50"></text></g><g><title>[ld] (8 samples, 0.27%)</title><rect x="93.7029%" y="581" width="0.2738%" height="15" fill="rgb(218,26,35)"/><text x="93.9529%" y="591.50"></text></g><g><title>bfd_elf64_checksum_contents (8 samples, 0.27%)</title><rect x="93.7029%" y="565" width="0.2738%" height="15" fill="rgb(220,200,19)"/><text x="93.9529%" y="575.50"></text></g><g><title>[ld] (130 samples, 4.45%)</title><rect x="89.5619%" y="677" width="4.4490%" height="15" fill="rgb(239,95,49)"/><text x="89.8119%" y="687.50">[ld]</text></g><g><title>ld (137 samples, 4.69%)</title><rect x="89.4593%" y="693" width="4.6886%" height="15" fill="rgb(235,85,53)"/><text x="89.7093%" y="703.50">ld</text></g><g><title>__GI___clone (6 samples, 0.21%)</title><rect x="94.1821%" y="677" width="0.2053%" height="15" fill="rgb(233,133,31)"/><text x="94.4321%" y="687.50"></text></g><g><title>racer (15 samples, 0.51%)</title><rect x="94.1478%" y="693" width="0.5133%" height="15" fill="rgb(218,25,20)"/><text x="94.3978%" y="703.50"></text></g><g><title>_start (7 samples, 0.24%)</title><rect x="94.4216%" y="677" width="0.2396%" height="15" fill="rgb(252,210,38)"/><text x="94.6716%" y="687.50"></text></g><g><title>_dl_start (4 samples, 0.14%)</title><rect x="94.5243%" y="661" width="0.1369%" height="15" fill="rgb(242,134,21)"/><text x="94.7743%" y="671.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.14%)</title><rect x="94.5243%" y="645" width="0.1369%" height="15" fill="rgb(213,28,48)"/><text x="94.7743%" y="655.50"></text></g><g><title>dl_main (4 samples, 0.14%)</title><rect x="94.5243%" y="629" width="0.1369%" height="15" fill="rgb(250,196,2)"/><text x="94.7743%" y="639.50"></text></g><g><title>[rustup] (3 samples, 0.10%)</title><rect x="94.9692%" y="661" width="0.1027%" height="15" fill="rgb(227,5,17)"/><text x="95.2192%" y="671.50"></text></g><g><title>[rustup] (3 samples, 0.10%)</title><rect x="94.9692%" y="645" width="0.1027%" height="15" fill="rgb(221,226,24)"/><text x="95.2192%" y="655.50"></text></g><g><title>[rustup] (3 samples, 0.10%)</title><rect x="94.9692%" y="629" width="0.1027%" height="15" fill="rgb(211,5,48)"/><text x="95.2192%" y="639.50"></text></g><g><title>rustc_expand::expand::MacroExpander::fully_expand_fragment (3 samples, 0.10%)</title><rect x="95.1403%" y="661" width="0.1027%" height="15" fill="rgb(219,150,6)"/><text x="95.3903%" y="671.50"></text></g><g><title>rustc_expand::expand::MacroExpander::collect_invocations (3 samples, 0.10%)</title><rect x="95.1403%" y="645" width="0.1027%" height="15" fill="rgb(251,46,16)"/><text x="95.3903%" y="655.50"></text></g><g><title>rustc_resolve::macros::&lt;impl rustc_expand::base::ResolverExpand for rustc_resolve::Resolver&gt;::visit_ast_fragment_with_placeholders (3 samples, 0.10%)</title><rect x="95.1403%" y="629" width="0.1027%" height="15" fill="rgb(220,204,40)"/><text x="95.3903%" y="639.50"></text></g><g><title>rustc_expand::expand::AstFragment::visit_with (3 samples, 0.10%)</title><rect x="95.1403%" y="613" width="0.1027%" height="15" fill="rgb(211,85,2)"/><text x="95.3903%" y="623.50"></text></g><g><title>&lt;rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor as rustc_ast::visit::Visitor&gt;::visit_item (3 samples, 0.10%)</title><rect x="95.1403%" y="597" width="0.1027%" height="15" fill="rgb(229,17,7)"/><text x="95.3903%" y="607.50"></text></g><g><title>rustc_ast::visit::walk_item (3 samples, 0.10%)</title><rect x="95.1403%" y="581" width="0.1027%" height="15" fill="rgb(239,72,28)"/><text x="95.3903%" y="591.50"></text></g><g><title>&lt;rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor as rustc_ast::visit::Visitor&gt;::visit_item (3 samples, 0.10%)</title><rect x="95.1403%" y="565" width="0.1027%" height="15" fill="rgb(230,47,54)"/><text x="95.3903%" y="575.50"></text></g><g><title>rustc_interface::queries::Queries::ongoing_codegen (11 samples, 0.38%)</title><rect x="95.3799%" y="645" width="0.3765%" height="15" fill="rgb(214,50,8)"/><text x="95.6299%" y="655.50"></text></g><g><title>rustc_interface::passes::QueryContext::enter (11 samples, 0.38%)</title><rect x="95.3799%" y="629" width="0.3765%" height="15" fill="rgb(216,198,43)"/><text x="95.6299%" y="639.50"></text></g><g><title>rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time (11 samples, 0.38%)</title><rect x="95.3799%" y="613" width="0.3765%" height="15" fill="rgb(234,20,35)"/><text x="95.6299%" y="623.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::codegen_crate (11 samples, 0.38%)</title><rect x="95.3799%" y="597" width="0.3765%" height="15" fill="rgb(254,45,19)"/><text x="95.6299%" y="607.50"></text></g><g><title>rustc_codegen_ssa::base::codegen_crate (11 samples, 0.38%)</title><rect x="95.3799%" y="581" width="0.3765%" height="15" fill="rgb(219,14,44)"/><text x="95.6299%" y="591.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (6 samples, 0.21%)</title><rect x="95.5510%" y="565" width="0.2053%" height="15" fill="rgb(217,220,26)"/><text x="95.8010%" y="575.50"></text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (6 samples, 0.21%)</title><rect x="95.5510%" y="549" width="0.2053%" height="15" fill="rgb(213,158,28)"/><text x="95.8010%" y="559.50"></text></g><g><title>std::thread::park (6 samples, 0.21%)</title><rect x="95.5510%" y="533" width="0.2053%" height="15" fill="rgb(252,51,52)"/><text x="95.8010%" y="543.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (6 samples, 0.21%)</title><rect x="95.5510%" y="517" width="0.2053%" height="15" fill="rgb(246,89,16)"/><text x="95.8010%" y="527.50"></text></g><g><title>std::sys::unix::futex::futex_wait (6 samples, 0.21%)</title><rect x="95.5510%" y="501" width="0.2053%" height="15" fill="rgb(216,158,49)"/><text x="95.8010%" y="511.50"></text></g><g><title>syscall (6 samples, 0.21%)</title><rect x="95.5510%" y="485" width="0.2053%" height="15" fill="rgb(236,107,19)"/><text x="95.8010%" y="495.50"></text></g><g><title>rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter (16 samples, 0.55%)</title><rect x="95.2772%" y="661" width="0.5476%" height="15" fill="rgb(228,185,30)"/><text x="95.5272%" y="671.50"></text></g><g><title>LLVMInitializePasses (4 samples, 0.14%)</title><rect x="95.8248%" y="597" width="0.1369%" height="15" fill="rgb(246,134,8)"/><text x="96.0748%" y="607.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::init (8 samples, 0.27%)</title><rect x="95.8248%" y="645" width="0.2738%" height="15" fill="rgb(214,143,50)"/><text x="96.0748%" y="655.50"></text></g><g><title>std::sync::once::Once::call_inner (8 samples, 0.27%)</title><rect x="95.8248%" y="629" width="0.2738%" height="15" fill="rgb(228,75,8)"/><text x="96.0748%" y="639.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (8 samples, 0.27%)</title><rect x="95.8248%" y="613" width="0.2738%" height="15" fill="rgb(207,175,4)"/><text x="96.0748%" y="623.50"></text></g><g><title>rustc_llvm::initialize_available_targets (4 samples, 0.14%)</title><rect x="95.9617%" y="597" width="0.1369%" height="15" fill="rgb(205,108,24)"/><text x="96.2117%" y="607.50"></text></g><g><title>rustc_interface::util::create_session (9 samples, 0.31%)</title><rect x="95.8248%" y="661" width="0.3080%" height="15" fill="rgb(244,120,49)"/><text x="96.0748%" y="671.50"></text></g><g><title>rustc_middle::ty::context::TyCtxt::create_global_ctxt (8 samples, 0.27%)</title><rect x="96.2355%" y="661" width="0.2738%" height="15" fill="rgb(223,47,38)"/><text x="96.4855%" y="671.50"></text></g><g><title>rustc_metadata::rmeta::decoder::cstore_impl::&lt;impl rustc_middle::middle::cstore::CrateStore for rustc_metadata::creader::CStore&gt;::all_def_path_hashes_and_def_ids (4 samples, 0.14%)</title><rect x="96.3723%" y="645" width="0.1369%" height="15" fill="rgb(229,179,11)"/><text x="96.6223%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.14%)</title><rect x="96.3723%" y="629" width="0.1369%" height="15" fill="rgb(231,122,1)"/><text x="96.6223%" y="639.50"></text></g><g><title>rustc_metadata::rmeta::decoder::&lt;impl rustc_metadata::creader::CrateMetadataRef&gt;::def_path_hash_unlocked (4 samples, 0.14%)</title><rect x="96.3723%" y="613" width="0.1369%" height="15" fill="rgb(245,119,9)"/><text x="96.6223%" y="623.50"></text></g><g><title>[unknown] (54 samples, 1.85%)</title><rect x="94.9008%" y="677" width="1.8480%" height="15" fill="rgb(241,163,25)"/><text x="95.1508%" y="687.50">[..</text></g><g><title>std::sys::unix::thread::guard::current (3 samples, 0.10%)</title><rect x="97.6728%" y="581" width="0.1027%" height="15" fill="rgb(217,214,3)"/><text x="97.9228%" y="591.50"></text></g><g><title>__pthread_getattr_np (3 samples, 0.10%)</title><rect x="97.6728%" y="565" width="0.1027%" height="15" fill="rgb(240,86,28)"/><text x="97.9228%" y="575.50"></text></g><g><title>malloc (3 samples, 0.10%)</title><rect x="97.6728%" y="549" width="0.1027%" height="15" fill="rgb(215,47,9)"/><text x="97.9228%" y="559.50"></text></g><g><title>imalloc (3 samples, 0.10%)</title><rect x="97.6728%" y="533" width="0.1027%" height="15" fill="rgb(252,25,45)"/><text x="97.9228%" y="543.50"></text></g><g><title>__pthread_cond_wait (7 samples, 0.24%)</title><rect x="97.8439%" y="549" width="0.2396%" height="15" fill="rgb(251,164,9)"/><text x="98.0939%" y="559.50"></text></g><g><title>jobserver::HelperState::for_each_request (8 samples, 0.27%)</title><rect x="97.8439%" y="565" width="0.2738%" height="15" fill="rgb(233,194,0)"/><text x="98.0939%" y="575.50"></text></g><g><title>rustc_codegen_ssa::back::write::execute_work_item (4 samples, 0.14%)</title><rect x="98.1177%" y="565" width="0.1369%" height="15" fill="rgb(249,111,24)"/><text x="98.3677%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (24 samples, 0.82%)</title><rect x="97.6386%" y="629" width="0.8214%" height="15" fill="rgb(250,223,3)"/><text x="97.8886%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (24 samples, 0.82%)</title><rect x="97.6386%" y="613" width="0.8214%" height="15" fill="rgb(236,178,37)"/><text x="97.8886%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (24 samples, 0.82%)</title><rect x="97.6386%" y="597" width="0.8214%" height="15" fill="rgb(241,158,50)"/><text x="97.8886%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20 samples, 0.68%)</title><rect x="97.7755%" y="581" width="0.6845%" height="15" fill="rgb(213,121,41)"/><text x="98.0255%" y="591.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (6 samples, 0.21%)</title><rect x="98.2546%" y="565" width="0.2053%" height="15" fill="rgb(240,92,3)"/><text x="98.5046%" y="575.50"></text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (6 samples, 0.21%)</title><rect x="98.2546%" y="549" width="0.2053%" height="15" fill="rgb(205,123,3)"/><text x="98.5046%" y="559.50"></text></g><g><title>std::thread::park (6 samples, 0.21%)</title><rect x="98.2546%" y="533" width="0.2053%" height="15" fill="rgb(205,97,47)"/><text x="98.5046%" y="543.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (6 samples, 0.21%)</title><rect x="98.2546%" y="517" width="0.2053%" height="15" fill="rgb(247,152,14)"/><text x="98.5046%" y="527.50"></text></g><g><title>std::sys::unix::futex::futex_wait (6 samples, 0.21%)</title><rect x="98.2546%" y="501" width="0.2053%" height="15" fill="rgb(248,195,53)"/><text x="98.5046%" y="511.50"></text></g><g><title>syscall (6 samples, 0.21%)</title><rect x="98.2546%" y="485" width="0.2053%" height="15" fill="rgb(226,201,16)"/><text x="98.5046%" y="495.50"></text></g><g><title>__GI___clone (55 samples, 1.88%)</title><rect x="96.7488%" y="677" width="1.8823%" height="15" fill="rgb(205,98,0)"/><text x="96.9988%" y="687.50">_..</text></g><g><title>start_thread (30 samples, 1.03%)</title><rect x="97.6044%" y="661" width="1.0267%" height="15" fill="rgb(214,191,48)"/><text x="97.8544%" y="671.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (29 samples, 0.99%)</title><rect x="97.6386%" y="645" width="0.9925%" height="15" fill="rgb(237,112,39)"/><text x="97.8886%" y="655.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (4 samples, 0.14%)</title><rect x="98.4942%" y="629" width="0.1369%" height="15" fill="rgb(247,203,27)"/><text x="98.7442%" y="639.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (4 samples, 0.14%)</title><rect x="98.4942%" y="613" width="0.1369%" height="15" fill="rgb(235,124,28)"/><text x="98.7442%" y="623.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (4 samples, 0.14%)</title><rect x="98.4942%" y="597" width="0.1369%" height="15" fill="rgb(208,207,46)"/><text x="98.7442%" y="607.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (4 samples, 0.14%)</title><rect x="98.4942%" y="581" width="0.1369%" height="15" fill="rgb(234,176,4)"/><text x="98.7442%" y="591.50"></text></g><g><title>std::sys::unix::os::page_size (4 samples, 0.14%)</title><rect x="98.4942%" y="565" width="0.1369%" height="15" fill="rgb(230,133,28)"/><text x="98.7442%" y="575.50"></text></g><g><title>__GI___sysconf (4 samples, 0.14%)</title><rect x="98.4942%" y="549" width="0.1369%" height="15" fill="rgb(211,137,40)"/><text x="98.7442%" y="559.50"></text></g><g><title>_dl_start_user (5 samples, 0.17%)</title><rect x="98.6311%" y="677" width="0.1711%" height="15" fill="rgb(254,35,13)"/><text x="98.8811%" y="687.50"></text></g><g><title>_dl_init (5 samples, 0.17%)</title><rect x="98.6311%" y="661" width="0.1711%" height="15" fill="rgb(225,49,51)"/><text x="98.8811%" y="671.50"></text></g><g><title>call_init.part.0 (5 samples, 0.17%)</title><rect x="98.6311%" y="645" width="0.1711%" height="15" fill="rgb(251,10,15)"/><text x="98.8811%" y="655.50"></text></g><g><title>_dl_map_object_deps (4 samples, 0.14%)</title><rect x="98.9733%" y="613" width="0.1369%" height="15" fill="rgb(228,207,15)"/><text x="99.2233%" y="623.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.14%)</title><rect x="98.9733%" y="597" width="0.1369%" height="15" fill="rgb(241,99,19)"/><text x="99.2233%" y="607.50"></text></g><g><title>openaux (4 samples, 0.14%)</title><rect x="98.9733%" y="581" width="0.1369%" height="15" fill="rgb(207,104,49)"/><text x="99.2233%" y="591.50"></text></g><g><title>_dl_map_object (4 samples, 0.14%)</title><rect x="98.9733%" y="565" width="0.1369%" height="15" fill="rgb(234,99,18)"/><text x="99.2233%" y="575.50"></text></g><g><title>all (2,922 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(213,191,49)"/><text x="0.2500%" y="719.50"></text></g><g><title>rustc (156 samples, 5.34%)</title><rect x="94.6612%" y="693" width="5.3388%" height="15" fill="rgb(210,226,19)"/><text x="94.9112%" y="703.50">rustc</text></g><g><title>_start (35 samples, 1.20%)</title><rect x="98.8022%" y="677" width="1.1978%" height="15" fill="rgb(229,97,18)"/><text x="99.0522%" y="687.50"></text></g><g><title>_dl_start (30 samples, 1.03%)</title><rect x="98.9733%" y="661" width="1.0267%" height="15" fill="rgb(211,167,15)"/><text x="99.2233%" y="671.50"></text></g><g><title>_dl_sysdep_start (30 samples, 1.03%)</title><rect x="98.9733%" y="645" width="1.0267%" height="15" fill="rgb(210,169,34)"/><text x="99.2233%" y="655.50"></text></g><g><title>dl_main (30 samples, 1.03%)</title><rect x="98.9733%" y="629" width="1.0267%" height="15" fill="rgb(241,121,31)"/><text x="99.2233%" y="639.50"></text></g><g><title>_dl_relocate_object (26 samples, 0.89%)</title><rect x="99.1102%" y="613" width="0.8898%" height="15" fill="rgb(232,40,11)"/><text x="99.3602%" y="623.50"></text></g><g><title>_dl_lookup_symbol_x (10 samples, 0.34%)</title><rect x="99.6578%" y="597" width="0.3422%" height="15" fill="rgb(205,86,26)"/><text x="99.9078%" y="607.50"></text></g><g><title>do_lookup_x (4 samples, 0.14%)</title><rect x="99.8631%" y="581" width="0.1369%" height="15" fill="rgb(231,126,28)"/><text x="100.1131%" y="591.50"></text></g></svg></svg>