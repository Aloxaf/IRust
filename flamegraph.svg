<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;crossterm::event::INTERNAL_EVENT_READER as core::ops::deref::Deref&gt;::deref::__stability::LAZY (5 samples, 0.12%)</title><rect x="0.0000%" y="645" width="0.1194%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="655.50"></text></g><g><title>[anon] (9 samples, 0.21%)</title><rect x="0.1672%" y="645" width="0.2150%" height="15" fill="rgb(217,0,24)"/><text x="0.4172%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.17%)</title><rect x="0.4060%" y="645" width="0.1672%" height="15" fill="rgb(221,193,54)"/><text x="0.6560%" y="655.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.29%)</title><rect x="0.8120%" y="229" width="0.2866%" height="15" fill="rgb(248,212,6)"/><text x="1.0620%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::new (17 samples, 0.41%)</title><rect x="0.8120%" y="357" width="0.4060%" height="15" fill="rgb(208,68,35)"/><text x="1.0620%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::with_capacity (17 samples, 0.41%)</title><rect x="0.8120%" y="341" width="0.4060%" height="15" fill="rgb(232,128,0)"/><text x="1.0620%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (17 samples, 0.41%)</title><rect x="0.8120%" y="325" width="0.4060%" height="15" fill="rgb(207,160,47)"/><text x="1.0620%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.41%)</title><rect x="0.8120%" y="309" width="0.4060%" height="15" fill="rgb(228,23,34)"/><text x="1.0620%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.41%)</title><rect x="0.8120%" y="293" width="0.4060%" height="15" fill="rgb(218,30,26)"/><text x="1.0620%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (17 samples, 0.41%)</title><rect x="0.8120%" y="277" width="0.4060%" height="15" fill="rgb(220,122,19)"/><text x="1.0620%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.41%)</title><rect x="0.8120%" y="261" width="0.4060%" height="15" fill="rgb(250,228,42)"/><text x="1.0620%" y="271.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.41%)</title><rect x="0.8120%" y="245" width="0.4060%" height="15" fill="rgb(240,193,28)"/><text x="1.0620%" y="255.50"></text></g><g><title>__GI___libc_free (5 samples, 0.12%)</title><rect x="1.2419%" y="277" width="0.1194%" height="15" fill="rgb(216,20,37)"/><text x="1.4919%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.21%)</title><rect x="1.2419%" y="357" width="0.2150%" height="15" fill="rgb(206,188,39)"/><text x="1.4919%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.21%)</title><rect x="1.2419%" y="341" width="0.2150%" height="15" fill="rgb(217,207,13)"/><text x="1.4919%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.21%)</title><rect x="1.2419%" y="325" width="0.2150%" height="15" fill="rgb(231,73,38)"/><text x="1.4919%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (9 samples, 0.21%)</title><rect x="1.2419%" y="309" width="0.2150%" height="15" fill="rgb(225,20,46)"/><text x="1.4919%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.21%)</title><rect x="1.2419%" y="293" width="0.2150%" height="15" fill="rgb(210,31,41)"/><text x="1.4919%" y="303.50"></text></g><g><title>&lt;crossterm::event::source::unix::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (7 samples, 0.17%)</title><rect x="1.4808%" y="341" width="0.1672%" height="15" fill="rgb(221,200,47)"/><text x="1.7308%" y="351.50"></text></g><g><title>crossterm::event::read (48 samples, 1.15%)</title><rect x="0.6687%" y="405" width="1.1464%" height="15" fill="rgb(226,26,5)"/><text x="0.9187%" y="415.50"></text></g><g><title>crossterm::event::read_internal (44 samples, 1.05%)</title><rect x="0.7643%" y="389" width="1.0509%" height="15" fill="rgb(249,33,26)"/><text x="1.0143%" y="399.50"></text></g><g><title>crossterm::event::read::InternalEventReader::read (43 samples, 1.03%)</title><rect x="0.7882%" y="373" width="1.0270%" height="15" fill="rgb(235,183,28)"/><text x="1.0382%" y="383.50"></text></g><g><title>crossterm::event::read::InternalEventReader::poll (15 samples, 0.36%)</title><rect x="1.4569%" y="357" width="0.3583%" height="15" fill="rgb(221,5,38)"/><text x="1.7069%" y="367.50"></text></g><g><title>crossterm::event::timeout::PollTimeout::new (6 samples, 0.14%)</title><rect x="1.6718%" y="341" width="0.1433%" height="15" fill="rgb(247,18,42)"/><text x="1.9218%" y="351.50"></text></g><g><title>std::time::Instant::now (6 samples, 0.14%)</title><rect x="1.6718%" y="325" width="0.1433%" height="15" fill="rgb(241,131,45)"/><text x="1.9218%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (6 samples, 0.14%)</title><rect x="1.6718%" y="309" width="0.1433%" height="15" fill="rgb(249,31,29)"/><text x="1.9218%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::now (6 samples, 0.14%)</title><rect x="1.6718%" y="293" width="0.1433%" height="15" fill="rgb(225,111,53)"/><text x="1.9218%" y="303.50"></text></g><g><title>__clock_gettime_2 (6 samples, 0.14%)</title><rect x="1.6718%" y="277" width="0.1433%" height="15" fill="rgb(238,160,17)"/><text x="1.9218%" y="287.50"></text></g><g><title>std::sync::mpsc::blocking::SignalToken::signal (96 samples, 2.29%)</title><rect x="1.8390%" y="373" width="2.2928%" height="15" fill="rgb(214,148,48)"/><text x="2.0890%" y="383.50">s..</text></g><g><title>std::thread::Thread::unpark (94 samples, 2.25%)</title><rect x="1.8868%" y="357" width="2.2450%" height="15" fill="rgb(232,36,49)"/><text x="2.1368%" y="367.50">s..</text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (94 samples, 2.25%)</title><rect x="1.8868%" y="341" width="2.2450%" height="15" fill="rgb(209,103,24)"/><text x="2.1368%" y="351.50">s..</text></g><g><title>std::sys::unix::futex::futex_wake (93 samples, 2.22%)</title><rect x="1.9107%" y="325" width="2.2212%" height="15" fill="rgb(229,88,8)"/><text x="2.1607%" y="335.50">s..</text></g><g><title>syscall (93 samples, 2.22%)</title><rect x="1.9107%" y="309" width="2.2212%" height="15" fill="rgb(213,181,19)"/><text x="2.1607%" y="319.50">s..</text></g><g><title>std::sync::mpsc::Sender&lt;T&gt;::send (100 samples, 2.39%)</title><rect x="1.8151%" y="405" width="2.3883%" height="15" fill="rgb(254,191,54)"/><text x="2.0651%" y="415.50">st..</text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::send (99 samples, 2.36%)</title><rect x="1.8390%" y="389" width="2.3645%" height="15" fill="rgb(241,83,37)"/><text x="2.0890%" y="399.50">st..</text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (144 samples, 3.44%)</title><rect x="4.2274%" y="389" width="3.4392%" height="15" fill="rgb(233,36,39)"/><text x="4.4774%" y="399.50">std..</text></g><g><title>std::sys::unix::futex::futex_wait (140 samples, 3.34%)</title><rect x="4.3229%" y="373" width="3.3437%" height="15" fill="rgb(226,3,54)"/><text x="4.5729%" y="383.50">std..</text></g><g><title>syscall (140 samples, 3.34%)</title><rect x="4.3229%" y="357" width="3.3437%" height="15" fill="rgb(245,192,40)"/><text x="4.5729%" y="367.50">sys..</text></g><g><title>__GI___clone (299 samples, 7.14%)</title><rect x="0.5732%" y="645" width="7.1412%" height="15" fill="rgb(238,167,29)"/><text x="0.8232%" y="655.50">__GI___clo..</text></g><g><title>start_thread (299 samples, 7.14%)</title><rect x="0.5732%" y="629" width="7.1412%" height="15" fill="rgb(232,182,51)"/><text x="0.8232%" y="639.50">start_thre..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (299 samples, 7.14%)</title><rect x="0.5732%" y="613" width="7.1412%" height="15" fill="rgb(231,60,39)"/><text x="0.8232%" y="623.50">std::sys::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (299 samples, 7.14%)</title><rect x="0.5732%" y="597" width="7.1412%" height="15" fill="rgb(208,69,12)"/><text x="0.8232%" y="607.50">&lt;alloc::bo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (299 samples, 7.14%)</title><rect x="0.5732%" y="581" width="7.1412%" height="15" fill="rgb(235,93,37)"/><text x="0.8232%" y="591.50">&lt;alloc::bo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (299 samples, 7.14%)</title><rect x="0.5732%" y="565" width="7.1412%" height="15" fill="rgb(213,116,39)"/><text x="0.8232%" y="575.50">core::ops:..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (299 samples, 7.14%)</title><rect x="0.5732%" y="549" width="7.1412%" height="15" fill="rgb(222,207,29)"/><text x="0.8232%" y="559.50">std::threa..</text></g><g><title>std::panic::catch_unwind (299 samples, 7.14%)</title><rect x="0.5732%" y="533" width="7.1412%" height="15" fill="rgb(206,96,30)"/><text x="0.8232%" y="543.50">std::panic..</text></g><g><title>std::panicking::try (299 samples, 7.14%)</title><rect x="0.5732%" y="517" width="7.1412%" height="15" fill="rgb(218,138,4)"/><text x="0.8232%" y="527.50">std::panic..</text></g><g><title>std::panicking::try::do_call (299 samples, 7.14%)</title><rect x="0.5732%" y="501" width="7.1412%" height="15" fill="rgb(250,191,14)"/><text x="0.8232%" y="511.50">std::panic..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (299 samples, 7.14%)</title><rect x="0.5732%" y="485" width="7.1412%" height="15" fill="rgb(239,60,40)"/><text x="0.8232%" y="495.50">&lt;std::pani..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (299 samples, 7.14%)</title><rect x="0.5732%" y="469" width="7.1412%" height="15" fill="rgb(206,27,48)"/><text x="0.8232%" y="479.50">std::threa..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (299 samples, 7.14%)</title><rect x="0.5732%" y="453" width="7.1412%" height="15" fill="rgb(225,35,8)"/><text x="0.8232%" y="463.50">std::sys_c..</text></g><g><title>irust::irust::input_read::{{closure}} (299 samples, 7.14%)</title><rect x="0.5732%" y="437" width="7.1412%" height="15" fill="rgb(250,213,24)"/><text x="0.8232%" y="447.50">irust::iru..</text></g><g><title>irust::irust::input_read::{{closure}}::{{closure}} (299 samples, 7.14%)</title><rect x="0.5732%" y="421" width="7.1412%" height="15" fill="rgb(247,123,22)"/><text x="0.8232%" y="431.50">irust::iru..</text></g><g><title>std::thread::park (147 samples, 3.51%)</title><rect x="4.2035%" y="405" width="3.5109%" height="15" fill="rgb(231,138,38)"/><text x="4.4535%" y="415.50">std..</text></g><g><title>Input (324 samples, 7.74%)</title><rect x="0.0000%" y="661" width="7.7382%" height="15" fill="rgb(231,145,46)"/><text x="0.2500%" y="671.50">Input</text></g><g><title>[unknown] (10 samples, 0.24%)</title><rect x="7.7860%" y="645" width="0.2388%" height="15" fill="rgb(251,118,11)"/><text x="8.0360%" y="655.50"></text></g><g><title>__GI___clone (9 samples, 0.21%)</title><rect x="8.0248%" y="645" width="0.2150%" height="15" fill="rgb(217,147,25)"/><text x="8.2748%" y="655.50"></text></g><g><title>start_thread (9 samples, 0.21%)</title><rect x="8.0248%" y="629" width="0.2150%" height="15" fill="rgb(247,81,37)"/><text x="8.2748%" y="639.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 0.21%)</title><rect x="8.0248%" y="613" width="0.2150%" height="15" fill="rgb(209,12,38)"/><text x="8.2748%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.21%)</title><rect x="8.0248%" y="597" width="0.2150%" height="15" fill="rgb(227,1,9)"/><text x="8.2748%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.21%)</title><rect x="8.0248%" y="581" width="0.2150%" height="15" fill="rgb(248,47,43)"/><text x="8.2748%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (9 samples, 0.21%)</title><rect x="8.0248%" y="565" width="0.2150%" height="15" fill="rgb(221,10,30)"/><text x="8.2748%" y="575.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9 samples, 0.21%)</title><rect x="8.0248%" y="549" width="0.2150%" height="15" fill="rgb(210,229,1)"/><text x="8.2748%" y="559.50"></text></g><g><title>jobserver::HelperState::for_each_request (8 samples, 0.19%)</title><rect x="8.0487%" y="533" width="0.1911%" height="15" fill="rgb(222,148,37)"/><text x="8.2987%" y="543.50"></text></g><g><title>__pthread_cond_wait (8 samples, 0.19%)</title><rect x="8.0487%" y="517" width="0.1911%" height="15" fill="rgb(234,67,33)"/><text x="8.2987%" y="527.50"></text></g><g><title>[libc-2.32.so] (7 samples, 0.17%)</title><rect x="8.0726%" y="501" width="0.1672%" height="15" fill="rgb(247,98,35)"/><text x="8.3226%" y="511.50"></text></g><g><title>jobserver::imp::sigusr1_handler (7 samples, 0.17%)</title><rect x="8.0726%" y="485" width="0.1672%" height="15" fill="rgb(247,138,52)"/><text x="8.3226%" y="495.50"></text></g><g><title>PEM_X509_INFO_read_bio (5 samples, 0.12%)</title><rect x="8.3831%" y="245" width="0.1194%" height="15" fill="rgb(213,79,30)"/><text x="8.6331%" y="255.50"></text></g><g><title>__libc_start_main (9 samples, 0.21%)</title><rect x="8.3114%" y="629" width="0.2150%" height="15" fill="rgb(246,177,23)"/><text x="8.5614%" y="639.50"></text></g><g><title>main (6 samples, 0.14%)</title><rect x="8.3831%" y="613" width="0.1433%" height="15" fill="rgb(230,62,27)"/><text x="8.6331%" y="623.50"></text></g><g><title>std::rt::lang_start_internal (6 samples, 0.14%)</title><rect x="8.3831%" y="597" width="0.1433%" height="15" fill="rgb(216,154,8)"/><text x="8.6331%" y="607.50"></text></g><g><title>std::panic::catch_unwind (6 samples, 0.14%)</title><rect x="8.3831%" y="581" width="0.1433%" height="15" fill="rgb(244,35,45)"/><text x="8.6331%" y="591.50"></text></g><g><title>std::panicking::try (6 samples, 0.14%)</title><rect x="8.3831%" y="565" width="0.1433%" height="15" fill="rgb(251,115,12)"/><text x="8.6331%" y="575.50"></text></g><g><title>std::panicking::try::do_call (6 samples, 0.14%)</title><rect x="8.3831%" y="549" width="0.1433%" height="15" fill="rgb(240,54,50)"/><text x="8.6331%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6 samples, 0.14%)</title><rect x="8.3831%" y="533" width="0.1433%" height="15" fill="rgb(233,84,52)"/><text x="8.6331%" y="543.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (6 samples, 0.14%)</title><rect x="8.3831%" y="517" width="0.1433%" height="15" fill="rgb(207,117,47)"/><text x="8.6331%" y="527.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.14%)</title><rect x="8.3831%" y="501" width="0.1433%" height="15" fill="rgb(249,43,39)"/><text x="8.6331%" y="511.50"></text></g><g><title>cargo::main (6 samples, 0.14%)</title><rect x="8.3831%" y="485" width="0.1433%" height="15" fill="rgb(209,38,44)"/><text x="8.6331%" y="495.50"></text></g><g><title>cargo::cli::main (6 samples, 0.14%)</title><rect x="8.3831%" y="469" width="0.1433%" height="15" fill="rgb(236,212,23)"/><text x="8.6331%" y="479.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (6 samples, 0.14%)</title><rect x="8.3831%" y="453" width="0.1433%" height="15" fill="rgb(242,79,21)"/><text x="8.6331%" y="463.50"></text></g><g><title>cargo::ops::registry::http_proxy (6 samples, 0.14%)</title><rect x="8.3831%" y="437" width="0.1433%" height="15" fill="rgb(211,96,35)"/><text x="8.6331%" y="447.50"></text></g><g><title>git2::config::Config::open_default (6 samples, 0.14%)</title><rect x="8.3831%" y="421" width="0.1433%" height="15" fill="rgb(253,215,40)"/><text x="8.6331%" y="431.50"></text></g><g><title>libgit2_sys::init (6 samples, 0.14%)</title><rect x="8.3831%" y="405" width="0.1433%" height="15" fill="rgb(211,81,21)"/><text x="8.6331%" y="415.50"></text></g><g><title>std::sync::once::Once::call_inner (6 samples, 0.14%)</title><rect x="8.3831%" y="389" width="0.1433%" height="15" fill="rgb(208,190,38)"/><text x="8.6331%" y="399.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (6 samples, 0.14%)</title><rect x="8.3831%" y="373" width="0.1433%" height="15" fill="rgb(235,213,38)"/><text x="8.6331%" y="383.50"></text></g><g><title>git_libgit2_init (6 samples, 0.14%)</title><rect x="8.3831%" y="357" width="0.1433%" height="15" fill="rgb(237,122,38)"/><text x="8.6331%" y="367.50"></text></g><g><title>__pthread_once_slow (6 samples, 0.14%)</title><rect x="8.3831%" y="341" width="0.1433%" height="15" fill="rgb(244,218,35)"/><text x="8.6331%" y="351.50"></text></g><g><title>init_once (6 samples, 0.14%)</title><rect x="8.3831%" y="325" width="0.1433%" height="15" fill="rgb(240,68,47)"/><text x="8.6331%" y="335.50"></text></g><g><title>git_openssl_stream_global_init (6 samples, 0.14%)</title><rect x="8.3831%" y="309" width="0.1433%" height="15" fill="rgb(210,16,53)"/><text x="8.6331%" y="319.50"></text></g><g><title>X509_STORE_set_default_paths (6 samples, 0.14%)</title><rect x="8.3831%" y="293" width="0.1433%" height="15" fill="rgb(235,124,12)"/><text x="8.6331%" y="303.50"></text></g><g><title>by_file_ctrl (6 samples, 0.14%)</title><rect x="8.3831%" y="277" width="0.1433%" height="15" fill="rgb(224,169,11)"/><text x="8.6331%" y="287.50"></text></g><g><title>X509_load_cert_crl_file (6 samples, 0.14%)</title><rect x="8.3831%" y="261" width="0.1433%" height="15" fill="rgb(250,166,2)"/><text x="8.6331%" y="271.50"></text></g><g><title>cargo (41 samples, 0.98%)</title><rect x="7.7621%" y="661" width="0.9792%" height="15" fill="rgb(242,216,29)"/><text x="8.0121%" y="671.50"></text></g><g><title>_start (21 samples, 0.50%)</title><rect x="8.2398%" y="645" width="0.5016%" height="15" fill="rgb(230,116,27)"/><text x="8.4898%" y="655.50"></text></g><g><title>_dl_start (9 samples, 0.21%)</title><rect x="8.5264%" y="629" width="0.2150%" height="15" fill="rgb(228,99,48)"/><text x="8.7764%" y="639.50"></text></g><g><title>_dl_sysdep_start (9 samples, 0.21%)</title><rect x="8.5264%" y="613" width="0.2150%" height="15" fill="rgb(253,11,6)"/><text x="8.7764%" y="623.50"></text></g><g><title>dl_main (9 samples, 0.21%)</title><rect x="8.5264%" y="597" width="0.2150%" height="15" fill="rgb(247,143,39)"/><text x="8.7764%" y="607.50"></text></g><g><title>_dl_relocate_object (7 samples, 0.17%)</title><rect x="8.5742%" y="581" width="0.1672%" height="15" fill="rgb(236,97,10)"/><text x="8.8242%" y="591.50"></text></g><g><title>__libc_vfork (13 samples, 0.31%)</title><rect x="8.8369%" y="533" width="0.3105%" height="15" fill="rgb(233,208,19)"/><text x="9.0869%" y="543.50"></text></g><g><title>[collect2] (14 samples, 0.33%)</title><rect x="8.8369%" y="549" width="0.3344%" height="15" fill="rgb(216,164,2)"/><text x="9.0869%" y="559.50"></text></g><g><title>collect2 (15 samples, 0.36%)</title><rect x="8.8369%" y="661" width="0.3583%" height="15" fill="rgb(220,129,5)"/><text x="9.0869%" y="671.50"></text></g><g><title>[collect2] (15 samples, 0.36%)</title><rect x="8.8369%" y="645" width="0.3583%" height="15" fill="rgb(242,17,10)"/><text x="9.0869%" y="655.50"></text></g><g><title>__libc_start_main (15 samples, 0.36%)</title><rect x="8.8369%" y="629" width="0.3583%" height="15" fill="rgb(242,107,0)"/><text x="9.0869%" y="639.50"></text></g><g><title>[collect2] (15 samples, 0.36%)</title><rect x="8.8369%" y="613" width="0.3583%" height="15" fill="rgb(251,28,31)"/><text x="9.0869%" y="623.50"></text></g><g><title>[collect2] (15 samples, 0.36%)</title><rect x="8.8369%" y="597" width="0.3583%" height="15" fill="rgb(233,223,10)"/><text x="9.0869%" y="607.50"></text></g><g><title>[collect2] (15 samples, 0.36%)</title><rect x="8.8369%" y="581" width="0.3583%" height="15" fill="rgb(215,21,27)"/><text x="9.0869%" y="591.50"></text></g><g><title>[collect2] (15 samples, 0.36%)</title><rect x="8.8369%" y="565" width="0.3583%" height="15" fill="rgb(232,23,21)"/><text x="9.0869%" y="575.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.19%)</title><rect x="9.3623%" y="629" width="0.1911%" height="15" fill="rgb(244,5,23)"/><text x="9.6123%" y="639.50"></text></g><g><title>[[heap]] (26 samples, 0.62%)</title><rect x="9.1951%" y="645" width="0.6210%" height="15" fill="rgb(226,81,46)"/><text x="9.4451%" y="655.50"></text></g><g><title>std::io::Write::write_fmt (5 samples, 0.12%)</title><rect x="9.8877%" y="613" width="0.1194%" height="15" fill="rgb(247,70,30)"/><text x="10.1377%" y="623.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (21 samples, 0.50%)</title><rect x="9.8161%" y="629" width="0.5016%" height="15" fill="rgb(212,68,19)"/><text x="10.0661%" y="639.50"></text></g><g><title>std::io::stdio::Stdout::lock (13 samples, 0.31%)</title><rect x="10.0072%" y="613" width="0.3105%" height="15" fill="rgb(240,187,13)"/><text x="10.2572%" y="623.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (13 samples, 0.31%)</title><rect x="10.0072%" y="597" width="0.3105%" height="15" fill="rgb(223,113,26)"/><text x="10.2572%" y="607.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (13 samples, 0.31%)</title><rect x="10.0072%" y="581" width="0.3105%" height="15" fill="rgb(206,192,2)"/><text x="10.2572%" y="591.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.14%)</title><rect x="10.3893%" y="629" width="0.1433%" height="15" fill="rgb(241,108,4)"/><text x="10.6393%" y="639.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (8 samples, 0.19%)</title><rect x="10.5326%" y="629" width="0.1911%" height="15" fill="rgb(247,173,49)"/><text x="10.7826%" y="639.50"></text></g><g><title>core::fmt::Write::write_char (8 samples, 0.19%)</title><rect x="11.2491%" y="629" width="0.1911%" height="15" fill="rgb(224,114,35)"/><text x="11.4991%" y="639.50"></text></g><g><title>core::fmt::write (9 samples, 0.21%)</title><rect x="11.4641%" y="629" width="0.2150%" height="15" fill="rgb(245,159,27)"/><text x="11.7141%" y="639.50"></text></g><g><title>crossterm::style::ansi::&lt;impl core::fmt::Display for crossterm::style::types::colored::Colored&gt;::fmt (5 samples, 0.12%)</title><rect x="11.6790%" y="629" width="0.1194%" height="15" fill="rgb(245,172,44)"/><text x="11.9290%" y="639.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (8 samples, 0.19%)</title><rect x="12.0134%" y="629" width="0.1911%" height="15" fill="rgb(236,23,11)"/><text x="12.2634%" y="639.50"></text></g><g><title>[[stack]] (102 samples, 2.44%)</title><rect x="9.8161%" y="645" width="2.4361%" height="15" fill="rgb(205,117,38)"/><text x="10.0661%" y="655.50">[[..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (24 samples, 0.57%)</title><rect x="12.3955%" y="629" width="0.5732%" height="15" fill="rgb(237,72,25)"/><text x="12.6455%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (14 samples, 0.33%)</title><rect x="12.9687%" y="629" width="0.3344%" height="15" fill="rgb(244,70,9)"/><text x="13.2187%" y="639.50"></text></g><g><title>[irust] (49 samples, 1.17%)</title><rect x="12.2522%" y="645" width="1.1703%" height="15" fill="rgb(217,125,39)"/><text x="12.5022%" y="655.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (61 samples, 1.46%)</title><rect x="13.4464%" y="629" width="1.4569%" height="15" fill="rgb(235,36,10)"/><text x="13.6964%" y="639.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (8 samples, 0.19%)</title><rect x="14.9033%" y="629" width="0.1911%" height="15" fill="rgb(251,123,47)"/><text x="15.1533%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (68 samples, 1.62%)</title><rect x="15.1421%" y="629" width="1.6241%" height="15" fill="rgb(221,13,13)"/><text x="15.3921%" y="639.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.48%)</title><rect x="16.2885%" y="613" width="0.4777%" height="15" fill="rgb(238,131,9)"/><text x="16.5385%" y="623.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.48%)</title><rect x="16.2885%" y="597" width="0.4777%" height="15" fill="rgb(211,50,8)"/><text x="16.5385%" y="607.50"></text></g><g><title>std::memchr::memrchr (6 samples, 0.14%)</title><rect x="16.6229%" y="581" width="0.1433%" height="15" fill="rgb(245,182,24)"/><text x="16.8729%" y="591.50"></text></g><g><title>std::sys::unix::memchr::memrchr (6 samples, 0.14%)</title><rect x="16.6229%" y="565" width="0.1433%" height="15" fill="rgb(242,14,37)"/><text x="16.8729%" y="575.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (6 samples, 0.14%)</title><rect x="16.6229%" y="549" width="0.1433%" height="15" fill="rgb(246,228,12)"/><text x="16.8729%" y="559.50"></text></g><g><title>__GI___libc_free (11 samples, 0.26%)</title><rect x="16.7662%" y="629" width="0.2627%" height="15" fill="rgb(213,55,15)"/><text x="17.0162%" y="639.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.31%)</title><rect x="17.0289%" y="629" width="0.3105%" height="15" fill="rgb(209,9,3)"/><text x="17.2789%" y="639.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (8 samples, 0.19%)</title><rect x="17.4110%" y="629" width="0.1911%" height="15" fill="rgb(230,59,30)"/><text x="17.6610%" y="639.50"></text></g><g><title>__spawni_child (5 samples, 0.12%)</title><rect x="17.6976%" y="629" width="0.1194%" height="15" fill="rgb(209,121,21)"/><text x="17.9476%" y="639.50"></text></g><g><title>_int_free (24 samples, 0.57%)</title><rect x="17.8171%" y="629" width="0.5732%" height="15" fill="rgb(220,109,13)"/><text x="18.0671%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.14%)</title><rect x="18.4858%" y="629" width="0.1433%" height="15" fill="rgb(232,18,1)"/><text x="18.7358%" y="639.50"></text></g><g><title>core::fmt::Write::write_char (7 samples, 0.17%)</title><rect x="18.6769%" y="629" width="0.1672%" height="15" fill="rgb(215,41,42)"/><text x="18.9269%" y="639.50"></text></g><g><title>core::fmt::write (9 samples, 0.21%)</title><rect x="18.8679%" y="629" width="0.2150%" height="15" fill="rgb(224,123,36)"/><text x="19.1179%" y="639.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (11 samples, 0.26%)</title><rect x="19.2501%" y="597" width="0.2627%" height="15" fill="rgb(240,125,3)"/><text x="19.5001%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (11 samples, 0.26%)</title><rect x="19.2501%" y="581" width="0.2627%" height="15" fill="rgb(205,98,50)"/><text x="19.5001%" y="591.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (11 samples, 0.26%)</title><rect x="19.2501%" y="565" width="0.2627%" height="15" fill="rgb(205,185,37)"/><text x="19.5001%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (11 samples, 0.26%)</title><rect x="19.2501%" y="549" width="0.2627%" height="15" fill="rgb(238,207,15)"/><text x="19.5001%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11 samples, 0.26%)</title><rect x="19.2501%" y="533" width="0.2627%" height="15" fill="rgb(213,199,42)"/><text x="19.5001%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.26%)</title><rect x="19.2501%" y="517" width="0.2627%" height="15" fill="rgb(235,201,11)"/><text x="19.5001%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.24%)</title><rect x="19.2739%" y="501" width="0.2388%" height="15" fill="rgb(207,46,11)"/><text x="19.5239%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.24%)</title><rect x="19.2739%" y="485" width="0.2388%" height="15" fill="rgb(241,35,35)"/><text x="19.5239%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.24%)</title><rect x="19.2739%" y="469" width="0.2388%" height="15" fill="rgb(243,32,47)"/><text x="19.5239%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.24%)</title><rect x="19.2739%" y="453" width="0.2388%" height="15" fill="rgb(247,202,23)"/><text x="19.5239%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.24%)</title><rect x="19.2739%" y="437" width="0.2388%" height="15" fill="rgb(219,102,11)"/><text x="19.5239%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.24%)</title><rect x="19.2739%" y="421" width="0.2388%" height="15" fill="rgb(243,110,44)"/><text x="19.5239%" y="431.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.24%)</title><rect x="19.2739%" y="405" width="0.2388%" height="15" fill="rgb(222,74,54)"/><text x="19.5239%" y="415.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input (15 samples, 0.36%)</title><rect x="19.2501%" y="629" width="0.3583%" height="15" fill="rgb(216,99,12)"/><text x="19.5001%" y="639.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner (15 samples, 0.36%)</title><rect x="19.2501%" y="613" width="0.3583%" height="15" fill="rgb(226,22,26)"/><text x="19.5001%" y="623.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (14 samples, 0.33%)</title><rect x="19.7277%" y="629" width="0.3344%" height="15" fill="rgb(217,163,10)"/><text x="19.9777%" y="639.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (8 samples, 0.19%)</title><rect x="20.0621%" y="629" width="0.1911%" height="15" fill="rgb(213,25,53)"/><text x="20.3121%" y="639.50"></text></g><g><title>[unknown] (289 samples, 6.90%)</title><rect x="13.4225%" y="645" width="6.9023%" height="15" fill="rgb(252,105,26)"/><text x="13.6725%" y="655.50">[unknown]</text></g><g><title>__GI___clone (32 samples, 0.76%)</title><rect x="20.3248%" y="645" width="0.7643%" height="15" fill="rgb(220,39,43)"/><text x="20.5748%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.12%)</title><rect x="21.2563%" y="453" width="0.1194%" height="15" fill="rgb(229,68,48)"/><text x="21.5063%" y="463.50"></text></g><g><title>&lt;irust::irust::IRust as core::ops::drop::Drop&gt;::drop (5 samples, 0.12%)</title><rect x="21.2563%" y="437" width="0.1194%" height="15" fill="rgb(252,8,32)"/><text x="21.5063%" y="447.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::exit (5 samples, 0.12%)</title><rect x="21.2563%" y="421" width="0.1194%" height="15" fill="rgb(223,20,43)"/><text x="21.5063%" y="431.50"></text></g><g><title>irust::irust::history::History::save (5 samples, 0.12%)</title><rect x="21.2563%" y="405" width="0.1194%" height="15" fill="rgb(229,81,49)"/><text x="21.5063%" y="415.50"></text></g><g><title>irust::irust::cursor::Cursor::new (7 samples, 0.17%)</title><rect x="21.3757%" y="437" width="0.1672%" height="15" fill="rgb(236,28,36)"/><text x="21.6257%" y="447.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::get_current_pos (7 samples, 0.17%)</title><rect x="21.3757%" y="421" width="0.1672%" height="15" fill="rgb(249,185,26)"/><text x="21.6257%" y="431.50"></text></g><g><title>crossterm::cursor::sys::unix::position (7 samples, 0.17%)</title><rect x="21.3757%" y="405" width="0.1672%" height="15" fill="rgb(249,174,33)"/><text x="21.6257%" y="415.50"></text></g><g><title>crossterm::cursor::sys::unix::read_position (7 samples, 0.17%)</title><rect x="21.3757%" y="389" width="0.1672%" height="15" fill="rgb(233,201,37)"/><text x="21.6257%" y="399.50"></text></g><g><title>crossterm::cursor::sys::unix::read_position_raw (7 samples, 0.17%)</title><rect x="21.3757%" y="373" width="0.1672%" height="15" fill="rgb(221,78,26)"/><text x="21.6257%" y="383.50"></text></g><g><title>crossterm::event::poll_internal (7 samples, 0.17%)</title><rect x="21.3757%" y="357" width="0.1672%" height="15" fill="rgb(250,127,30)"/><text x="21.6257%" y="367.50"></text></g><g><title>crossterm::event::read::InternalEventReader::poll (7 samples, 0.17%)</title><rect x="21.3757%" y="341" width="0.1672%" height="15" fill="rgb(230,49,44)"/><text x="21.6257%" y="351.50"></text></g><g><title>&lt;crossterm::event::source::unix::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (7 samples, 0.17%)</title><rect x="21.3757%" y="325" width="0.1672%" height="15" fill="rgb(229,67,23)"/><text x="21.6257%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (6 samples, 0.14%)</title><rect x="21.3996%" y="309" width="0.1433%" height="15" fill="rgb(249,83,47)"/><text x="21.6496%" y="319.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (6 samples, 0.14%)</title><rect x="21.3996%" y="293" width="0.1433%" height="15" fill="rgb(215,43,3)"/><text x="21.6496%" y="303.50"></text></g><g><title>epoll_wait (6 samples, 0.14%)</title><rect x="21.3996%" y="277" width="0.1433%" height="15" fill="rgb(238,154,13)"/><text x="21.6496%" y="287.50"></text></g><g><title>irust::irust::IRust::new (10 samples, 0.24%)</title><rect x="21.3757%" y="453" width="0.2388%" height="15" fill="rgb(219,56,2)"/><text x="21.6257%" y="463.50"></text></g><g><title>&lt;irust::irust::buffer::Buffer as alloc::string::ToString&gt;::to_string (12 samples, 0.29%)</title><rect x="21.6862%" y="405" width="0.2866%" height="15" fill="rgb(233,0,4)"/><text x="21.9362%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 0.29%)</title><rect x="21.6862%" y="389" width="0.2866%" height="15" fill="rgb(235,30,7)"/><text x="21.9362%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (12 samples, 0.29%)</title><rect x="21.6862%" y="373" width="0.2866%" height="15" fill="rgb(250,79,13)"/><text x="21.9362%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (12 samples, 0.29%)</title><rect x="21.6862%" y="357" width="0.2866%" height="15" fill="rgb(211,146,34)"/><text x="21.9362%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (12 samples, 0.29%)</title><rect x="21.6862%" y="341" width="0.2866%" height="15" fill="rgb(228,22,38)"/><text x="21.9362%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.19%)</title><rect x="21.7817%" y="325" width="0.1911%" height="15" fill="rgb(235,168,5)"/><text x="22.0317%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.19%)</title><rect x="21.7817%" y="309" width="0.1911%" height="15" fill="rgb(221,155,16)"/><text x="22.0317%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.19%)</title><rect x="21.7817%" y="293" width="0.1911%" height="15" fill="rgb(215,215,53)"/><text x="22.0317%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.19%)</title><rect x="21.7817%" y="277" width="0.1911%" height="15" fill="rgb(223,4,10)"/><text x="22.0317%" y="287.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (5 samples, 0.12%)</title><rect x="21.8534%" y="261" width="0.1194%" height="15" fill="rgb(234,103,6)"/><text x="22.1034%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (5 samples, 0.12%)</title><rect x="21.8534%" y="245" width="0.1194%" height="15" fill="rgb(227,97,0)"/><text x="22.1034%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (5 samples, 0.12%)</title><rect x="21.8534%" y="229" width="0.1194%" height="15" fill="rgb(234,150,53)"/><text x="22.1034%" y="239.50"></text></g><g><title>alloc::string::String::push (5 samples, 0.12%)</title><rect x="21.8534%" y="213" width="0.1194%" height="15" fill="rgb(228,201,54)"/><text x="22.1034%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (5 samples, 0.12%)</title><rect x="21.8534%" y="197" width="0.1194%" height="15" fill="rgb(222,22,37)"/><text x="22.1034%" y="207.50"></text></g><g><title>irust::irust::cursor::Cursor::move_right_unbounded (5 samples, 0.12%)</title><rect x="22.0205%" y="405" width="0.1194%" height="15" fill="rgb(237,53,32)"/><text x="22.2705%" y="415.50"></text></g><g><title>irust::irust::cursor::Cursor::move_right_inner (5 samples, 0.12%)</title><rect x="22.0205%" y="389" width="0.1194%" height="15" fill="rgb(233,25,53)"/><text x="22.2705%" y="399.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_internal_pos (5 samples, 0.12%)</title><rect x="22.0205%" y="373" width="0.1194%" height="15" fill="rgb(210,40,34)"/><text x="22.2705%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (5 samples, 0.12%)</title><rect x="22.0205%" y="357" width="0.1194%" height="15" fill="rgb(241,220,44)"/><text x="22.2705%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.12%)</title><rect x="22.0205%" y="341" width="0.1194%" height="15" fill="rgb(235,28,35)"/><text x="22.2705%" y="351.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto::{{closure}} (5 samples, 0.12%)</title><rect x="22.0205%" y="325" width="0.1194%" height="15" fill="rgb(210,56,17)"/><text x="22.2705%" y="335.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5 samples, 0.12%)</title><rect x="22.0205%" y="309" width="0.1194%" height="15" fill="rgb(224,130,29)"/><text x="22.2705%" y="319.50"></text></g><g><title>&lt;irust::irust::buffer::Buffer as alloc::string::ToString&gt;::to_string (12 samples, 0.29%)</title><rect x="22.1638%" y="389" width="0.2866%" height="15" fill="rgb(235,212,8)"/><text x="22.4138%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 0.29%)</title><rect x="22.1638%" y="373" width="0.2866%" height="15" fill="rgb(223,33,50)"/><text x="22.4138%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (12 samples, 0.29%)</title><rect x="22.1638%" y="357" width="0.2866%" height="15" fill="rgb(219,149,13)"/><text x="22.4138%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (12 samples, 0.29%)</title><rect x="22.1638%" y="341" width="0.2866%" height="15" fill="rgb(250,156,29)"/><text x="22.4138%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (12 samples, 0.29%)</title><rect x="22.1638%" y="325" width="0.2866%" height="15" fill="rgb(216,193,19)"/><text x="22.4138%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.24%)</title><rect x="22.2116%" y="309" width="0.2388%" height="15" fill="rgb(216,135,14)"/><text x="22.4616%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.24%)</title><rect x="22.2116%" y="293" width="0.2388%" height="15" fill="rgb(241,47,5)"/><text x="22.4616%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.24%)</title><rect x="22.2116%" y="277" width="0.2388%" height="15" fill="rgb(233,42,35)"/><text x="22.4616%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.24%)</title><rect x="22.2116%" y="261" width="0.2388%" height="15" fill="rgb(231,13,6)"/><text x="22.4616%" y="271.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8 samples, 0.19%)</title><rect x="22.2594%" y="245" width="0.1911%" height="15" fill="rgb(207,181,40)"/><text x="22.5094%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (8 samples, 0.19%)</title><rect x="22.2594%" y="229" width="0.1911%" height="15" fill="rgb(254,173,49)"/><text x="22.5094%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (8 samples, 0.19%)</title><rect x="22.2594%" y="213" width="0.1911%" height="15" fill="rgb(221,1,38)"/><text x="22.5094%" y="223.50"></text></g><g><title>alloc::string::String::push (8 samples, 0.19%)</title><rect x="22.2594%" y="197" width="0.1911%" height="15" fill="rgb(206,124,46)"/><text x="22.5094%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (8 samples, 0.19%)</title><rect x="22.2594%" y="181" width="0.1911%" height="15" fill="rgb(249,21,11)"/><text x="22.5094%" y="191.50"></text></g><g><title>core::ptr::write (6 samples, 0.14%)</title><rect x="22.3071%" y="165" width="0.1433%" height="15" fill="rgb(222,201,40)"/><text x="22.5571%" y="175.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_start (5 samples, 0.12%)</title><rect x="22.4504%" y="389" width="0.1194%" height="15" fill="rgb(235,61,29)"/><text x="22.7004%" y="399.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_internal_pos (5 samples, 0.12%)</title><rect x="22.4504%" y="373" width="0.1194%" height="15" fill="rgb(219,207,3)"/><text x="22.7004%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (5 samples, 0.12%)</title><rect x="22.4504%" y="357" width="0.1194%" height="15" fill="rgb(222,56,46)"/><text x="22.7004%" y="367.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 0.14%)</title><rect x="22.5699%" y="325" width="0.1433%" height="15" fill="rgb(239,76,54)"/><text x="22.8199%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 0.14%)</title><rect x="22.5699%" y="309" width="0.1433%" height="15" fill="rgb(231,124,27)"/><text x="22.8199%" y="319.50"></text></g><g><title>irust::irust::cursor::Cursor::hide (7 samples, 0.17%)</title><rect x="22.5699%" y="389" width="0.1672%" height="15" fill="rgb(249,195,6)"/><text x="22.8199%" y="399.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::hide (7 samples, 0.17%)</title><rect x="22.5699%" y="373" width="0.1672%" height="15" fill="rgb(237,174,47)"/><text x="22.8199%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (7 samples, 0.17%)</title><rect x="22.5699%" y="357" width="0.1672%" height="15" fill="rgb(206,201,31)"/><text x="22.8199%" y="367.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::hide::{{closure}} (7 samples, 0.17%)</title><rect x="22.5699%" y="341" width="0.1672%" height="15" fill="rgb(231,57,52)"/><text x="22.8199%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (21 samples, 0.50%)</title><rect x="23.4535%" y="357" width="0.5016%" height="15" fill="rgb(248,177,22)"/><text x="23.7035%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (21 samples, 0.50%)</title><rect x="23.4535%" y="341" width="0.5016%" height="15" fill="rgb(215,211,37)"/><text x="23.7035%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (21 samples, 0.50%)</title><rect x="23.4535%" y="325" width="0.5016%" height="15" fill="rgb(241,128,51)"/><text x="23.7035%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.50%)</title><rect x="23.4535%" y="309" width="0.5016%" height="15" fill="rgb(227,165,31)"/><text x="23.7035%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.50%)</title><rect x="23.4535%" y="293" width="0.5016%" height="15" fill="rgb(228,167,24)"/><text x="23.7035%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (21 samples, 0.50%)</title><rect x="23.4535%" y="277" width="0.5016%" height="15" fill="rgb(228,143,12)"/><text x="23.7035%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (21 samples, 0.50%)</title><rect x="23.4535%" y="261" width="0.5016%" height="15" fill="rgb(249,149,8)"/><text x="23.7035%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.50%)</title><rect x="23.4535%" y="245" width="0.5016%" height="15" fill="rgb(243,35,44)"/><text x="23.7035%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.50%)</title><rect x="23.4535%" y="229" width="0.5016%" height="15" fill="rgb(246,89,9)"/><text x="23.7035%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (21 samples, 0.50%)</title><rect x="23.4535%" y="213" width="0.5016%" height="15" fill="rgb(233,213,13)"/><text x="23.7035%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.50%)</title><rect x="23.4535%" y="197" width="0.5016%" height="15" fill="rgb(233,141,41)"/><text x="23.7035%" y="207.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.50%)</title><rect x="23.4535%" y="181" width="0.5016%" height="15" fill="rgb(239,167,4)"/><text x="23.7035%" y="191.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.50%)</title><rect x="23.4535%" y="165" width="0.5016%" height="15" fill="rgb(209,217,16)"/><text x="23.7035%" y="175.50"></text></g><g><title>_int_malloc (15 samples, 0.36%)</title><rect x="23.5968%" y="149" width="0.3583%" height="15" fill="rgb(219,88,35)"/><text x="23.8468%" y="159.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (22 samples, 0.53%)</title><rect x="23.4535%" y="373" width="0.5254%" height="15" fill="rgb(220,193,23)"/><text x="23.7035%" y="383.50"></text></g><g><title>irust::irust::highlight::highlight (13 samples, 0.31%)</title><rect x="24.0745%" y="373" width="0.3105%" height="15" fill="rgb(230,90,52)"/><text x="24.3245%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (13 samples, 0.31%)</title><rect x="24.5522%" y="261" width="0.3105%" height="15" fill="rgb(252,106,19)"/><text x="24.8022%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (13 samples, 0.31%)</title><rect x="24.5522%" y="245" width="0.3105%" height="15" fill="rgb(206,74,20)"/><text x="24.8022%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (13 samples, 0.31%)</title><rect x="24.5522%" y="229" width="0.3105%" height="15" fill="rgb(230,138,44)"/><text x="24.8022%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.21%)</title><rect x="24.6477%" y="213" width="0.2150%" height="15" fill="rgb(235,182,43)"/><text x="24.8977%" y="223.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (9 samples, 0.21%)</title><rect x="24.6477%" y="197" width="0.2150%" height="15" fill="rgb(242,16,51)"/><text x="24.8977%" y="207.50"></text></g><g><title>__GI___libc_malloc (76 samples, 1.82%)</title><rect x="24.9582%" y="149" width="1.8151%" height="15" fill="rgb(248,9,4)"/><text x="25.2082%" y="159.50">_..</text></g><g><title>_int_malloc (49 samples, 1.17%)</title><rect x="25.6031%" y="133" width="1.1703%" height="15" fill="rgb(210,31,22)"/><text x="25.8531%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (97 samples, 2.32%)</title><rect x="24.5522%" y="309" width="2.3167%" height="15" fill="rgb(239,54,39)"/><text x="24.8022%" y="319.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (97 samples, 2.32%)</title><rect x="24.5522%" y="293" width="2.3167%" height="15" fill="rgb(230,99,41)"/><text x="24.8022%" y="303.50">a..</text></g><g><title>alloc::slice::hack::to_vec (97 samples, 2.32%)</title><rect x="24.5522%" y="277" width="2.3167%" height="15" fill="rgb(253,106,12)"/><text x="24.8022%" y="287.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (84 samples, 2.01%)</title><rect x="24.8627%" y="261" width="2.0062%" height="15" fill="rgb(213,46,41)"/><text x="25.1127%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (83 samples, 1.98%)</title><rect x="24.8866%" y="245" width="1.9823%" height="15" fill="rgb(215,133,35)"/><text x="25.1366%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (83 samples, 1.98%)</title><rect x="24.8866%" y="229" width="1.9823%" height="15" fill="rgb(213,28,5)"/><text x="25.1366%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (83 samples, 1.98%)</title><rect x="24.8866%" y="213" width="1.9823%" height="15" fill="rgb(215,77,49)"/><text x="25.1366%" y="223.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (83 samples, 1.98%)</title><rect x="24.8866%" y="197" width="1.9823%" height="15" fill="rgb(248,100,22)"/><text x="25.1366%" y="207.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (83 samples, 1.98%)</title><rect x="24.8866%" y="181" width="1.9823%" height="15" fill="rgb(208,67,9)"/><text x="25.1366%" y="191.50">a..</text></g><g><title>alloc::alloc::alloc (83 samples, 1.98%)</title><rect x="24.8866%" y="165" width="1.9823%" height="15" fill="rgb(219,133,21)"/><text x="25.1366%" y="175.50">a..</text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (100 samples, 2.39%)</title><rect x="24.5283%" y="357" width="2.3883%" height="15" fill="rgb(246,46,29)"/><text x="24.7783%" y="367.50">&lt;c..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (99 samples, 2.36%)</title><rect x="24.5522%" y="341" width="2.3645%" height="15" fill="rgb(246,185,52)"/><text x="24.8022%" y="351.50">&lt;a..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (99 samples, 2.36%)</title><rect x="24.5522%" y="325" width="2.3645%" height="15" fill="rgb(252,136,11)"/><text x="24.8022%" y="335.50">al..</text></g><g><title>core::str::validations::next_code_point (9 samples, 0.21%)</title><rect x="26.9644%" y="325" width="0.2150%" height="15" fill="rgb(219,138,53)"/><text x="27.2144%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.12%)</title><rect x="27.0599%" y="309" width="0.1194%" height="15" fill="rgb(211,51,23)"/><text x="27.3099%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.33%)</title><rect x="26.9166%" y="357" width="0.3344%" height="15" fill="rgb(247,221,28)"/><text x="27.1666%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.29%)</title><rect x="26.9644%" y="341" width="0.2866%" height="15" fill="rgb(251,222,45)"/><text x="27.2144%" y="351.50"></text></g><g><title>alloc::string::String::push (11 samples, 0.26%)</title><rect x="27.2749%" y="357" width="0.2627%" height="15" fill="rgb(217,162,53)"/><text x="27.5249%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (11 samples, 0.26%)</title><rect x="27.2749%" y="341" width="0.2627%" height="15" fill="rgb(229,93,14)"/><text x="27.5249%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (60 samples, 1.43%)</title><rect x="27.5376%" y="357" width="1.4330%" height="15" fill="rgb(209,67,49)"/><text x="27.7876%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (59 samples, 1.41%)</title><rect x="27.5615%" y="341" width="1.4091%" height="15" fill="rgb(213,87,29)"/><text x="27.8115%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (59 samples, 1.41%)</title><rect x="27.5615%" y="325" width="1.4091%" height="15" fill="rgb(205,151,52)"/><text x="27.8115%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (59 samples, 1.41%)</title><rect x="27.5615%" y="309" width="1.4091%" height="15" fill="rgb(253,215,39)"/><text x="27.8115%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (59 samples, 1.41%)</title><rect x="27.5615%" y="293" width="1.4091%" height="15" fill="rgb(221,220,41)"/><text x="27.8115%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (59 samples, 1.41%)</title><rect x="27.5615%" y="277" width="1.4091%" height="15" fill="rgb(218,133,21)"/><text x="27.8115%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (59 samples, 1.41%)</title><rect x="27.5615%" y="261" width="1.4091%" height="15" fill="rgb(221,193,43)"/><text x="27.8115%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (59 samples, 1.41%)</title><rect x="27.5615%" y="245" width="1.4091%" height="15" fill="rgb(240,128,52)"/><text x="27.8115%" y="255.50"></text></g><g><title>alloc::alloc::realloc (59 samples, 1.41%)</title><rect x="27.5615%" y="229" width="1.4091%" height="15" fill="rgb(253,114,12)"/><text x="27.8115%" y="239.50"></text></g><g><title>__GI___libc_realloc (59 samples, 1.41%)</title><rect x="27.5615%" y="213" width="1.4091%" height="15" fill="rgb(215,223,47)"/><text x="27.8115%" y="223.50"></text></g><g><title>_int_realloc (58 samples, 1.39%)</title><rect x="27.5854%" y="197" width="1.3852%" height="15" fill="rgb(248,225,23)"/><text x="27.8354%" y="207.50"></text></g><g><title>_int_malloc (49 samples, 1.17%)</title><rect x="27.8003%" y="181" width="1.1703%" height="15" fill="rgb(250,108,0)"/><text x="28.0503%" y="191.50"></text></g><g><title>malloc_consolidate (33 samples, 0.79%)</title><rect x="28.1825%" y="165" width="0.7882%" height="15" fill="rgb(228,208,7)"/><text x="28.4325%" y="175.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_alphabetic (6 samples, 0.14%)</title><rect x="28.9706%" y="341" width="0.1433%" height="15" fill="rgb(244,45,10)"/><text x="29.2206%" y="351.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_alphanumeric (9 samples, 0.21%)</title><rect x="28.9706%" y="357" width="0.2150%" height="15" fill="rgb(207,125,25)"/><text x="29.2206%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (6 samples, 0.14%)</title><rect x="29.4005%" y="277" width="0.1433%" height="15" fill="rgb(210,195,18)"/><text x="29.6505%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (6 samples, 0.14%)</title><rect x="29.4005%" y="261" width="0.1433%" height="15" fill="rgb(249,80,12)"/><text x="29.6505%" y="271.50"></text></g><g><title>alloc::string::String::push (6 samples, 0.14%)</title><rect x="29.4005%" y="245" width="0.1433%" height="15" fill="rgb(221,65,9)"/><text x="29.6505%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (6 samples, 0.14%)</title><rect x="29.4005%" y="229" width="0.1433%" height="15" fill="rgb(235,49,36)"/><text x="29.6505%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.38%)</title><rect x="29.1856%" y="357" width="0.3821%" height="15" fill="rgb(225,32,20)"/><text x="29.4356%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (16 samples, 0.38%)</title><rect x="29.1856%" y="341" width="0.3821%" height="15" fill="rgb(215,141,46)"/><text x="29.4356%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (15 samples, 0.36%)</title><rect x="29.2095%" y="325" width="0.3583%" height="15" fill="rgb(250,160,47)"/><text x="29.4595%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 0.21%)</title><rect x="29.3528%" y="309" width="0.2150%" height="15" fill="rgb(216,222,40)"/><text x="29.6028%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.21%)</title><rect x="29.3528%" y="293" width="0.2150%" height="15" fill="rgb(234,217,39)"/><text x="29.6028%" y="303.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (8 samples, 0.19%)</title><rect x="30.0215%" y="309" width="0.1911%" height="15" fill="rgb(207,178,40)"/><text x="30.2715%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (8 samples, 0.19%)</title><rect x="30.0215%" y="293" width="0.1911%" height="15" fill="rgb(221,136,13)"/><text x="30.2715%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (26 samples, 0.62%)</title><rect x="29.6155%" y="357" width="0.6210%" height="15" fill="rgb(249,199,10)"/><text x="29.8655%" y="367.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (26 samples, 0.62%)</title><rect x="29.6155%" y="341" width="0.6210%" height="15" fill="rgb(249,222,13)"/><text x="29.8655%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (26 samples, 0.62%)</title><rect x="29.6155%" y="325" width="0.6210%" height="15" fill="rgb(244,185,38)"/><text x="29.8655%" y="335.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.45%)</title><rect x="30.2603%" y="277" width="0.4538%" height="15" fill="rgb(236,202,9)"/><text x="30.5103%" y="287.50"></text></g><g><title>_int_malloc (16 samples, 0.38%)</title><rect x="30.3320%" y="261" width="0.3821%" height="15" fill="rgb(250,229,37)"/><text x="30.5820%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (20 samples, 0.48%)</title><rect x="30.2603%" y="341" width="0.4777%" height="15" fill="rgb(206,174,23)"/><text x="30.5103%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (20 samples, 0.48%)</title><rect x="30.2603%" y="325" width="0.4777%" height="15" fill="rgb(211,33,43)"/><text x="30.5103%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.48%)</title><rect x="30.2603%" y="309" width="0.4777%" height="15" fill="rgb(245,58,50)"/><text x="30.5103%" y="319.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.48%)</title><rect x="30.2603%" y="293" width="0.4777%" height="15" fill="rgb(244,68,36)"/><text x="30.5103%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (6 samples, 0.14%)</title><rect x="30.7380%" y="341" width="0.1433%" height="15" fill="rgb(232,229,15)"/><text x="30.9880%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (5 samples, 0.12%)</title><rect x="30.7619%" y="325" width="0.1194%" height="15" fill="rgb(254,30,23)"/><text x="31.0119%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.12%)</title><rect x="30.7619%" y="309" width="0.1194%" height="15" fill="rgb(235,160,14)"/><text x="31.0119%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (5 samples, 0.12%)</title><rect x="30.7619%" y="293" width="0.1194%" height="15" fill="rgb(212,155,44)"/><text x="31.0119%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.12%)</title><rect x="30.7619%" y="277" width="0.1194%" height="15" fill="rgb(226,2,50)"/><text x="31.0119%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.12%)</title><rect x="30.7619%" y="261" width="0.1194%" height="15" fill="rgb(234,177,6)"/><text x="31.0119%" y="271.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.41%)</title><rect x="31.0246%" y="197" width="0.4060%" height="15" fill="rgb(217,24,9)"/><text x="31.2746%" y="207.50"></text></g><g><title>_int_malloc (13 samples, 0.31%)</title><rect x="31.1201%" y="181" width="0.3105%" height="15" fill="rgb(220,13,46)"/><text x="31.3701%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.43%)</title><rect x="31.0246%" y="213" width="0.4299%" height="15" fill="rgb(239,221,27)"/><text x="31.2746%" y="223.50"></text></g><g><title>alloc::string::String::reserve (22 samples, 0.53%)</title><rect x="30.9768%" y="293" width="0.5254%" height="15" fill="rgb(222,198,25)"/><text x="31.2268%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (22 samples, 0.53%)</title><rect x="30.9768%" y="277" width="0.5254%" height="15" fill="rgb(211,99,13)"/><text x="31.2268%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.53%)</title><rect x="30.9768%" y="261" width="0.5254%" height="15" fill="rgb(232,111,31)"/><text x="31.2268%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (20 samples, 0.48%)</title><rect x="31.0246%" y="245" width="0.4777%" height="15" fill="rgb(245,82,37)"/><text x="31.2746%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (20 samples, 0.48%)</title><rect x="31.0246%" y="229" width="0.4777%" height="15" fill="rgb(227,149,46)"/><text x="31.2746%" y="239.50"></text></g><g><title>&lt;alloc::string::Drain as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.17%)</title><rect x="31.5262%" y="261" width="0.1672%" height="15" fill="rgb(218,36,50)"/><text x="31.7762%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.17%)</title><rect x="31.5262%" y="245" width="0.1672%" height="15" fill="rgb(226,80,48)"/><text x="31.7762%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.17%)</title><rect x="31.5262%" y="229" width="0.1672%" height="15" fill="rgb(238,224,15)"/><text x="31.7762%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (39 samples, 0.93%)</title><rect x="30.8813%" y="309" width="0.9315%" height="15" fill="rgb(241,136,10)"/><text x="31.1313%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (13 samples, 0.31%)</title><rect x="31.5023%" y="293" width="0.3105%" height="15" fill="rgb(208,32,45)"/><text x="31.7523%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 0.29%)</title><rect x="31.5262%" y="277" width="0.2866%" height="15" fill="rgb(207,135,9)"/><text x="31.7762%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.96%)</title><rect x="30.8813%" y="341" width="0.9553%" height="15" fill="rgb(206,86,44)"/><text x="31.1313%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (40 samples, 0.96%)</title><rect x="30.8813%" y="325" width="0.9553%" height="15" fill="rgb(245,177,15)"/><text x="31.1313%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.17%)</title><rect x="32.0755%" y="325" width="0.1672%" height="15" fill="rgb(206,64,50)"/><text x="32.3255%" y="335.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.17%)</title><rect x="32.0755%" y="309" width="0.1672%" height="15" fill="rgb(234,36,40)"/><text x="32.3255%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.17%)</title><rect x="32.0755%" y="293" width="0.1672%" height="15" fill="rgb(213,64,8)"/><text x="32.3255%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.17%)</title><rect x="32.0755%" y="277" width="0.1672%" height="15" fill="rgb(210,75,36)"/><text x="32.3255%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.17%)</title><rect x="32.0755%" y="261" width="0.1672%" height="15" fill="rgb(229,88,21)"/><text x="32.3255%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.17%)</title><rect x="32.0755%" y="245" width="0.1672%" height="15" fill="rgb(252,204,47)"/><text x="32.3255%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (7 samples, 0.17%)</title><rect x="32.0755%" y="229" width="0.1672%" height="15" fill="rgb(208,77,27)"/><text x="32.3255%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.17%)</title><rect x="32.0755%" y="213" width="0.1672%" height="15" fill="rgb(221,76,26)"/><text x="32.3255%" y="223.50"></text></g><g><title>irust::irust::highlight::is_keyword (6 samples, 0.14%)</title><rect x="32.4098%" y="325" width="0.1433%" height="15" fill="rgb(225,139,18)"/><text x="32.6598%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (6 samples, 0.14%)</title><rect x="32.4098%" y="309" width="0.1433%" height="15" fill="rgb(230,137,11)"/><text x="32.6598%" y="319.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (6 samples, 0.14%)</title><rect x="32.4098%" y="293" width="0.1433%" height="15" fill="rgb(212,28,1)"/><text x="32.6598%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (6 samples, 0.14%)</title><rect x="32.4098%" y="277" width="0.1433%" height="15" fill="rgb(248,164,17)"/><text x="32.6598%" y="287.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (6 samples, 0.14%)</title><rect x="32.4098%" y="261" width="0.1433%" height="15" fill="rgb(222,171,42)"/><text x="32.6598%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.14%)</title><rect x="32.4098%" y="245" width="0.1433%" height="15" fill="rgb(243,84,45)"/><text x="32.6598%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (6 samples, 0.14%)</title><rect x="32.4098%" y="229" width="0.1433%" height="15" fill="rgb(252,49,23)"/><text x="32.6598%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.14%)</title><rect x="32.4098%" y="213" width="0.1433%" height="15" fill="rgb(215,19,7)"/><text x="32.6598%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6 samples, 0.14%)</title><rect x="32.4098%" y="197" width="0.1433%" height="15" fill="rgb(238,81,41)"/><text x="32.6598%" y="207.50"></text></g><g><title>irust::irust::highlight::catch_all (103 samples, 2.46%)</title><rect x="30.2364%" y="357" width="2.4600%" height="15" fill="rgb(210,199,37)"/><text x="30.4864%" y="367.50">ir..</text></g><g><title>irust::irust::highlight::parse_as (36 samples, 0.86%)</title><rect x="31.8366%" y="341" width="0.8598%" height="15" fill="rgb(244,192,49)"/><text x="32.0866%" y="351.50"></text></g><g><title>irust::irust::highlight::parse (350 samples, 8.36%)</title><rect x="24.3850%" y="373" width="8.3592%" height="15" fill="rgb(226,211,11)"/><text x="24.6350%" y="383.50">irust::irust..</text></g><g><title>core::str::&lt;impl str&gt;::starts_with (6 samples, 0.14%)</title><rect x="32.8159%" y="357" width="0.1433%" height="15" fill="rgb(236,162,54)"/><text x="33.0659%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (6 samples, 0.14%)</title><rect x="32.8159%" y="341" width="0.1433%" height="15" fill="rgb(220,229,9)"/><text x="33.0659%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (6 samples, 0.14%)</title><rect x="32.8159%" y="325" width="0.1433%" height="15" fill="rgb(250,87,22)"/><text x="33.0659%" y="335.50"></text></g><g><title>__memcmp_sse4_1 (7 samples, 0.17%)</title><rect x="33.1980%" y="293" width="0.1672%" height="15" fill="rgb(239,43,17)"/><text x="33.4480%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (20 samples, 0.48%)</title><rect x="32.9592%" y="309" width="0.4777%" height="15" fill="rgb(231,177,25)"/><text x="33.2092%" y="319.50"></text></g><g><title>irust::irust::highlight::theme::theme_color_to_term_color (31 samples, 0.74%)</title><rect x="32.7442%" y="373" width="0.7404%" height="15" fill="rgb(219,179,1)"/><text x="32.9942%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (22 samples, 0.53%)</title><rect x="32.9592%" y="357" width="0.5254%" height="15" fill="rgb(238,219,53)"/><text x="33.2092%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.53%)</title><rect x="32.9592%" y="341" width="0.5254%" height="15" fill="rgb(232,167,36)"/><text x="33.2092%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (22 samples, 0.53%)</title><rect x="32.9592%" y="325" width="0.5254%" height="15" fill="rgb(244,19,51)"/><text x="33.2092%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.21%)</title><rect x="33.6040%" y="277" width="0.2150%" height="15" fill="rgb(224,6,22)"/><text x="33.8540%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (9 samples, 0.21%)</title><rect x="33.6040%" y="261" width="0.2150%" height="15" fill="rgb(224,145,5)"/><text x="33.8540%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.21%)</title><rect x="33.6040%" y="245" width="0.2150%" height="15" fill="rgb(234,130,49)"/><text x="33.8540%" y="255.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.21%)</title><rect x="33.6040%" y="229" width="0.2150%" height="15" fill="rgb(254,6,2)"/><text x="33.8540%" y="239.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.21%)</title><rect x="33.6040%" y="213" width="0.2150%" height="15" fill="rgb(208,96,46)"/><text x="33.8540%" y="223.50"></text></g><g><title>_int_realloc (9 samples, 0.21%)</title><rect x="33.6040%" y="197" width="0.2150%" height="15" fill="rgb(239,3,39)"/><text x="33.8540%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (11 samples, 0.26%)</title><rect x="33.5801%" y="341" width="0.2627%" height="15" fill="rgb(233,210,1)"/><text x="33.8301%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.26%)</title><rect x="33.5801%" y="325" width="0.2627%" height="15" fill="rgb(244,137,37)"/><text x="33.8301%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (11 samples, 0.26%)</title><rect x="33.5801%" y="309" width="0.2627%" height="15" fill="rgb(240,136,2)"/><text x="33.8301%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.26%)</title><rect x="33.5801%" y="293" width="0.2627%" height="15" fill="rgb(239,18,37)"/><text x="33.8301%" y="303.50"></text></g><g><title>irust::irust::highlight::highlight (461 samples, 11.01%)</title><rect x="22.9042%" y="389" width="11.0103%" height="15" fill="rgb(218,185,22)"/><text x="23.1542%" y="399.50">irust::irust::hi..</text></g><g><title>irust::irust::printer::Printer::push (18 samples, 0.43%)</title><rect x="33.4846%" y="373" width="0.4299%" height="15" fill="rgb(225,218,4)"/><text x="33.7346%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (17 samples, 0.41%)</title><rect x="33.5085%" y="357" width="0.4060%" height="15" fill="rgb(230,182,32)"/><text x="33.7585%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.36%)</title><rect x="36.0640%" y="229" width="0.3583%" height="15" fill="rgb(242,56,43)"/><text x="36.3140%" y="239.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (12 samples, 0.29%)</title><rect x="36.1357%" y="213" width="0.2866%" height="15" fill="rgb(233,99,24)"/><text x="36.3857%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (23 samples, 0.55%)</title><rect x="35.8968%" y="277" width="0.5493%" height="15" fill="rgb(234,209,42)"/><text x="36.1468%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 0.55%)</title><rect x="35.8968%" y="261" width="0.5493%" height="15" fill="rgb(227,7,12)"/><text x="36.1468%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (23 samples, 0.55%)</title><rect x="35.8968%" y="245" width="0.5493%" height="15" fill="rgb(245,203,43)"/><text x="36.1468%" y="255.50"></text></g><g><title>__GI___libc_malloc (44 samples, 1.05%)</title><rect x="36.7805%" y="165" width="1.0509%" height="15" fill="rgb(238,205,33)"/><text x="37.0305%" y="175.50"></text></g><g><title>__rdl_alloc (7 samples, 0.17%)</title><rect x="37.8314%" y="165" width="0.1672%" height="15" fill="rgb(231,56,7)"/><text x="38.0814%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.17%)</title><rect x="37.8314%" y="149" width="0.1672%" height="15" fill="rgb(244,186,29)"/><text x="38.0814%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (91 samples, 2.17%)</title><rect x="35.8968%" y="357" width="2.1734%" height="15" fill="rgb(234,111,31)"/><text x="36.1468%" y="367.50">&lt;..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (91 samples, 2.17%)</title><rect x="35.8968%" y="341" width="2.1734%" height="15" fill="rgb(241,149,10)"/><text x="36.1468%" y="351.50">a..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (91 samples, 2.17%)</title><rect x="35.8968%" y="325" width="2.1734%" height="15" fill="rgb(249,206,44)"/><text x="36.1468%" y="335.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (91 samples, 2.17%)</title><rect x="35.8968%" y="309" width="2.1734%" height="15" fill="rgb(251,153,30)"/><text x="36.1468%" y="319.50">a..</text></g><g><title>alloc::slice::hack::to_vec (91 samples, 2.17%)</title><rect x="35.8968%" y="293" width="2.1734%" height="15" fill="rgb(239,152,38)"/><text x="36.1468%" y="303.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (68 samples, 1.62%)</title><rect x="36.4461%" y="277" width="1.6241%" height="15" fill="rgb(249,139,47)"/><text x="36.6961%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (59 samples, 1.41%)</title><rect x="36.6611%" y="261" width="1.4091%" height="15" fill="rgb(244,64,35)"/><text x="36.9111%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (59 samples, 1.41%)</title><rect x="36.6611%" y="245" width="1.4091%" height="15" fill="rgb(216,46,15)"/><text x="36.9111%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (59 samples, 1.41%)</title><rect x="36.6611%" y="229" width="1.4091%" height="15" fill="rgb(250,74,19)"/><text x="36.9111%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (59 samples, 1.41%)</title><rect x="36.6611%" y="213" width="1.4091%" height="15" fill="rgb(249,42,33)"/><text x="36.9111%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (59 samples, 1.41%)</title><rect x="36.6611%" y="197" width="1.4091%" height="15" fill="rgb(242,149,17)"/><text x="36.9111%" y="207.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 1.41%)</title><rect x="36.6611%" y="181" width="1.4091%" height="15" fill="rgb(244,29,21)"/><text x="36.9111%" y="191.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (103 samples, 2.46%)</title><rect x="35.8491%" y="373" width="2.4600%" height="15" fill="rgb(220,130,37)"/><text x="36.0991%" y="383.50">&lt;c..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (10 samples, 0.24%)</title><rect x="38.0702%" y="357" width="0.2388%" height="15" fill="rgb(211,67,2)"/><text x="38.3202%" y="367.50"></text></g><g><title>core::char::methods::encode_utf8_raw (10 samples, 0.24%)</title><rect x="38.0702%" y="341" width="0.2388%" height="15" fill="rgb(235,68,52)"/><text x="38.3202%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (15 samples, 0.36%)</title><rect x="38.3091%" y="373" width="0.3583%" height="15" fill="rgb(246,142,3)"/><text x="38.5591%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.31%)</title><rect x="38.6673%" y="373" width="0.3105%" height="15" fill="rgb(241,25,7)"/><text x="38.9173%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (13 samples, 0.31%)</title><rect x="38.6673%" y="357" width="0.3105%" height="15" fill="rgb(242,119,39)"/><text x="38.9173%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.12%)</title><rect x="38.8584%" y="341" width="0.1194%" height="15" fill="rgb(241,98,45)"/><text x="39.1084%" y="351.50"></text></g><g><title>core::intrinsics::copy (675 samples, 16.12%)</title><rect x="39.4077%" y="341" width="16.1213%" height="15" fill="rgb(254,28,30)"/><text x="39.6577%" y="351.50">core::intrinsics::copy</text></g><g><title>__memcpy_sse2_unaligned_erms (671 samples, 16.03%)</title><rect x="39.5032%" y="325" width="16.0258%" height="15" fill="rgb(241,142,54)"/><text x="39.7532%" y="335.50">__memcpy_sse2_unaligned_e..</text></g><g><title>&lt;irust::irust::printer::Printer as core::iter::traits::iterator::Iterator&gt;::next (698 samples, 16.67%)</title><rect x="38.9778%" y="373" width="16.6706%" height="15" fill="rgb(222,85,15)"/><text x="39.2278%" y="383.50">&lt;irust::irust::printer::Pr..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::remove (695 samples, 16.60%)</title><rect x="39.0494%" y="357" width="16.5990%" height="15" fill="rgb(210,85,47)"/><text x="39.2994%" y="367.50">alloc::vec::Vec&lt;T&gt;::remove</text></g><g><title>core::ptr::read (5 samples, 0.12%)</title><rect x="55.5290%" y="341" width="0.1194%" height="15" fill="rgb(224,206,25)"/><text x="55.7790%" y="351.50"></text></g><g><title>__GI___libc_free (18 samples, 0.43%)</title><rect x="55.6962%" y="277" width="0.4299%" height="15" fill="rgb(243,201,19)"/><text x="55.9462%" y="287.50"></text></g><g><title>malloc_consolidate (18 samples, 0.43%)</title><rect x="57.2725%" y="261" width="0.4299%" height="15" fill="rgb(236,59,4)"/><text x="57.5225%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (86 samples, 2.05%)</title><rect x="55.6723%" y="309" width="2.0540%" height="15" fill="rgb(254,179,45)"/><text x="55.9223%" y="319.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (86 samples, 2.05%)</title><rect x="55.6723%" y="293" width="2.0540%" height="15" fill="rgb(226,14,10)"/><text x="55.9223%" y="303.50">a..</text></g><g><title>_int_free (62 samples, 1.48%)</title><rect x="56.2455%" y="277" width="1.4808%" height="15" fill="rgb(244,27,41)"/><text x="56.4955%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (88 samples, 2.10%)</title><rect x="55.6484%" y="325" width="2.1017%" height="15" fill="rgb(235,35,32)"/><text x="55.8984%" y="335.50">&lt;..</text></g><g><title>__GI___libc_free (10 samples, 0.24%)</title><rect x="57.8696%" y="261" width="0.2388%" height="15" fill="rgb(218,68,31)"/><text x="58.1196%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (58 samples, 1.39%)</title><rect x="57.7741%" y="293" width="1.3852%" height="15" fill="rgb(207,120,37)"/><text x="58.0241%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (58 samples, 1.39%)</title><rect x="57.7741%" y="277" width="1.3852%" height="15" fill="rgb(227,98,0)"/><text x="58.0241%" y="287.50"></text></g><g><title>_int_free (42 samples, 1.00%)</title><rect x="58.1562%" y="261" width="1.0031%" height="15" fill="rgb(207,7,3)"/><text x="58.4062%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (148 samples, 3.53%)</title><rect x="55.6484%" y="373" width="3.5348%" height="15" fill="rgb(206,98,19)"/><text x="55.8984%" y="383.50">cor..</text></g><g><title>core::ptr::drop_in_place (148 samples, 3.53%)</title><rect x="55.6484%" y="357" width="3.5348%" height="15" fill="rgb(217,5,26)"/><text x="55.8984%" y="367.50">cor..</text></g><g><title>core::ptr::drop_in_place (148 samples, 3.53%)</title><rect x="55.6484%" y="341" width="3.5348%" height="15" fill="rgb(235,190,38)"/><text x="55.8984%" y="351.50">cor..</text></g><g><title>core::ptr::drop_in_place (60 samples, 1.43%)</title><rect x="57.7502%" y="325" width="1.4330%" height="15" fill="rgb(247,86,24)"/><text x="58.0002%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 1.43%)</title><rect x="57.7502%" y="309" width="1.4330%" height="15" fill="rgb(205,101,16)"/><text x="58.0002%" y="319.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.17%)</title><rect x="59.4220%" y="117" width="0.1672%" height="15" fill="rgb(246,168,33)"/><text x="59.6720%" y="127.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.17%)</title><rect x="59.4220%" y="101" width="0.1672%" height="15" fill="rgb(231,114,1)"/><text x="59.6720%" y="111.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (8 samples, 0.19%)</title><rect x="59.4220%" y="149" width="0.1911%" height="15" fill="rgb(207,184,53)"/><text x="59.6720%" y="159.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (8 samples, 0.19%)</title><rect x="59.4220%" y="133" width="0.1911%" height="15" fill="rgb(224,95,51)"/><text x="59.6720%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.14%)</title><rect x="59.6131%" y="117" width="0.1433%" height="15" fill="rgb(212,188,45)"/><text x="59.8631%" y="127.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.12%)</title><rect x="59.6370%" y="101" width="0.1194%" height="15" fill="rgb(223,154,38)"/><text x="59.8870%" y="111.50"></text></g><g><title>std::io::Write::write_fmt (24 samples, 0.57%)</title><rect x="59.2310%" y="245" width="0.5732%" height="15" fill="rgb(251,22,52)"/><text x="59.4810%" y="255.50"></text></g><g><title>core::fmt::write (24 samples, 0.57%)</title><rect x="59.2310%" y="229" width="0.5732%" height="15" fill="rgb(229,209,22)"/><text x="59.4810%" y="239.50"></text></g><g><title>crossterm::cursor::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::cursor::MoveTo&gt;&gt;::fmt (20 samples, 0.48%)</title><rect x="59.3265%" y="213" width="0.4777%" height="15" fill="rgb(234,138,34)"/><text x="59.5765%" y="223.50"></text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (20 samples, 0.48%)</title><rect x="59.3265%" y="197" width="0.4777%" height="15" fill="rgb(212,95,11)"/><text x="59.5765%" y="207.50"></text></g><g><title>core::fmt::Formatter::write_fmt (18 samples, 0.43%)</title><rect x="59.3743%" y="181" width="0.4299%" height="15" fill="rgb(240,179,47)"/><text x="59.6243%" y="191.50"></text></g><g><title>core::fmt::write (16 samples, 0.38%)</title><rect x="59.4220%" y="165" width="0.3821%" height="15" fill="rgb(240,163,11)"/><text x="59.6720%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (8 samples, 0.19%)</title><rect x="59.6131%" y="149" width="0.1911%" height="15" fill="rgb(236,37,12)"/><text x="59.8631%" y="159.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (8 samples, 0.19%)</title><rect x="59.6131%" y="133" width="0.1911%" height="15" fill="rgb(232,164,16)"/><text x="59.8631%" y="143.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_next_row_terminal_start (28 samples, 0.67%)</title><rect x="59.1832%" y="373" width="0.6687%" height="15" fill="rgb(244,205,15)"/><text x="59.4332%" y="383.50"></text></g><g><title>irust::irust::cursor::Cursor::goto (28 samples, 0.67%)</title><rect x="59.1832%" y="357" width="0.6687%" height="15" fill="rgb(223,117,47)"/><text x="59.4332%" y="367.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_internal_pos (28 samples, 0.67%)</title><rect x="59.1832%" y="341" width="0.6687%" height="15" fill="rgb(244,107,35)"/><text x="59.4332%" y="351.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (28 samples, 0.67%)</title><rect x="59.1832%" y="325" width="0.6687%" height="15" fill="rgb(205,140,8)"/><text x="59.4332%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (28 samples, 0.67%)</title><rect x="59.1832%" y="309" width="0.6687%" height="15" fill="rgb(228,84,46)"/><text x="59.4332%" y="319.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto::{{closure}} (28 samples, 0.67%)</title><rect x="59.1832%" y="293" width="0.6687%" height="15" fill="rgb(254,188,9)"/><text x="59.4332%" y="303.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (28 samples, 0.67%)</title><rect x="59.1832%" y="277" width="0.6687%" height="15" fill="rgb(206,112,54)"/><text x="59.4332%" y="287.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (28 samples, 0.67%)</title><rect x="59.1832%" y="261" width="0.6687%" height="15" fill="rgb(216,84,49)"/><text x="59.4332%" y="271.50"></text></g><g><title>irust::irust::cursor::Cursor::is_at_col (6 samples, 0.14%)</title><rect x="59.8519%" y="373" width="0.1433%" height="15" fill="rgb(214,194,35)"/><text x="60.1019%" y="383.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (17 samples, 0.41%)</title><rect x="61.3088%" y="357" width="0.4060%" height="15" fill="rgb(249,28,3)"/><text x="61.5588%" y="367.50"></text></g><g><title>&lt;crossterm::style::types::color::Color as core::cmp::PartialEq&gt;::ne (7 samples, 0.17%)</title><rect x="61.5476%" y="341" width="0.1672%" height="15" fill="rgb(222,56,52)"/><text x="61.7976%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (15 samples, 0.36%)</title><rect x="61.7148%" y="357" width="0.3583%" height="15" fill="rgb(245,217,50)"/><text x="61.9648%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.31%)</title><rect x="62.0731%" y="357" width="0.3105%" height="15" fill="rgb(213,201,24)"/><text x="62.3231%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (13 samples, 0.31%)</title><rect x="62.0731%" y="341" width="0.3105%" height="15" fill="rgb(248,116,28)"/><text x="62.3231%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.14%)</title><rect x="62.2403%" y="325" width="0.1433%" height="15" fill="rgb(219,72,43)"/><text x="62.4903%" y="335.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (10 samples, 0.24%)</title><rect x="62.7657%" y="213" width="0.2388%" height="15" fill="rgb(209,138,14)"/><text x="63.0157%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.29%)</title><rect x="62.7657%" y="277" width="0.2866%" height="15" fill="rgb(222,18,33)"/><text x="63.0157%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.29%)</title><rect x="62.7657%" y="261" width="0.2866%" height="15" fill="rgb(213,199,7)"/><text x="63.0157%" y="271.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.29%)</title><rect x="62.7657%" y="245" width="0.2866%" height="15" fill="rgb(250,110,10)"/><text x="63.0157%" y="255.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (12 samples, 0.29%)</title><rect x="62.7657%" y="229" width="0.2866%" height="15" fill="rgb(248,123,6)"/><text x="63.0157%" y="239.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (12 samples, 0.29%)</title><rect x="63.3389%" y="181" width="0.2866%" height="15" fill="rgb(206,91,31)"/><text x="63.5889%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.21%)</title><rect x="63.4106%" y="165" width="0.2150%" height="15" fill="rgb(211,154,13)"/><text x="63.6606%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.21%)</title><rect x="63.4106%" y="149" width="0.2150%" height="15" fill="rgb(225,148,7)"/><text x="63.6606%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (9 samples, 0.21%)</title><rect x="63.4106%" y="133" width="0.2150%" height="15" fill="rgb(220,160,43)"/><text x="63.6606%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (14 samples, 0.33%)</title><rect x="63.3389%" y="245" width="0.3344%" height="15" fill="rgb(213,52,39)"/><text x="63.5889%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (14 samples, 0.33%)</title><rect x="63.3389%" y="229" width="0.3344%" height="15" fill="rgb(243,137,7)"/><text x="63.5889%" y="239.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (14 samples, 0.33%)</title><rect x="63.3389%" y="213" width="0.3344%" height="15" fill="rgb(230,79,13)"/><text x="63.5889%" y="223.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (14 samples, 0.33%)</title><rect x="63.3389%" y="197" width="0.3344%" height="15" fill="rgb(247,105,23)"/><text x="63.5889%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (14 samples, 0.33%)</title><rect x="64.4375%" y="101" width="0.3344%" height="15" fill="rgb(223,179,41)"/><text x="64.6875%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.33%)</title><rect x="64.4375%" y="85" width="0.3344%" height="15" fill="rgb(218,9,34)"/><text x="64.6875%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (14 samples, 0.33%)</title><rect x="64.4375%" y="69" width="0.3344%" height="15" fill="rgb(222,106,8)"/><text x="64.6875%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.14%)</title><rect x="64.6286%" y="53" width="0.1433%" height="15" fill="rgb(211,220,0)"/><text x="64.8786%" y="63.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (6 samples, 0.14%)</title><rect x="64.6286%" y="37" width="0.1433%" height="15" fill="rgb(229,52,16)"/><text x="64.8786%" y="47.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (69 samples, 1.65%)</title><rect x="64.2942%" y="117" width="1.6480%" height="15" fill="rgb(212,155,18)"/><text x="64.5442%" y="127.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (49 samples, 1.17%)</title><rect x="64.7719%" y="101" width="1.1703%" height="15" fill="rgb(242,21,14)"/><text x="65.0219%" y="111.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (48 samples, 1.15%)</title><rect x="64.7958%" y="85" width="1.1464%" height="15" fill="rgb(222,19,48)"/><text x="65.0458%" y="95.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (48 samples, 1.15%)</title><rect x="64.7958%" y="69" width="1.1464%" height="15" fill="rgb(232,45,27)"/><text x="65.0458%" y="79.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (48 samples, 1.15%)</title><rect x="64.7958%" y="53" width="1.1464%" height="15" fill="rgb(249,103,42)"/><text x="65.0458%" y="63.50"></text></g><g><title>__GI___libc_write (48 samples, 1.15%)</title><rect x="64.7958%" y="37" width="1.1464%" height="15" fill="rgb(246,81,33)"/><text x="65.0458%" y="47.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (115 samples, 2.75%)</title><rect x="64.2226%" y="149" width="2.7466%" height="15" fill="rgb(252,33,42)"/><text x="64.4726%" y="159.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (115 samples, 2.75%)</title><rect x="64.2226%" y="133" width="2.7466%" height="15" fill="rgb(209,212,41)"/><text x="64.4726%" y="143.50">&lt;s..</text></g><g><title>std::memchr::memrchr (39 samples, 0.93%)</title><rect x="66.0377%" y="117" width="0.9315%" height="15" fill="rgb(207,154,6)"/><text x="66.2877%" y="127.50"></text></g><g><title>std::sys::unix::memchr::memrchr (39 samples, 0.93%)</title><rect x="66.0377%" y="101" width="0.9315%" height="15" fill="rgb(223,64,47)"/><text x="66.2877%" y="111.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (39 samples, 0.93%)</title><rect x="66.0377%" y="85" width="0.9315%" height="15" fill="rgb(211,161,38)"/><text x="66.2877%" y="95.50"></text></g><g><title>__memrchr_sse2 (34 samples, 0.81%)</title><rect x="66.1572%" y="69" width="0.8120%" height="15" fill="rgb(219,138,40)"/><text x="66.4072%" y="79.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (5 samples, 0.12%)</title><rect x="66.9692%" y="149" width="0.1194%" height="15" fill="rgb(241,228,46)"/><text x="67.2192%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (5 samples, 0.12%)</title><rect x="66.9692%" y="133" width="0.1194%" height="15" fill="rgb(223,209,38)"/><text x="67.2192%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (125 samples, 2.99%)</title><rect x="64.1509%" y="181" width="2.9854%" height="15" fill="rgb(236,164,45)"/><text x="64.4009%" y="191.50">&lt;st..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (122 samples, 2.91%)</title><rect x="64.2226%" y="165" width="2.9138%" height="15" fill="rgb(231,15,5)"/><text x="64.4726%" y="175.50">&lt;s..</text></g><g><title>core::fmt::Formatter::write_str (5 samples, 0.12%)</title><rect x="67.1364%" y="181" width="0.1194%" height="15" fill="rgb(252,35,15)"/><text x="67.3864%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (7 samples, 0.17%)</title><rect x="67.6379%" y="85" width="0.1672%" height="15" fill="rgb(248,181,18)"/><text x="67.8879%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.17%)</title><rect x="67.6379%" y="69" width="0.1672%" height="15" fill="rgb(233,39,42)"/><text x="67.8879%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (7 samples, 0.17%)</title><rect x="67.6379%" y="53" width="0.1672%" height="15" fill="rgb(238,110,33)"/><text x="67.8879%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.12%)</title><rect x="67.6857%" y="37" width="0.1194%" height="15" fill="rgb(233,195,10)"/><text x="67.9357%" y="47.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (13 samples, 0.31%)</title><rect x="67.5424%" y="101" width="0.3105%" height="15" fill="rgb(254,105,3)"/><text x="67.7924%" y="111.50"></text></g><g><title>__memrchr_sse2 (6 samples, 0.14%)</title><rect x="67.9006%" y="53" width="0.1433%" height="15" fill="rgb(221,225,9)"/><text x="68.1506%" y="63.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (24 samples, 0.57%)</title><rect x="67.4946%" y="133" width="0.5732%" height="15" fill="rgb(224,227,45)"/><text x="67.7446%" y="143.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (24 samples, 0.57%)</title><rect x="67.4946%" y="117" width="0.5732%" height="15" fill="rgb(229,198,43)"/><text x="67.7446%" y="127.50"></text></g><g><title>std::memchr::memrchr (8 samples, 0.19%)</title><rect x="67.8768%" y="101" width="0.1911%" height="15" fill="rgb(206,209,35)"/><text x="68.1268%" y="111.50"></text></g><g><title>std::sys::unix::memchr::memrchr (8 samples, 0.19%)</title><rect x="67.8768%" y="85" width="0.1911%" height="15" fill="rgb(245,195,53)"/><text x="68.1268%" y="95.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (8 samples, 0.19%)</title><rect x="67.8768%" y="69" width="0.1911%" height="15" fill="rgb(240,92,26)"/><text x="68.1268%" y="79.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (27 samples, 0.64%)</title><rect x="67.4707%" y="165" width="0.6449%" height="15" fill="rgb(207,40,23)"/><text x="67.7207%" y="175.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (27 samples, 0.64%)</title><rect x="67.4707%" y="149" width="0.6449%" height="15" fill="rgb(223,111,35)"/><text x="67.7207%" y="159.50"></text></g><g><title>core::fmt::write (208 samples, 4.97%)</title><rect x="63.1717%" y="261" width="4.9678%" height="15" fill="rgb(229,147,28)"/><text x="63.4217%" y="271.50">core::..</text></g><g><title>crossterm::style::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::style::SetForegroundColor&gt;&gt;::fmt (186 samples, 4.44%)</title><rect x="63.6972%" y="245" width="4.4423%" height="15" fill="rgb(211,29,28)"/><text x="63.9472%" y="255.50">cross..</text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (184 samples, 4.39%)</title><rect x="63.7449%" y="229" width="4.3946%" height="15" fill="rgb(228,72,33)"/><text x="63.9949%" y="239.50">cross..</text></g><g><title>core::fmt::Formatter::write_fmt (182 samples, 4.35%)</title><rect x="63.7927%" y="213" width="4.3468%" height="15" fill="rgb(205,214,31)"/><text x="64.0427%" y="223.50">core:..</text></g><g><title>core::fmt::write (176 samples, 4.20%)</title><rect x="63.9360%" y="197" width="4.2035%" height="15" fill="rgb(224,111,15)"/><text x="64.1860%" y="207.50">core:..</text></g><g><title>crossterm::style::ansi::&lt;impl core::fmt::Display for crossterm::style::types::colored::Colored&gt;::fmt (36 samples, 0.86%)</title><rect x="67.2797%" y="181" width="0.8598%" height="15" fill="rgb(253,21,26)"/><text x="67.5297%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (215 samples, 5.13%)</title><rect x="63.0523%" y="277" width="5.1349%" height="15" fill="rgb(245,139,43)"/><text x="63.3023%" y="287.50">std::i..</text></g><g><title>__GI___pthread_mutex_lock (8 samples, 0.19%)</title><rect x="68.1872%" y="229" width="0.1911%" height="15" fill="rgb(252,170,7)"/><text x="68.4372%" y="239.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (247 samples, 5.90%)</title><rect x="62.5746%" y="309" width="5.8992%" height="15" fill="rgb(231,118,14)"/><text x="62.8246%" y="319.50">&lt;std::i..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (242 samples, 5.78%)</title><rect x="62.6941%" y="293" width="5.7798%" height="15" fill="rgb(238,83,0)"/><text x="62.9441%" y="303.50">&lt;&amp;std::..</text></g><g><title>std::io::stdio::Stdout::lock (12 samples, 0.29%)</title><rect x="68.1872%" y="277" width="0.2866%" height="15" fill="rgb(221,39,39)"/><text x="68.4372%" y="287.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (12 samples, 0.29%)</title><rect x="68.1872%" y="261" width="0.2866%" height="15" fill="rgb(222,119,46)"/><text x="68.4372%" y="271.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (12 samples, 0.29%)</title><rect x="68.1872%" y="245" width="0.2866%" height="15" fill="rgb(222,165,49)"/><text x="68.4372%" y="255.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (256 samples, 6.11%)</title><rect x="62.3836%" y="357" width="6.1142%" height="15" fill="rgb(219,113,52)"/><text x="62.6336%" y="367.50">irust::i..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (251 samples, 5.99%)</title><rect x="62.5030%" y="341" width="5.9947%" height="15" fill="rgb(214,7,15)"/><text x="62.7530%" y="351.50">core::re..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg::{{closure}} (249 samples, 5.95%)</title><rect x="62.5508%" y="325" width="5.9470%" height="15" fill="rgb(235,32,4)"/><text x="62.8008%" y="335.50">irust::i..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (12 samples, 0.29%)</title><rect x="68.5455%" y="325" width="0.2866%" height="15" fill="rgb(238,90,54)"/><text x="68.7955%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 0.17%)</title><rect x="69.5964%" y="261" width="0.1672%" height="15" fill="rgb(213,208,19)"/><text x="69.8464%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock (5 samples, 0.12%)</title><rect x="69.7636%" y="197" width="0.1194%" height="15" fill="rgb(233,156,4)"/><text x="70.0136%" y="207.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (48 samples, 1.15%)</title><rect x="69.8830%" y="197" width="1.1464%" height="15" fill="rgb(207,194,5)"/><text x="70.1330%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (64 samples, 1.53%)</title><rect x="69.7636%" y="261" width="1.5285%" height="15" fill="rgb(206,111,30)"/><text x="70.0136%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (64 samples, 1.53%)</title><rect x="69.7636%" y="245" width="1.5285%" height="15" fill="rgb(243,70,54)"/><text x="70.0136%" y="255.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 1.53%)</title><rect x="69.7636%" y="229" width="1.5285%" height="15" fill="rgb(242,28,8)"/><text x="70.0136%" y="239.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (64 samples, 1.53%)</title><rect x="69.7636%" y="213" width="1.5285%" height="15" fill="rgb(219,106,18)"/><text x="70.0136%" y="223.50"></text></g><g><title>pthread_mutex_unlock (11 samples, 0.26%)</title><rect x="71.0294%" y="197" width="0.2627%" height="15" fill="rgb(244,222,10)"/><text x="71.2794%" y="207.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (5 samples, 0.12%)</title><rect x="73.0356%" y="213" width="0.1194%" height="15" fill="rgb(236,179,52)"/><text x="73.2856%" y="223.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (7 samples, 0.17%)</title><rect x="73.0117%" y="229" width="0.1672%" height="15" fill="rgb(213,23,39)"/><text x="73.2617%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.33%)</title><rect x="73.1789%" y="229" width="0.3344%" height="15" fill="rgb(238,48,10)"/><text x="73.4289%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (14 samples, 0.33%)</title><rect x="73.1789%" y="213" width="0.3344%" height="15" fill="rgb(251,196,23)"/><text x="73.4289%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::capacity (5 samples, 0.12%)</title><rect x="74.0865%" y="149" width="0.1194%" height="15" fill="rgb(250,152,24)"/><text x="74.3365%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (8 samples, 0.19%)</title><rect x="74.2298%" y="101" width="0.1911%" height="15" fill="rgb(209,150,17)"/><text x="74.4798%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.19%)</title><rect x="74.2298%" y="85" width="0.1911%" height="15" fill="rgb(234,202,34)"/><text x="74.4798%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (8 samples, 0.19%)</title><rect x="74.2298%" y="69" width="0.1911%" height="15" fill="rgb(253,148,53)"/><text x="74.4798%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (8 samples, 0.19%)</title><rect x="74.2298%" y="53" width="0.1911%" height="15" fill="rgb(218,129,16)"/><text x="74.4798%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (8 samples, 0.19%)</title><rect x="74.2298%" y="37" width="0.1911%" height="15" fill="rgb(216,85,19)"/><text x="74.4798%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.41%)</title><rect x="74.4208%" y="101" width="0.4060%" height="15" fill="rgb(235,228,7)"/><text x="74.6708%" y="111.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (15 samples, 0.36%)</title><rect x="74.4686%" y="85" width="0.3583%" height="15" fill="rgb(245,175,0)"/><text x="74.7186%" y="95.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (48 samples, 1.15%)</title><rect x="73.8237%" y="165" width="1.1464%" height="15" fill="rgb(208,168,36)"/><text x="74.0737%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (32 samples, 0.76%)</title><rect x="74.2059%" y="149" width="0.7643%" height="15" fill="rgb(246,171,24)"/><text x="74.4559%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (32 samples, 0.76%)</title><rect x="74.2059%" y="133" width="0.7643%" height="15" fill="rgb(215,142,24)"/><text x="74.4559%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (32 samples, 0.76%)</title><rect x="74.2059%" y="117" width="0.7643%" height="15" fill="rgb(250,187,7)"/><text x="74.4559%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.14%)</title><rect x="74.8268%" y="101" width="0.1433%" height="15" fill="rgb(228,66,33)"/><text x="75.0768%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.14%)</title><rect x="74.8268%" y="85" width="0.1433%" height="15" fill="rgb(234,215,21)"/><text x="75.0768%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (9 samples, 0.21%)</title><rect x="74.9940%" y="149" width="0.2150%" height="15" fill="rgb(222,191,20)"/><text x="75.2440%" y="159.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (69 samples, 1.65%)</title><rect x="73.7043%" y="197" width="1.6480%" height="15" fill="rgb(245,79,54)"/><text x="73.9543%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (69 samples, 1.65%)</title><rect x="73.7043%" y="181" width="1.6480%" height="15" fill="rgb(240,10,37)"/><text x="73.9543%" y="191.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (16 samples, 0.38%)</title><rect x="74.9701%" y="165" width="0.3821%" height="15" fill="rgb(214,192,32)"/><text x="75.2201%" y="175.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (6 samples, 0.14%)</title><rect x="75.2090%" y="149" width="0.1433%" height="15" fill="rgb(209,36,54)"/><text x="75.4590%" y="159.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (6 samples, 0.14%)</title><rect x="75.2090%" y="133" width="0.1433%" height="15" fill="rgb(220,10,11)"/><text x="75.4590%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.14%)</title><rect x="75.2090%" y="117" width="0.1433%" height="15" fill="rgb(221,106,17)"/><text x="75.4590%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (6 samples, 0.14%)</title><rect x="75.2090%" y="101" width="0.1433%" height="15" fill="rgb(251,142,44)"/><text x="75.4590%" y="111.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (92 samples, 2.20%)</title><rect x="73.5133%" y="229" width="2.1973%" height="15" fill="rgb(238,13,15)"/><text x="73.7633%" y="239.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (88 samples, 2.10%)</title><rect x="73.6088%" y="213" width="2.1017%" height="15" fill="rgb(208,107,27)"/><text x="73.8588%" y="223.50">&lt;..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (15 samples, 0.36%)</title><rect x="75.3523%" y="197" width="0.3583%" height="15" fill="rgb(205,136,37)"/><text x="75.6023%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (15 samples, 0.36%)</title><rect x="75.3523%" y="181" width="0.3583%" height="15" fill="rgb(250,205,27)"/><text x="75.6023%" y="191.50"></text></g><g><title>core::cell::BorrowRefMut::new (14 samples, 0.33%)</title><rect x="75.3762%" y="165" width="0.3344%" height="15" fill="rgb(210,80,43)"/><text x="75.6262%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (7 samples, 0.17%)</title><rect x="75.5433%" y="149" width="0.1672%" height="15" fill="rgb(247,160,36)"/><text x="75.7933%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.17%)</title><rect x="75.5433%" y="133" width="0.1672%" height="15" fill="rgb(234,13,49)"/><text x="75.7933%" y="143.50"></text></g><g><title>core::mem::replace (7 samples, 0.17%)</title><rect x="75.5433%" y="117" width="0.1672%" height="15" fill="rgb(234,122,0)"/><text x="75.7933%" y="127.50"></text></g><g><title>core::mem::swap (7 samples, 0.17%)</title><rect x="75.5433%" y="101" width="0.1672%" height="15" fill="rgb(207,146,38)"/><text x="75.7933%" y="111.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (7 samples, 0.17%)</title><rect x="75.5433%" y="85" width="0.1672%" height="15" fill="rgb(207,177,25)"/><text x="75.7933%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.17%)</title><rect x="75.5433%" y="69" width="0.1672%" height="15" fill="rgb(211,178,42)"/><text x="75.7933%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (7 samples, 0.17%)</title><rect x="76.3793%" y="85" width="0.1672%" height="15" fill="rgb(230,69,54)"/><text x="76.6293%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.17%)</title><rect x="76.3793%" y="69" width="0.1672%" height="15" fill="rgb(214,135,41)"/><text x="76.6293%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (7 samples, 0.17%)</title><rect x="76.3793%" y="53" width="0.1672%" height="15" fill="rgb(237,67,25)"/><text x="76.6293%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (7 samples, 0.17%)</title><rect x="76.3793%" y="37" width="0.1672%" height="15" fill="rgb(222,189,50)"/><text x="76.6293%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (27 samples, 0.64%)</title><rect x="76.3554%" y="133" width="0.6449%" height="15" fill="rgb(245,148,34)"/><text x="76.6054%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (27 samples, 0.64%)</title><rect x="76.3554%" y="117" width="0.6449%" height="15" fill="rgb(222,29,6)"/><text x="76.6054%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (27 samples, 0.64%)</title><rect x="76.3554%" y="101" width="0.6449%" height="15" fill="rgb(221,189,43)"/><text x="76.6054%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.45%)</title><rect x="76.5465%" y="85" width="0.4538%" height="15" fill="rgb(207,36,27)"/><text x="76.7965%" y="95.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (19 samples, 0.45%)</title><rect x="76.5465%" y="69" width="0.4538%" height="15" fill="rgb(217,90,24)"/><text x="76.7965%" y="79.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (57 samples, 1.36%)</title><rect x="76.0449%" y="149" width="1.3614%" height="15" fill="rgb(224,66,35)"/><text x="76.2949%" y="159.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (17 samples, 0.41%)</title><rect x="77.0002%" y="133" width="0.4060%" height="15" fill="rgb(221,13,50)"/><text x="77.2502%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (17 samples, 0.41%)</title><rect x="77.0002%" y="117" width="0.4060%" height="15" fill="rgb(236,68,49)"/><text x="77.2502%" y="127.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (17 samples, 0.41%)</title><rect x="77.0002%" y="101" width="0.4060%" height="15" fill="rgb(229,146,28)"/><text x="77.2502%" y="111.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (17 samples, 0.41%)</title><rect x="77.0002%" y="85" width="0.4060%" height="15" fill="rgb(225,31,38)"/><text x="77.2502%" y="95.50"></text></g><g><title>__GI___libc_write (17 samples, 0.41%)</title><rect x="77.0002%" y="69" width="0.4060%" height="15" fill="rgb(250,208,3)"/><text x="77.2502%" y="79.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (9 samples, 0.21%)</title><rect x="77.4063%" y="149" width="0.2150%" height="15" fill="rgb(246,54,23)"/><text x="77.6563%" y="159.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (9 samples, 0.21%)</title><rect x="77.4063%" y="133" width="0.2150%" height="15" fill="rgb(243,76,11)"/><text x="77.6563%" y="143.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (9 samples, 0.21%)</title><rect x="77.4063%" y="117" width="0.2150%" height="15" fill="rgb(245,21,50)"/><text x="77.6563%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.21%)</title><rect x="77.4063%" y="101" width="0.2150%" height="15" fill="rgb(228,9,43)"/><text x="77.6563%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (8 samples, 0.19%)</title><rect x="77.4301%" y="85" width="0.1911%" height="15" fill="rgb(208,100,47)"/><text x="77.6801%" y="95.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (91 samples, 2.17%)</title><rect x="76.0210%" y="181" width="2.1734%" height="15" fill="rgb(232,26,8)"/><text x="76.2710%" y="191.50">&lt;..</text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (91 samples, 2.17%)</title><rect x="76.0210%" y="165" width="2.1734%" height="15" fill="rgb(216,166,38)"/><text x="76.2710%" y="175.50">&lt;..</text></g><g><title>std::memchr::memrchr (24 samples, 0.57%)</title><rect x="77.6212%" y="149" width="0.5732%" height="15" fill="rgb(251,202,51)"/><text x="77.8712%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr (24 samples, 0.57%)</title><rect x="77.6212%" y="133" width="0.5732%" height="15" fill="rgb(254,216,34)"/><text x="77.8712%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (24 samples, 0.57%)</title><rect x="77.6212%" y="117" width="0.5732%" height="15" fill="rgb(251,32,27)"/><text x="77.8712%" y="127.50"></text></g><g><title>__memrchr_sse2 (19 samples, 0.45%)</title><rect x="77.7406%" y="101" width="0.4538%" height="15" fill="rgb(208,127,28)"/><text x="77.9906%" y="111.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (6 samples, 0.14%)</title><rect x="78.1944%" y="181" width="0.1433%" height="15" fill="rgb(224,137,22)"/><text x="78.4444%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (6 samples, 0.14%)</title><rect x="78.1944%" y="165" width="0.1433%" height="15" fill="rgb(254,70,32)"/><text x="78.4444%" y="175.50"></text></g><g><title>core::cell::BorrowRefMut::new (6 samples, 0.14%)</title><rect x="78.1944%" y="149" width="0.1433%" height="15" fill="rgb(229,75,37)"/><text x="78.4444%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (108 samples, 2.58%)</title><rect x="75.7822%" y="213" width="2.5794%" height="15" fill="rgb(252,64,23)"/><text x="76.0322%" y="223.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (98 samples, 2.34%)</title><rect x="76.0210%" y="197" width="2.3406%" height="15" fill="rgb(232,162,48)"/><text x="76.2710%" y="207.50">&lt;..</text></g><g><title>core::char::methods::encode_utf8_raw (7 samples, 0.17%)</title><rect x="78.3616%" y="197" width="0.1672%" height="15" fill="rgb(246,160,12)"/><text x="78.6116%" y="207.50"></text></g><g><title>core::fmt::Write::write_char (119 samples, 2.84%)</title><rect x="75.7105%" y="229" width="2.8421%" height="15" fill="rgb(247,166,0)"/><text x="75.9605%" y="239.50">co..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (8 samples, 0.19%)</title><rect x="78.3616%" y="213" width="0.1911%" height="15" fill="rgb(249,219,21)"/><text x="78.6116%" y="223.50"></text></g><g><title>core::fmt::write (279 samples, 6.66%)</title><rect x="71.9847%" y="245" width="6.6635%" height="15" fill="rgb(205,209,3)"/><text x="72.2347%" y="255.50">core::fmt..</text></g><g><title>std::io::Write::write_fmt (310 samples, 7.40%)</title><rect x="71.2921%" y="261" width="7.4039%" height="15" fill="rgb(243,44,1)"/><text x="71.5421%" y="271.50">std::io::W..</text></g><g><title>__GI___pthread_mutex_lock (63 samples, 1.50%)</title><rect x="78.6960%" y="213" width="1.5047%" height="15" fill="rgb(206,159,16)"/><text x="78.9460%" y="223.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (483 samples, 11.54%)</title><rect x="68.9754%" y="293" width="11.5357%" height="15" fill="rgb(244,77,30)"/><text x="69.2254%" y="303.50">&lt;std::io::stdio::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (465 samples, 11.11%)</title><rect x="69.4053%" y="277" width="11.1058%" height="15" fill="rgb(218,69,12)"/><text x="69.6553%" y="287.50">&lt;&amp;std::io::stdio..</text></g><g><title>std::io::stdio::Stdout::lock (76 samples, 1.82%)</title><rect x="78.6960%" y="261" width="1.8151%" height="15" fill="rgb(212,87,7)"/><text x="78.9460%" y="271.50">s..</text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (76 samples, 1.82%)</title><rect x="78.6960%" y="245" width="1.8151%" height="15" fill="rgb(245,114,25)"/><text x="78.9460%" y="255.50">s..</text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (76 samples, 1.82%)</title><rect x="78.6960%" y="229" width="1.8151%" height="15" fill="rgb(210,61,42)"/><text x="78.9460%" y="239.50">s..</text></g><g><title>pthread_mutex_lock (13 samples, 0.31%)</title><rect x="80.2006%" y="213" width="0.3105%" height="15" fill="rgb(211,52,33)"/><text x="80.4506%" y="223.50"></text></g><g><title>core::fmt::Arguments::new_v1 (7 samples, 0.17%)</title><rect x="80.5111%" y="293" width="0.1672%" height="15" fill="rgb(234,58,33)"/><text x="80.7611%" y="303.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (501 samples, 11.97%)</title><rect x="68.8321%" y="309" width="11.9656%" height="15" fill="rgb(220,115,36)"/><text x="69.0821%" y="319.50">irust::irust::raw_..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (516 samples, 12.32%)</title><rect x="68.5216%" y="341" width="12.3239%" height="15" fill="rgb(243,153,54)"/><text x="68.7716%" y="351.50">irust::irust::raw_..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (503 samples, 12.01%)</title><rect x="68.8321%" y="325" width="12.0134%" height="15" fill="rgb(251,47,18)"/><text x="69.0821%" y="335.50">core::result::Resu..</text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner (1,972 samples, 47.10%)</title><rect x="33.9145%" y="389" width="47.0982%" height="15" fill="rgb(242,102,42)"/><text x="34.1645%" y="399.50">irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (877 samples, 20.95%)</title><rect x="60.0669%" y="373" width="20.9458%" height="15" fill="rgb(234,31,38)"/><text x="60.3169%" y="383.50">irust::irust::writer::&lt;impl irust..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (524 samples, 12.51%)</title><rect x="68.4977%" y="357" width="12.5149%" height="15" fill="rgb(221,117,51)"/><text x="68.7477%" y="367.50">irust::irust::raw_t..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (7 samples, 0.17%)</title><rect x="80.8455%" y="341" width="0.1672%" height="15" fill="rgb(212,20,18)"/><text x="81.0955%" y="351.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::scroll_if_needed_for_input (14 samples, 0.33%)</title><rect x="81.0127%" y="389" width="0.3344%" height="15" fill="rgb(245,133,36)"/><text x="81.2627%" y="399.50"></text></g><g><title>irust::irust::cursor::Cursor::input_last_pos (14 samples, 0.33%)</title><rect x="81.0127%" y="373" width="0.3344%" height="15" fill="rgb(212,6,19)"/><text x="81.2627%" y="383.50"></text></g><g><title>irust::irust::buffer::Buffer::last_buffer_pos_to_relative_cursor_pos (14 samples, 0.33%)</title><rect x="81.0127%" y="357" width="0.3344%" height="15" fill="rgb(218,1,36)"/><text x="81.2627%" y="367.50"></text></g><g><title>irust::irust::buffer::Buffer::buffer_pos_to_relative_cursor_pos (14 samples, 0.33%)</title><rect x="81.0127%" y="341" width="0.3344%" height="15" fill="rgb(246,84,54)"/><text x="81.2627%" y="351.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 0.14%)</title><rect x="81.6097%" y="293" width="0.1433%" height="15" fill="rgb(242,110,6)"/><text x="81.8597%" y="303.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 0.14%)</title><rect x="81.6097%" y="277" width="0.1433%" height="15" fill="rgb(214,47,5)"/><text x="81.8597%" y="287.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_character (2,516 samples, 60.09%)</title><rect x="21.6862%" y="421" width="60.0908%" height="15" fill="rgb(218,159,25)"/><text x="21.9362%" y="431.50">irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_character</text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input (2,496 samples, 59.61%)</title><rect x="22.1638%" y="405" width="59.6131%" height="15" fill="rgb(215,211,28)"/><text x="22.4138%" y="415.50">irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_from_terminal_start (16 samples, 0.38%)</title><rect x="81.3948%" y="389" width="0.3821%" height="15" fill="rgb(238,59,32)"/><text x="81.6448%" y="399.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (11 samples, 0.26%)</title><rect x="81.5142%" y="373" width="0.2627%" height="15" fill="rgb(226,82,3)"/><text x="81.7642%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (7 samples, 0.17%)</title><rect x="81.6097%" y="357" width="0.1672%" height="15" fill="rgb(240,164,32)"/><text x="81.8597%" y="367.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (7 samples, 0.17%)</title><rect x="81.6097%" y="341" width="0.1672%" height="15" fill="rgb(232,46,7)"/><text x="81.8597%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (7 samples, 0.17%)</title><rect x="81.6097%" y="325" width="0.1672%" height="15" fill="rgb(229,129,53)"/><text x="81.8597%" y="335.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (7 samples, 0.17%)</title><rect x="81.6097%" y="309" width="0.1672%" height="15" fill="rgb(234,188,29)"/><text x="81.8597%" y="319.50"></text></g><g><title>irust::irust::highlight::parse (13 samples, 0.31%)</title><rect x="82.0158%" y="357" width="0.3105%" height="15" fill="rgb(246,141,4)"/><text x="82.2658%" y="367.50"></text></g><g><title>irust::irust::highlight::catch_all (6 samples, 0.14%)</title><rect x="82.1829%" y="341" width="0.1433%" height="15" fill="rgb(229,23,39)"/><text x="82.4329%" y="351.50"></text></g><g><title>irust::irust::highlight::highlight (21 samples, 0.50%)</title><rect x="81.8725%" y="373" width="0.5016%" height="15" fill="rgb(206,12,3)"/><text x="82.1225%" y="383.50"></text></g><g><title>&lt;irust::irust::printer::Printer as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.62%)</title><rect x="82.5651%" y="357" width="0.6210%" height="15" fill="rgb(252,226,20)"/><text x="82.8151%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::remove (26 samples, 0.62%)</title><rect x="82.5651%" y="341" width="0.6210%" height="15" fill="rgb(216,123,35)"/><text x="82.8151%" y="351.50"></text></g><g><title>core::intrinsics::copy (25 samples, 0.60%)</title><rect x="82.5890%" y="325" width="0.5971%" height="15" fill="rgb(212,68,40)"/><text x="82.8390%" y="335.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (25 samples, 0.60%)</title><rect x="82.5890%" y="309" width="0.5971%" height="15" fill="rgb(254,125,32)"/><text x="82.8390%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.12%)</title><rect x="83.1861%" y="357" width="0.1194%" height="15" fill="rgb(253,97,22)"/><text x="83.4361%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.12%)</title><rect x="83.1861%" y="341" width="0.1194%" height="15" fill="rgb(241,101,14)"/><text x="83.4361%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.12%)</title><rect x="83.1861%" y="325" width="0.1194%" height="15" fill="rgb(238,103,29)"/><text x="83.4361%" y="335.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (10 samples, 0.24%)</title><rect x="83.4249%" y="341" width="0.2388%" height="15" fill="rgb(233,195,47)"/><text x="83.6749%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (10 samples, 0.24%)</title><rect x="83.4249%" y="325" width="0.2388%" height="15" fill="rgb(246,218,30)"/><text x="83.6749%" y="335.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg::{{closure}} (10 samples, 0.24%)</title><rect x="83.4249%" y="309" width="0.2388%" height="15" fill="rgb(219,145,47)"/><text x="83.6749%" y="319.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (10 samples, 0.24%)</title><rect x="83.4249%" y="293" width="0.2388%" height="15" fill="rgb(243,12,26)"/><text x="83.6749%" y="303.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (10 samples, 0.24%)</title><rect x="83.4249%" y="277" width="0.2388%" height="15" fill="rgb(214,87,16)"/><text x="83.6749%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (7 samples, 0.17%)</title><rect x="83.4965%" y="261" width="0.1672%" height="15" fill="rgb(208,99,42)"/><text x="83.7465%" y="271.50"></text></g><g><title>core::fmt::write (7 samples, 0.17%)</title><rect x="83.4965%" y="245" width="0.1672%" height="15" fill="rgb(253,99,2)"/><text x="83.7465%" y="255.50"></text></g><g><title>crossterm::style::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::style::SetForegroundColor&gt;&gt;::fmt (7 samples, 0.17%)</title><rect x="83.4965%" y="229" width="0.1672%" height="15" fill="rgb(220,168,23)"/><text x="83.7465%" y="239.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (6 samples, 0.14%)</title><rect x="83.5204%" y="213" width="0.1433%" height="15" fill="rgb(242,38,24)"/><text x="83.7704%" y="223.50"></text></g><g><title>core::fmt::Formatter::write_fmt (6 samples, 0.14%)</title><rect x="83.5204%" y="197" width="0.1433%" height="15" fill="rgb(225,182,9)"/><text x="83.7704%" y="207.50"></text></g><g><title>core::fmt::write (5 samples, 0.12%)</title><rect x="83.5443%" y="181" width="0.1194%" height="15" fill="rgb(243,178,37)"/><text x="83.7943%" y="191.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.12%)</title><rect x="83.5443%" y="165" width="0.1194%" height="15" fill="rgb(232,139,19)"/><text x="83.7943%" y="175.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.12%)</title><rect x="83.5443%" y="149" width="0.1194%" height="15" fill="rgb(225,201,24)"/><text x="83.7943%" y="159.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.12%)</title><rect x="83.5443%" y="133" width="0.1194%" height="15" fill="rgb(221,47,46)"/><text x="83.7943%" y="143.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.12%)</title><rect x="83.5443%" y="117" width="0.1194%" height="15" fill="rgb(249,23,13)"/><text x="83.7943%" y="127.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.12%)</title><rect x="83.8548%" y="165" width="0.1194%" height="15" fill="rgb(219,9,5)"/><text x="84.1048%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.12%)</title><rect x="83.8548%" y="149" width="0.1194%" height="15" fill="rgb(254,171,16)"/><text x="84.1048%" y="159.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner (69 samples, 1.65%)</title><rect x="82.3740%" y="373" width="1.6480%" height="15" fill="rgb(230,171,20)"/><text x="82.6240%" y="383.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (30 samples, 0.72%)</title><rect x="83.3055%" y="357" width="0.7165%" height="15" fill="rgb(210,71,41)"/><text x="83.5555%" y="367.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (15 samples, 0.36%)</title><rect x="83.6637%" y="341" width="0.3583%" height="15" fill="rgb(206,173,20)"/><text x="83.9137%" y="351.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (15 samples, 0.36%)</title><rect x="83.6637%" y="325" width="0.3583%" height="15" fill="rgb(233,88,34)"/><text x="83.9137%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (15 samples, 0.36%)</title><rect x="83.6637%" y="309" width="0.3583%" height="15" fill="rgb(223,209,46)"/><text x="83.9137%" y="319.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (15 samples, 0.36%)</title><rect x="83.6637%" y="293" width="0.3583%" height="15" fill="rgb(250,43,18)"/><text x="83.9137%" y="303.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (15 samples, 0.36%)</title><rect x="83.6637%" y="277" width="0.3583%" height="15" fill="rgb(208,13,10)"/><text x="83.9137%" y="287.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (13 samples, 0.31%)</title><rect x="83.7115%" y="261" width="0.3105%" height="15" fill="rgb(212,200,36)"/><text x="83.9615%" y="271.50"></text></g><g><title>std::io::Write::write_fmt (13 samples, 0.31%)</title><rect x="83.7115%" y="245" width="0.3105%" height="15" fill="rgb(225,90,30)"/><text x="83.9615%" y="255.50"></text></g><g><title>core::fmt::write (12 samples, 0.29%)</title><rect x="83.7354%" y="229" width="0.2866%" height="15" fill="rgb(236,182,39)"/><text x="83.9854%" y="239.50"></text></g><g><title>core::fmt::Write::write_char (7 samples, 0.17%)</title><rect x="83.8548%" y="213" width="0.1672%" height="15" fill="rgb(212,144,35)"/><text x="84.1048%" y="223.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.17%)</title><rect x="83.8548%" y="197" width="0.1672%" height="15" fill="rgb(228,63,44)"/><text x="84.1048%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.17%)</title><rect x="83.8548%" y="181" width="0.1672%" height="15" fill="rgb(228,109,6)"/><text x="84.1048%" y="191.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_enter (95 samples, 2.27%)</title><rect x="81.7769%" y="421" width="2.2689%" height="15" fill="rgb(238,117,24)"/><text x="82.0269%" y="431.50">i..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_from_next_line (92 samples, 2.20%)</title><rect x="81.8486%" y="405" width="2.1973%" height="15" fill="rgb(242,26,26)"/><text x="82.0986%" y="415.50">i..</text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input (92 samples, 2.20%)</title><rect x="81.8486%" y="389" width="2.1973%" height="15" fill="rgb(221,92,48)"/><text x="82.0986%" y="399.50">i..</text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (15 samples, 0.36%)</title><rect x="84.0459%" y="133" width="0.3583%" height="15" fill="rgb(209,209,32)"/><text x="84.2959%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 0.36%)</title><rect x="84.0459%" y="117" width="0.3583%" height="15" fill="rgb(221,70,22)"/><text x="84.2959%" y="127.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create::{{closure}} (14 samples, 0.33%)</title><rect x="84.0697%" y="101" width="0.3344%" height="15" fill="rgb(248,145,5)"/><text x="84.3197%" y="111.50"></text></g><g><title>irust::irust::IRust::handle_input_event (2,674 samples, 63.86%)</title><rect x="21.6145%" y="437" width="63.8643%" height="15" fill="rgb(226,116,26)"/><text x="21.8645%" y="447.50">irust::irust::IRust::handle_input_event</text></g><g><title>irust::irust::events::history_events::&lt;impl irust::irust::IRust&gt;::handle_history (60 samples, 1.43%)</title><rect x="84.0459%" y="421" width="1.4330%" height="15" fill="rgb(244,5,17)"/><text x="84.2959%" y="431.50"></text></g><g><title>irust::irust::history::History::up (60 samples, 1.43%)</title><rect x="84.0459%" y="405" width="1.4330%" height="15" fill="rgb(252,159,33)"/><text x="84.2959%" y="415.50"></text></g><g><title>irust::irust::history::History::filter (60 samples, 1.43%)</title><rect x="84.0459%" y="389" width="1.4330%" height="15" fill="rgb(206,71,0)"/><text x="84.2959%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (60 samples, 1.43%)</title><rect x="84.0459%" y="373" width="1.4330%" height="15" fill="rgb(233,118,54)"/><text x="84.2959%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (60 samples, 1.43%)</title><rect x="84.0459%" y="357" width="1.4330%" height="15" fill="rgb(234,83,48)"/><text x="84.2959%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (60 samples, 1.43%)</title><rect x="84.0459%" y="341" width="1.4330%" height="15" fill="rgb(228,3,54)"/><text x="84.2959%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (60 samples, 1.43%)</title><rect x="84.0459%" y="325" width="1.4330%" height="15" fill="rgb(226,155,13)"/><text x="84.2959%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 1.43%)</title><rect x="84.0459%" y="309" width="1.4330%" height="15" fill="rgb(241,28,37)"/><text x="84.2959%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 1.43%)</title><rect x="84.0459%" y="293" width="1.4330%" height="15" fill="rgb(233,93,10)"/><text x="84.2959%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (60 samples, 1.43%)</title><rect x="84.0459%" y="277" width="1.4330%" height="15" fill="rgb(225,113,19)"/><text x="84.2959%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (60 samples, 1.43%)</title><rect x="84.0459%" y="261" width="1.4330%" height="15" fill="rgb(241,2,18)"/><text x="84.2959%" y="271.50"></text></g><g><title>irust::irust::history::History::filter::{{closure}} (60 samples, 1.43%)</title><rect x="84.0459%" y="245" width="1.4330%" height="15" fill="rgb(228,207,21)"/><text x="84.2959%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (60 samples, 1.43%)</title><rect x="84.0459%" y="229" width="1.4330%" height="15" fill="rgb(213,211,35)"/><text x="84.2959%" y="239.50"></text></g><g><title>&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_contained_in (60 samples, 1.43%)</title><rect x="84.0459%" y="213" width="1.4330%" height="15" fill="rgb(209,83,10)"/><text x="84.2959%" y="223.50"></text></g><g><title>core::str::pattern::Pattern::is_contained_in (60 samples, 1.43%)</title><rect x="84.0459%" y="197" width="1.4330%" height="15" fill="rgb(209,164,1)"/><text x="84.2959%" y="207.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (60 samples, 1.43%)</title><rect x="84.0459%" y="181" width="1.4330%" height="15" fill="rgb(213,184,43)"/><text x="84.2959%" y="191.50"></text></g><g><title>core::str::pattern::StrSearcher::new (60 samples, 1.43%)</title><rect x="84.0459%" y="165" width="1.4330%" height="15" fill="rgb(231,61,34)"/><text x="84.2959%" y="175.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (60 samples, 1.43%)</title><rect x="84.0459%" y="149" width="1.4330%" height="15" fill="rgb(235,75,3)"/><text x="84.2959%" y="159.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (45 samples, 1.07%)</title><rect x="84.4041%" y="133" width="1.0748%" height="15" fill="rgb(220,106,47)"/><text x="84.6541%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (12 samples, 0.29%)</title><rect x="85.1923%" y="117" width="0.2866%" height="15" fill="rgb(210,196,33)"/><text x="85.4423%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (12 samples, 0.29%)</title><rect x="85.1923%" y="101" width="0.2866%" height="15" fill="rgb(229,154,42)"/><text x="85.4423%" y="111.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::flush (49 samples, 1.17%)</title><rect x="85.5266%" y="437" width="1.1703%" height="15" fill="rgb(228,114,26)"/><text x="85.7766%" y="447.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (48 samples, 1.15%)</title><rect x="85.5505%" y="421" width="1.1464%" height="15" fill="rgb(208,144,1)"/><text x="85.8005%" y="431.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (48 samples, 1.15%)</title><rect x="85.5505%" y="405" width="1.1464%" height="15" fill="rgb(239,112,37)"/><text x="85.8005%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (48 samples, 1.15%)</title><rect x="85.5505%" y="389" width="1.1464%" height="15" fill="rgb(210,96,50)"/><text x="85.8005%" y="399.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (48 samples, 1.15%)</title><rect x="85.5505%" y="373" width="1.1464%" height="15" fill="rgb(222,178,2)"/><text x="85.8005%" y="383.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (48 samples, 1.15%)</title><rect x="85.5505%" y="357" width="1.1464%" height="15" fill="rgb(226,74,18)"/><text x="85.8005%" y="367.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (48 samples, 1.15%)</title><rect x="85.5505%" y="341" width="1.1464%" height="15" fill="rgb(225,67,54)"/><text x="85.8005%" y="351.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (48 samples, 1.15%)</title><rect x="85.5505%" y="325" width="1.1464%" height="15" fill="rgb(251,92,32)"/><text x="85.8005%" y="335.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (48 samples, 1.15%)</title><rect x="85.5505%" y="309" width="1.1464%" height="15" fill="rgb(228,149,22)"/><text x="85.8005%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (48 samples, 1.15%)</title><rect x="85.5505%" y="293" width="1.1464%" height="15" fill="rgb(243,54,13)"/><text x="85.8005%" y="303.50"></text></g><g><title>__GI___libc_write (48 samples, 1.15%)</title><rect x="85.5505%" y="277" width="1.1464%" height="15" fill="rgb(243,180,28)"/><text x="85.8005%" y="287.50"></text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (78 samples, 1.86%)</title><rect x="86.7925%" y="405" width="1.8629%" height="15" fill="rgb(208,167,24)"/><text x="87.0425%" y="415.50">s..</text></g><g><title>std::thread::park (74 samples, 1.77%)</title><rect x="86.8880%" y="389" width="1.7674%" height="15" fill="rgb(245,73,45)"/><text x="87.1380%" y="399.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (74 samples, 1.77%)</title><rect x="86.8880%" y="373" width="1.7674%" height="15" fill="rgb(237,203,48)"/><text x="87.1380%" y="383.50"></text></g><g><title>std::sys::unix::futex::futex_wait (72 samples, 1.72%)</title><rect x="86.9358%" y="357" width="1.7196%" height="15" fill="rgb(211,197,16)"/><text x="87.1858%" y="367.50"></text></g><g><title>syscall (72 samples, 1.72%)</title><rect x="86.9358%" y="341" width="1.7196%" height="15" fill="rgb(243,99,51)"/><text x="87.1858%" y="351.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (86 samples, 2.05%)</title><rect x="86.6969%" y="437" width="2.0540%" height="15" fill="rgb(215,123,29)"/><text x="86.9469%" y="447.50">s..</text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::recv (83 samples, 1.98%)</title><rect x="86.7686%" y="421" width="1.9823%" height="15" fill="rgb(239,186,37)"/><text x="87.0186%" y="431.50">s..</text></g><g><title>std::panic::catch_unwind (2,865 samples, 68.43%)</title><rect x="21.2563%" y="581" width="68.4261%" height="15" fill="rgb(252,136,39)"/><text x="21.5063%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,865 samples, 68.43%)</title><rect x="21.2563%" y="565" width="68.4261%" height="15" fill="rgb(223,213,32)"/><text x="21.5063%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,865 samples, 68.43%)</title><rect x="21.2563%" y="549" width="68.4261%" height="15" fill="rgb(233,115,5)"/><text x="21.5063%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,865 samples, 68.43%)</title><rect x="21.2563%" y="533" width="68.4261%" height="15" fill="rgb(207,226,44)"/><text x="21.5063%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,865 samples, 68.43%)</title><rect x="21.2563%" y="517" width="68.4261%" height="15" fill="rgb(208,126,0)"/><text x="21.5063%" y="527.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,865 samples, 68.43%)</title><rect x="21.2563%" y="501" width="68.4261%" height="15" fill="rgb(244,66,21)"/><text x="21.5063%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,865 samples, 68.43%)</title><rect x="21.2563%" y="485" width="68.4261%" height="15" fill="rgb(222,97,12)"/><text x="21.5063%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>irust::main (2,865 samples, 68.43%)</title><rect x="21.2563%" y="469" width="68.4261%" height="15" fill="rgb(219,213,19)"/><text x="21.5063%" y="479.50">irust::main</text></g><g><title>irust::irust::IRust::run (2,850 samples, 68.07%)</title><rect x="21.6145%" y="453" width="68.0678%" height="15" fill="rgb(252,169,30)"/><text x="21.8645%" y="463.50">irust::irust::IRust::run</text></g><g><title>std::thread::Thread::unpark (39 samples, 0.93%)</title><rect x="88.7509%" y="437" width="0.9315%" height="15" fill="rgb(206,32,51)"/><text x="89.0009%" y="447.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (39 samples, 0.93%)</title><rect x="88.7509%" y="421" width="0.9315%" height="15" fill="rgb(250,172,42)"/><text x="89.0009%" y="431.50"></text></g><g><title>syscall (39 samples, 0.93%)</title><rect x="88.7509%" y="405" width="0.9315%" height="15" fill="rgb(209,34,43)"/><text x="89.0009%" y="415.50"></text></g><g><title>__libc_start_main (2,866 samples, 68.45%)</title><rect x="21.2563%" y="629" width="68.4500%" height="15" fill="rgb(223,11,35)"/><text x="21.5063%" y="639.50">__libc_start_main</text></g><g><title>main (2,866 samples, 68.45%)</title><rect x="21.2563%" y="613" width="68.4500%" height="15" fill="rgb(251,219,26)"/><text x="21.5063%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (2,866 samples, 68.45%)</title><rect x="21.2563%" y="597" width="68.4500%" height="15" fill="rgb(231,119,3)"/><text x="21.5063%" y="607.50">std::rt::lang_start_internal</text></g><g><title>_start (2,876 samples, 68.69%)</title><rect x="21.0891%" y="645" width="68.6888%" height="15" fill="rgb(216,97,11)"/><text x="21.3391%" y="655.50">_start</text></g><g><title>anon.4a947385cb939e82d81a1dbb345b280b.16.llvm.14652969079069460439 (15 samples, 0.36%)</title><rect x="89.7779%" y="645" width="0.3583%" height="15" fill="rgb(223,59,9)"/><text x="90.0279%" y="655.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (15 samples, 0.36%)</title><rect x="89.7779%" y="629" width="0.3583%" height="15" fill="rgb(233,93,31)"/><text x="90.0279%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.12%)</title><rect x="90.0167%" y="613" width="0.1194%" height="15" fill="rgb(239,81,33)"/><text x="90.2667%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.12%)</title><rect x="90.0167%" y="597" width="0.1194%" height="15" fill="rgb(213,120,34)"/><text x="90.2667%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.12%)</title><rect x="90.0167%" y="581" width="0.1194%" height="15" fill="rgb(243,49,53)"/><text x="90.2667%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.12%)</title><rect x="90.0167%" y="565" width="0.1194%" height="15" fill="rgb(247,216,33)"/><text x="90.2667%" y="575.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (7 samples, 0.17%)</title><rect x="90.3033%" y="645" width="0.1672%" height="15" fill="rgb(226,26,14)"/><text x="90.5533%" y="655.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 0.17%)</title><rect x="90.4944%" y="629" width="0.1672%" height="15" fill="rgb(215,49,53)"/><text x="90.7444%" y="639.50"></text></g><g><title>core::fmt::write (24 samples, 0.57%)</title><rect x="90.8049%" y="629" width="0.5732%" height="15" fill="rgb(245,162,40)"/><text x="91.0549%" y="639.50"></text></g><g><title>std::io::stdio::stdout::INSTANCE (43 samples, 1.03%)</title><rect x="90.4944%" y="645" width="1.0270%" height="15" fill="rgb(229,68,17)"/><text x="90.7444%" y="655.50"></text></g><g><title>irust (3,448 samples, 82.35%)</title><rect x="9.1951%" y="661" width="82.3501%" height="15" fill="rgb(213,182,10)"/><text x="9.4451%" y="671.50">irust</text></g><g><title>[[heap]] (5 samples, 0.12%)</title><rect x="91.5453%" y="645" width="0.1194%" height="15" fill="rgb(245,125,30)"/><text x="91.7953%" y="655.50"></text></g><g><title>[ld] (13 samples, 0.31%)</title><rect x="91.9274%" y="517" width="0.3105%" height="15" fill="rgb(232,202,2)"/><text x="92.1774%" y="527.50"></text></g><g><title>__GI_fnmatch (5 samples, 0.12%)</title><rect x="92.2379%" y="517" width="0.1194%" height="15" fill="rgb(237,140,51)"/><text x="92.4879%" y="527.50"></text></g><g><title>_bfd_elf_make_section_from_shdr (5 samples, 0.12%)</title><rect x="92.5006%" y="469" width="0.1194%" height="15" fill="rgb(236,157,25)"/><text x="92.7506%" y="479.50"></text></g><g><title>bfd_section_from_shdr (8 samples, 0.19%)</title><rect x="92.5006%" y="485" width="0.1911%" height="15" fill="rgb(219,209,0)"/><text x="92.7506%" y="495.50"></text></g><g><title>bfd_check_format_matches (11 samples, 0.26%)</title><rect x="92.4528%" y="517" width="0.2627%" height="15" fill="rgb(240,116,54)"/><text x="92.7028%" y="527.50"></text></g><g><title>bfd_elf64_object_p (11 samples, 0.26%)</title><rect x="92.4528%" y="501" width="0.2627%" height="15" fill="rgb(216,10,36)"/><text x="92.7028%" y="511.50"></text></g><g><title>[ld] (43 samples, 1.03%)</title><rect x="91.7363%" y="533" width="1.0270%" height="15" fill="rgb(222,72,44)"/><text x="91.9863%" y="543.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.12%)</title><rect x="92.8827%" y="517" width="0.1194%" height="15" fill="rgb(232,159,9)"/><text x="93.1327%" y="527.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.12%)</title><rect x="93.0021%" y="517" width="0.1194%" height="15" fill="rgb(210,39,32)"/><text x="93.2521%" y="527.50"></text></g><g><title>[ld] (66 samples, 1.58%)</title><rect x="91.7363%" y="549" width="1.5763%" height="15" fill="rgb(216,194,45)"/><text x="91.9863%" y="559.50"></text></g><g><title>bfd_elf_link_add_symbols (21 samples, 0.50%)</title><rect x="92.8111%" y="533" width="0.5016%" height="15" fill="rgb(218,18,35)"/><text x="93.0611%" y="543.50"></text></g><g><title>bfd_elf_link_add_symbols (6 samples, 0.14%)</title><rect x="93.1693%" y="517" width="0.1433%" height="15" fill="rgb(207,83,51)"/><text x="93.4193%" y="527.50"></text></g><g><title>[ld] (76 samples, 1.82%)</title><rect x="91.7363%" y="565" width="1.8151%" height="15" fill="rgb(225,63,43)"/><text x="91.9863%" y="575.50">[..</text></g><g><title>bfd_elf_link_add_symbols (9 samples, 0.21%)</title><rect x="93.3365%" y="549" width="0.2150%" height="15" fill="rgb(207,57,36)"/><text x="93.5865%" y="559.50"></text></g><g><title>bfd_elf_size_dynamic_sections (7 samples, 0.17%)</title><rect x="93.5754%" y="565" width="0.1672%" height="15" fill="rgb(216,99,33)"/><text x="93.8254%" y="575.50"></text></g><g><title>[ld] (87 samples, 2.08%)</title><rect x="91.7124%" y="581" width="2.0779%" height="15" fill="rgb(225,42,16)"/><text x="91.9624%" y="591.50">[..</text></g><g><title>_bfd_elf_merge_sections (7 samples, 0.17%)</title><rect x="93.8858%" y="581" width="0.1672%" height="15" fill="rgb(220,201,45)"/><text x="94.1358%" y="591.50"></text></g><g><title>[libbfd-2.35.1.so] (7 samples, 0.17%)</title><rect x="93.8858%" y="565" width="0.1672%" height="15" fill="rgb(225,33,4)"/><text x="94.1358%" y="575.50"></text></g><g><title>_bfd_elf_rela_local_sym (6 samples, 0.14%)</title><rect x="94.2202%" y="549" width="0.1433%" height="15" fill="rgb(224,33,50)"/><text x="94.4702%" y="559.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.12%)</title><rect x="94.2441%" y="533" width="0.1194%" height="15" fill="rgb(246,198,51)"/><text x="94.4941%" y="543.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.12%)</title><rect x="94.2441%" y="517" width="0.1194%" height="15" fill="rgb(205,22,4)"/><text x="94.4941%" y="527.50"></text></g><g><title>[libbfd-2.35.1.so] (15 samples, 0.36%)</title><rect x="94.1008%" y="565" width="0.3583%" height="15" fill="rgb(206,3,8)"/><text x="94.3508%" y="575.50"></text></g><g><title>bfd_elf_final_link (27 samples, 0.64%)</title><rect x="94.0530%" y="581" width="0.6449%" height="15" fill="rgb(251,23,15)"/><text x="94.3030%" y="591.50"></text></g><g><title>bfd_set_section_contents (5 samples, 0.12%)</title><rect x="94.5785%" y="565" width="0.1194%" height="15" fill="rgb(252,88,28)"/><text x="94.8285%" y="575.50"></text></g><g><title>_bfd_elf_set_section_contents (5 samples, 0.12%)</title><rect x="94.5785%" y="549" width="0.1194%" height="15" fill="rgb(212,127,14)"/><text x="94.8285%" y="559.50"></text></g><g><title>[ld] (131 samples, 3.13%)</title><rect x="91.6886%" y="597" width="3.1287%" height="15" fill="rgb(247,145,37)"/><text x="91.9386%" y="607.50">[ld]</text></g><g><title>[ld] (138 samples, 3.30%)</title><rect x="91.6886%" y="645" width="3.2959%" height="15" fill="rgb(209,117,53)"/><text x="91.9386%" y="655.50">[ld]</text></g><g><title>__libc_start_main (138 samples, 3.30%)</title><rect x="91.6886%" y="629" width="3.2959%" height="15" fill="rgb(212,90,42)"/><text x="91.9386%" y="639.50">__l..</text></g><g><title>[ld] (138 samples, 3.30%)</title><rect x="91.6886%" y="613" width="3.2959%" height="15" fill="rgb(218,164,37)"/><text x="91.9386%" y="623.50">[ld]</text></g><g><title>bfd_close (7 samples, 0.17%)</title><rect x="94.8173%" y="597" width="0.1672%" height="15" fill="rgb(246,65,34)"/><text x="95.0673%" y="607.50"></text></g><g><title>_bfd_elf_write_object_contents (7 samples, 0.17%)</title><rect x="94.8173%" y="581" width="0.1672%" height="15" fill="rgb(231,100,33)"/><text x="95.0673%" y="591.50"></text></g><g><title>[ld] (7 samples, 0.17%)</title><rect x="94.8173%" y="565" width="0.1672%" height="15" fill="rgb(228,126,14)"/><text x="95.0673%" y="575.50"></text></g><g><title>[ld] (7 samples, 0.17%)</title><rect x="94.8173%" y="549" width="0.1672%" height="15" fill="rgb(215,173,21)"/><text x="95.0673%" y="559.50"></text></g><g><title>bfd_elf64_checksum_contents (7 samples, 0.17%)</title><rect x="94.8173%" y="533" width="0.1672%" height="15" fill="rgb(210,6,40)"/><text x="95.0673%" y="543.50"></text></g><g><title>[ld] (7 samples, 0.17%)</title><rect x="94.8173%" y="517" width="0.1672%" height="15" fill="rgb(212,48,18)"/><text x="95.0673%" y="527.50"></text></g><g><title>[ld] (7 samples, 0.17%)</title><rect x="94.8173%" y="501" width="0.1672%" height="15" fill="rgb(230,214,11)"/><text x="95.0673%" y="511.50"></text></g><g><title>ld (149 samples, 3.56%)</title><rect x="91.5453%" y="661" width="3.5586%" height="15" fill="rgb(254,105,39)"/><text x="91.7953%" y="671.50">ld</text></g><g><title>racer::run (7 samples, 0.17%)</title><rect x="95.1278%" y="469" width="0.1672%" height="15" fill="rgb(245,158,5)"/><text x="95.3778%" y="479.50"></text></g><g><title>std::io::stdio::Stdin::read_line (6 samples, 0.14%)</title><rect x="95.1517%" y="453" width="0.1433%" height="15" fill="rgb(249,208,11)"/><text x="95.4017%" y="463.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::BufRead&gt;::read_line (6 samples, 0.14%)</title><rect x="95.1517%" y="437" width="0.1433%" height="15" fill="rgb(210,39,28)"/><text x="95.4017%" y="447.50"></text></g><g><title>std::io::BufRead::read_line (6 samples, 0.14%)</title><rect x="95.1517%" y="421" width="0.1433%" height="15" fill="rgb(211,56,53)"/><text x="95.4017%" y="431.50"></text></g><g><title>std::io::append_to_string (6 samples, 0.14%)</title><rect x="95.1517%" y="405" width="0.1433%" height="15" fill="rgb(226,201,30)"/><text x="95.4017%" y="415.50"></text></g><g><title>std::io::BufRead::read_line::{{closure}} (6 samples, 0.14%)</title><rect x="95.1517%" y="389" width="0.1433%" height="15" fill="rgb(239,101,34)"/><text x="95.4017%" y="399.50"></text></g><g><title>std::io::read_until (6 samples, 0.14%)</title><rect x="95.1517%" y="373" width="0.1433%" height="15" fill="rgb(226,209,5)"/><text x="95.4017%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (6 samples, 0.14%)</title><rect x="95.1517%" y="357" width="0.1433%" height="15" fill="rgb(250,105,47)"/><text x="95.4017%" y="367.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read (6 samples, 0.14%)</title><rect x="95.1517%" y="341" width="0.1433%" height="15" fill="rgb(230,72,3)"/><text x="95.4017%" y="351.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read (6 samples, 0.14%)</title><rect x="95.1517%" y="325" width="0.1433%" height="15" fill="rgb(232,218,39)"/><text x="95.4017%" y="335.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (6 samples, 0.14%)</title><rect x="95.1517%" y="309" width="0.1433%" height="15" fill="rgb(248,166,6)"/><text x="95.4017%" y="319.50"></text></g><g><title>__libc_read (6 samples, 0.14%)</title><rect x="95.1517%" y="293" width="0.1433%" height="15" fill="rgb(247,89,20)"/><text x="95.4017%" y="303.50"></text></g><g><title>std::sys::unix::cvt_r (6 samples, 0.14%)</title><rect x="95.2950%" y="373" width="0.1433%" height="15" fill="rgb(248,130,54)"/><text x="95.5450%" y="383.50"></text></g><g><title>std::sys::unix::pipe::read2::{{closure}} (6 samples, 0.14%)</title><rect x="95.2950%" y="357" width="0.1433%" height="15" fill="rgb(234,196,4)"/><text x="95.5450%" y="367.50"></text></g><g><title>__GI___poll (6 samples, 0.14%)</title><rect x="95.2950%" y="341" width="0.1433%" height="15" fill="rgb(250,143,31)"/><text x="95.5450%" y="351.50"></text></g><g><title>__libc_start_main (14 samples, 0.33%)</title><rect x="95.1278%" y="629" width="0.3344%" height="15" fill="rgb(211,110,34)"/><text x="95.3778%" y="639.50"></text></g><g><title>main (14 samples, 0.33%)</title><rect x="95.1278%" y="613" width="0.3344%" height="15" fill="rgb(215,124,48)"/><text x="95.3778%" y="623.50"></text></g><g><title>std::rt::lang_start_internal (14 samples, 0.33%)</title><rect x="95.1278%" y="597" width="0.3344%" height="15" fill="rgb(216,46,13)"/><text x="95.3778%" y="607.50"></text></g><g><title>std::panic::catch_unwind (14 samples, 0.33%)</title><rect x="95.1278%" y="581" width="0.3344%" height="15" fill="rgb(205,184,25)"/><text x="95.3778%" y="591.50"></text></g><g><title>std::panicking::try (14 samples, 0.33%)</title><rect x="95.1278%" y="565" width="0.3344%" height="15" fill="rgb(228,1,10)"/><text x="95.3778%" y="575.50"></text></g><g><title>std::panicking::try::do_call (14 samples, 0.33%)</title><rect x="95.1278%" y="549" width="0.3344%" height="15" fill="rgb(213,116,27)"/><text x="95.3778%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (14 samples, 0.33%)</title><rect x="95.1278%" y="533" width="0.3344%" height="15" fill="rgb(241,95,50)"/><text x="95.3778%" y="543.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (14 samples, 0.33%)</title><rect x="95.1278%" y="517" width="0.3344%" height="15" fill="rgb(238,48,32)"/><text x="95.3778%" y="527.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14 samples, 0.33%)</title><rect x="95.1278%" y="501" width="0.3344%" height="15" fill="rgb(235,113,49)"/><text x="95.3778%" y="511.50"></text></g><g><title>racer::main (14 samples, 0.33%)</title><rect x="95.1278%" y="485" width="0.3344%" height="15" fill="rgb(205,127,43)"/><text x="95.3778%" y="495.50"></text></g><g><title>racer::util::get_rust_src_path (7 samples, 0.17%)</title><rect x="95.2950%" y="469" width="0.1672%" height="15" fill="rgb(250,162,2)"/><text x="95.5450%" y="479.50"></text></g><g><title>std::process::Command::output (7 samples, 0.17%)</title><rect x="95.2950%" y="453" width="0.1672%" height="15" fill="rgb(220,13,41)"/><text x="95.5450%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (7 samples, 0.17%)</title><rect x="95.2950%" y="437" width="0.1672%" height="15" fill="rgb(249,221,25)"/><text x="95.5450%" y="447.50"></text></g><g><title>std::process::Command::output::{{closure}} (7 samples, 0.17%)</title><rect x="95.2950%" y="421" width="0.1672%" height="15" fill="rgb(215,208,19)"/><text x="95.5450%" y="431.50"></text></g><g><title>std::process::Child::wait_with_output (7 samples, 0.17%)</title><rect x="95.2950%" y="405" width="0.1672%" height="15" fill="rgb(236,175,2)"/><text x="95.5450%" y="415.50"></text></g><g><title>std::sys::unix::pipe::read2 (7 samples, 0.17%)</title><rect x="95.2950%" y="389" width="0.1672%" height="15" fill="rgb(241,52,2)"/><text x="95.5450%" y="399.50"></text></g><g><title>_dl_relocate_object (17 samples, 0.41%)</title><rect x="95.4621%" y="581" width="0.4060%" height="15" fill="rgb(248,140,14)"/><text x="95.7121%" y="591.50"></text></g><g><title>racer (33 samples, 0.79%)</title><rect x="95.1039%" y="661" width="0.7882%" height="15" fill="rgb(253,22,42)"/><text x="95.3539%" y="671.50"></text></g><g><title>_start (32 samples, 0.76%)</title><rect x="95.1278%" y="645" width="0.7643%" height="15" fill="rgb(234,61,47)"/><text x="95.3778%" y="655.50"></text></g><g><title>_dl_start (18 samples, 0.43%)</title><rect x="95.4621%" y="629" width="0.4299%" height="15" fill="rgb(208,226,15)"/><text x="95.7121%" y="639.50"></text></g><g><title>_dl_sysdep_start (18 samples, 0.43%)</title><rect x="95.4621%" y="613" width="0.4299%" height="15" fill="rgb(217,221,4)"/><text x="95.7121%" y="623.50"></text></g><g><title>dl_main (18 samples, 0.43%)</title><rect x="95.4621%" y="597" width="0.4299%" height="15" fill="rgb(212,174,34)"/><text x="95.7121%" y="607.50"></text></g><g><title>rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter (11 samples, 0.26%)</title><rect x="96.2981%" y="629" width="0.2627%" height="15" fill="rgb(253,83,4)"/><text x="96.5481%" y="639.50"></text></g><g><title>rustc_interface::queries::Queries::ongoing_codegen (6 samples, 0.14%)</title><rect x="96.4175%" y="613" width="0.1433%" height="15" fill="rgb(250,195,49)"/><text x="96.6675%" y="623.50"></text></g><g><title>rustc_interface::passes::QueryContext::enter (6 samples, 0.14%)</title><rect x="96.4175%" y="597" width="0.1433%" height="15" fill="rgb(241,192,25)"/><text x="96.6675%" y="607.50"></text></g><g><title>rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time (6 samples, 0.14%)</title><rect x="96.4175%" y="581" width="0.1433%" height="15" fill="rgb(208,124,10)"/><text x="96.6675%" y="591.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::codegen_crate (6 samples, 0.14%)</title><rect x="96.4175%" y="565" width="0.1433%" height="15" fill="rgb(222,33,0)"/><text x="96.6675%" y="575.50"></text></g><g><title>rustc_codegen_ssa::base::codegen_crate (6 samples, 0.14%)</title><rect x="96.4175%" y="549" width="0.1433%" height="15" fill="rgb(234,209,28)"/><text x="96.6675%" y="559.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::init (5 samples, 0.12%)</title><rect x="96.5608%" y="613" width="0.1194%" height="15" fill="rgb(224,11,23)"/><text x="96.8108%" y="623.50"></text></g><g><title>std::sync::once::Once::call_inner (5 samples, 0.12%)</title><rect x="96.5608%" y="597" width="0.1194%" height="15" fill="rgb(232,99,1)"/><text x="96.8108%" y="607.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (5 samples, 0.12%)</title><rect x="96.5608%" y="581" width="0.1194%" height="15" fill="rgb(237,95,45)"/><text x="96.8108%" y="591.50"></text></g><g><title>rustc_interface::util::create_session (6 samples, 0.14%)</title><rect x="96.5608%" y="629" width="0.1433%" height="15" fill="rgb(208,109,11)"/><text x="96.8108%" y="639.50"></text></g><g><title>rustc_middle::ty::context::TyCtxt::create_global_ctxt (19 samples, 0.45%)</title><rect x="96.8235%" y="629" width="0.4538%" height="15" fill="rgb(216,190,48)"/><text x="97.0735%" y="639.50"></text></g><g><title>rustc_metadata::rmeta::decoder::cstore_impl::&lt;impl rustc_middle::middle::cstore::CrateStore for rustc_metadata::creader::CStore&gt;::all_def_path_hashes_and_def_ids (13 samples, 0.31%)</title><rect x="96.9668%" y="613" width="0.3105%" height="15" fill="rgb(251,171,36)"/><text x="97.2168%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.31%)</title><rect x="96.9668%" y="597" width="0.3105%" height="15" fill="rgb(230,62,22)"/><text x="97.2168%" y="607.50"></text></g><g><title>rustc_metadata::rmeta::decoder::&lt;impl rustc_metadata::creader::CrateMetadataRef&gt;::def_path_hash_unlocked (7 samples, 0.17%)</title><rect x="97.1101%" y="581" width="0.1672%" height="15" fill="rgb(225,114,35)"/><text x="97.3601%" y="591.50"></text></g><g><title>std::sys::unix::cvt_r (6 samples, 0.14%)</title><rect x="97.4206%" y="469" width="0.1433%" height="15" fill="rgb(215,118,42)"/><text x="97.6706%" y="479.50"></text></g><g><title>std::sys::unix::pipe::read2::{{closure}} (6 samples, 0.14%)</title><rect x="97.4206%" y="453" width="0.1433%" height="15" fill="rgb(243,119,21)"/><text x="97.6706%" y="463.50"></text></g><g><title>__GI___poll (6 samples, 0.14%)</title><rect x="97.4206%" y="437" width="0.1433%" height="15" fill="rgb(252,177,53)"/><text x="97.6706%" y="447.50"></text></g><g><title>std::process::Child::wait_with_output (7 samples, 0.17%)</title><rect x="97.4206%" y="501" width="0.1672%" height="15" fill="rgb(237,209,29)"/><text x="97.6706%" y="511.50"></text></g><g><title>std::sys::unix::pipe::read2 (7 samples, 0.17%)</title><rect x="97.4206%" y="485" width="0.1672%" height="15" fill="rgb(212,65,23)"/><text x="97.6706%" y="495.50"></text></g><g><title>rustc_interface::queries::Linker::link (19 samples, 0.45%)</title><rect x="97.3489%" y="597" width="0.4538%" height="15" fill="rgb(230,222,46)"/><text x="97.5989%" y="607.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::link (18 samples, 0.43%)</title><rect x="97.3728%" y="581" width="0.4299%" height="15" fill="rgb(215,135,32)"/><text x="97.6228%" y="591.50"></text></g><g><title>rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time (17 samples, 0.41%)</title><rect x="97.3967%" y="565" width="0.4060%" height="15" fill="rgb(246,101,22)"/><text x="97.6467%" y="575.50"></text></g><g><title>rustc_codegen_ssa::back::link::link_binary (17 samples, 0.41%)</title><rect x="97.3967%" y="549" width="0.4060%" height="15" fill="rgb(206,107,13)"/><text x="97.6467%" y="559.50"></text></g><g><title>rustc_codegen_ssa::back::link::link_natively (17 samples, 0.41%)</title><rect x="97.3967%" y="533" width="0.4060%" height="15" fill="rgb(250,100,44)"/><text x="97.6467%" y="543.50"></text></g><g><title>rustc_codegen_ssa::back::link::exec_linker (17 samples, 0.41%)</title><rect x="97.3967%" y="517" width="0.4060%" height="15" fill="rgb(231,147,38)"/><text x="97.6467%" y="527.50"></text></g><g><title>std::process::Command::spawn (9 samples, 0.21%)</title><rect x="97.5878%" y="501" width="0.2150%" height="15" fill="rgb(229,8,40)"/><text x="97.8378%" y="511.50"></text></g><g><title>std::sys::unix::process::process_inner::&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (9 samples, 0.21%)</title><rect x="97.5878%" y="485" width="0.2150%" height="15" fill="rgb(221,135,30)"/><text x="97.8378%" y="495.50"></text></g><g><title>__GI___fork (9 samples, 0.21%)</title><rect x="97.5878%" y="469" width="0.2150%" height="15" fill="rgb(249,193,18)"/><text x="97.8378%" y="479.50"></text></g><g><title>[unknown] (77 samples, 1.84%)</title><rect x="95.9876%" y="645" width="1.8390%" height="15" fill="rgb(209,133,39)"/><text x="96.2376%" y="655.50">[..</text></g><g><title>scoped_tls::ScopedKey&lt;T&gt;::set (20 samples, 0.48%)</title><rect x="97.3489%" y="629" width="0.4777%" height="15" fill="rgb(232,100,14)"/><text x="97.5989%" y="639.50"></text></g><g><title>rustc_span::with_source_map (20 samples, 0.48%)</title><rect x="97.3489%" y="613" width="0.4777%" height="15" fill="rgb(224,185,1)"/><text x="97.5989%" y="623.50"></text></g><g><title>rustc_codegen_llvm::back::write::write_output_file (7 samples, 0.17%)</title><rect x="98.4237%" y="485" width="0.1672%" height="15" fill="rgb(223,139,8)"/><text x="98.6737%" y="495.50"></text></g><g><title>LLVMRustWriteOutputFile (7 samples, 0.17%)</title><rect x="98.4237%" y="469" width="0.1672%" height="15" fill="rgb(232,213,38)"/><text x="98.6737%" y="479.50"></text></g><g><title>llvm::legacy::PassManagerImpl::run (6 samples, 0.14%)</title><rect x="98.4476%" y="453" width="0.1433%" height="15" fill="rgb(207,94,22)"/><text x="98.6976%" y="463.50"></text></g><g><title>llvm::FPPassManager::runOnModule (6 samples, 0.14%)</title><rect x="98.4476%" y="437" width="0.1433%" height="15" fill="rgb(219,183,54)"/><text x="98.6976%" y="447.50"></text></g><g><title>llvm::FPPassManager::runOnFunction (6 samples, 0.14%)</title><rect x="98.4476%" y="421" width="0.1433%" height="15" fill="rgb(216,185,54)"/><text x="98.6976%" y="431.50"></text></g><g><title>rustc_codegen_ssa::back::write::finish_intra_module_work (8 samples, 0.19%)</title><rect x="98.4237%" y="517" width="0.1911%" height="15" fill="rgb(254,217,39)"/><text x="98.6737%" y="527.50"></text></g><g><title>rustc_codegen_llvm::back::write::codegen (8 samples, 0.19%)</title><rect x="98.4237%" y="501" width="0.1911%" height="15" fill="rgb(240,178,23)"/><text x="98.6737%" y="511.50"></text></g><g><title>rustc_codegen_ssa::back::write::execute_work_item (9 samples, 0.21%)</title><rect x="98.4237%" y="533" width="0.2150%" height="15" fill="rgb(218,11,47)"/><text x="98.6737%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (27 samples, 0.64%)</title><rect x="98.3282%" y="597" width="0.6449%" height="15" fill="rgb(218,51,51)"/><text x="98.5782%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (27 samples, 0.64%)</title><rect x="98.3282%" y="581" width="0.6449%" height="15" fill="rgb(238,126,27)"/><text x="98.5782%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (27 samples, 0.64%)</title><rect x="98.3282%" y="565" width="0.6449%" height="15" fill="rgb(249,202,22)"/><text x="98.5782%" y="575.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (25 samples, 0.60%)</title><rect x="98.3759%" y="549" width="0.5971%" height="15" fill="rgb(254,195,49)"/><text x="98.6259%" y="559.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (13 samples, 0.31%)</title><rect x="98.6625%" y="533" width="0.3105%" height="15" fill="rgb(208,123,14)"/><text x="98.9125%" y="543.50"></text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (12 samples, 0.29%)</title><rect x="98.6864%" y="517" width="0.2866%" height="15" fill="rgb(224,200,8)"/><text x="98.9364%" y="527.50"></text></g><g><title>std::thread::park (12 samples, 0.29%)</title><rect x="98.6864%" y="501" width="0.2866%" height="15" fill="rgb(217,61,36)"/><text x="98.9364%" y="511.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (12 samples, 0.29%)</title><rect x="98.6864%" y="485" width="0.2866%" height="15" fill="rgb(206,35,45)"/><text x="98.9364%" y="495.50"></text></g><g><title>std::sys::unix::futex::futex_wait (12 samples, 0.29%)</title><rect x="98.6864%" y="469" width="0.2866%" height="15" fill="rgb(217,65,33)"/><text x="98.9364%" y="479.50"></text></g><g><title>syscall (12 samples, 0.29%)</title><rect x="98.6864%" y="453" width="0.2866%" height="15" fill="rgb(222,158,48)"/><text x="98.9364%" y="463.50"></text></g><g><title>__GI___clone (50 samples, 1.19%)</title><rect x="97.8266%" y="645" width="1.1942%" height="15" fill="rgb(254,2,54)"/><text x="98.0766%" y="655.50"></text></g><g><title>start_thread (31 samples, 0.74%)</title><rect x="98.2804%" y="629" width="0.7404%" height="15" fill="rgb(250,143,38)"/><text x="98.5304%" y="639.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (29 samples, 0.69%)</title><rect x="98.3282%" y="613" width="0.6926%" height="15" fill="rgb(248,25,0)"/><text x="98.5782%" y="623.50"></text></g><g><title>_dl_map_object_deps (5 samples, 0.12%)</title><rect x="99.2118%" y="581" width="0.1194%" height="15" fill="rgb(206,152,27)"/><text x="99.4618%" y="591.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.12%)</title><rect x="99.2118%" y="565" width="0.1194%" height="15" fill="rgb(240,77,30)"/><text x="99.4618%" y="575.50"></text></g><g><title>openaux (5 samples, 0.12%)</title><rect x="99.2118%" y="549" width="0.1194%" height="15" fill="rgb(231,5,3)"/><text x="99.4618%" y="559.50"></text></g><g><title>_dl_map_object (5 samples, 0.12%)</title><rect x="99.2118%" y="533" width="0.1194%" height="15" fill="rgb(207,226,32)"/><text x="99.4618%" y="543.50"></text></g><g><title>all (4,187 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(222,207,47)"/><text x="0.2500%" y="687.50"></text></g><g><title>rustc (172 samples, 4.11%)</title><rect x="95.8920%" y="661" width="4.1080%" height="15" fill="rgb(229,115,45)"/><text x="96.1420%" y="671.50">rustc</text></g><g><title>_start (38 samples, 0.91%)</title><rect x="99.0924%" y="645" width="0.9076%" height="15" fill="rgb(224,191,6)"/><text x="99.3424%" y="655.50"></text></g><g><title>_dl_start (33 samples, 0.79%)</title><rect x="99.2118%" y="629" width="0.7882%" height="15" fill="rgb(230,227,24)"/><text x="99.4618%" y="639.50"></text></g><g><title>_dl_sysdep_start (33 samples, 0.79%)</title><rect x="99.2118%" y="613" width="0.7882%" height="15" fill="rgb(228,80,19)"/><text x="99.4618%" y="623.50"></text></g><g><title>dl_main (33 samples, 0.79%)</title><rect x="99.2118%" y="597" width="0.7882%" height="15" fill="rgb(247,229,0)"/><text x="99.4618%" y="607.50"></text></g><g><title>_dl_relocate_object (28 samples, 0.67%)</title><rect x="99.3313%" y="581" width="0.6687%" height="15" fill="rgb(237,194,15)"/><text x="99.5813%" y="591.50"></text></g><g><title>_dl_lookup_symbol_x (11 samples, 0.26%)</title><rect x="99.7373%" y="565" width="0.2627%" height="15" fill="rgb(219,203,20)"/><text x="99.9873%" y="575.50"></text></g><g><title>do_lookup_x (5 samples, 0.12%)</title><rect x="99.8806%" y="549" width="0.1194%" height="15" fill="rgb(234,128,8)"/><text x="100.1306%" y="559.50"></text></g></svg></svg>