<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180"><g><title>__GI___libc_malloc (6 samples, 0.24%)</title><rect x="0.3267%" y="261" width="0.2450%" height="15" fill="rgb(227,0,7)"/><text x="0.5767%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::new (7 samples, 0.29%)</title><rect x="0.3267%" y="389" width="0.2858%" height="15" fill="rgb(217,0,24)"/><text x="0.5767%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::with_capacity (7 samples, 0.29%)</title><rect x="0.3267%" y="373" width="0.2858%" height="15" fill="rgb(221,193,54)"/><text x="0.5767%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (7 samples, 0.29%)</title><rect x="0.3267%" y="357" width="0.2858%" height="15" fill="rgb(248,212,6)"/><text x="0.5767%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.29%)</title><rect x="0.3267%" y="341" width="0.2858%" height="15" fill="rgb(208,68,35)"/><text x="0.5767%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.29%)</title><rect x="0.3267%" y="325" width="0.2858%" height="15" fill="rgb(232,128,0)"/><text x="0.5767%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.29%)</title><rect x="0.3267%" y="309" width="0.2858%" height="15" fill="rgb(207,160,47)"/><text x="0.5767%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.29%)</title><rect x="0.3267%" y="293" width="0.2858%" height="15" fill="rgb(228,23,34)"/><text x="0.5767%" y="303.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.29%)</title><rect x="0.3267%" y="277" width="0.2858%" height="15" fill="rgb(218,30,26)"/><text x="0.5767%" y="287.50"></text></g><g><title>crossterm::event::read (16 samples, 0.65%)</title><rect x="0.2042%" y="437" width="0.6533%" height="15" fill="rgb(220,122,19)"/><text x="0.4542%" y="447.50"></text></g><g><title>crossterm::event::read_internal (16 samples, 0.65%)</title><rect x="0.2042%" y="421" width="0.6533%" height="15" fill="rgb(250,228,42)"/><text x="0.4542%" y="431.50"></text></g><g><title>crossterm::event::read::InternalEventReader::read (15 samples, 0.61%)</title><rect x="0.2450%" y="405" width="0.6125%" height="15" fill="rgb(240,193,28)"/><text x="0.4950%" y="415.50"></text></g><g><title>crossterm::event::read::InternalEventReader::poll (5 samples, 0.20%)</title><rect x="0.6533%" y="389" width="0.2042%" height="15" fill="rgb(216,20,37)"/><text x="0.9033%" y="399.50"></text></g><g><title>&lt;crossterm::event::source::unix::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (5 samples, 0.20%)</title><rect x="0.6533%" y="373" width="0.2042%" height="15" fill="rgb(206,188,39)"/><text x="0.9033%" y="383.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.16%)</title><rect x="0.6942%" y="357" width="0.1633%" height="15" fill="rgb(217,207,13)"/><text x="0.9442%" y="367.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (4 samples, 0.16%)</title><rect x="0.6942%" y="341" width="0.1633%" height="15" fill="rgb(231,73,38)"/><text x="0.9442%" y="351.50"></text></g><g><title>epoll_wait (4 samples, 0.16%)</title><rect x="0.6942%" y="325" width="0.1633%" height="15" fill="rgb(225,20,46)"/><text x="0.9442%" y="335.50"></text></g><g><title>std::sync::mpsc::blocking::SignalToken::signal (31 samples, 1.27%)</title><rect x="0.9392%" y="405" width="1.2658%" height="15" fill="rgb(210,31,41)"/><text x="1.1892%" y="415.50"></text></g><g><title>std::thread::Thread::unpark (30 samples, 1.22%)</title><rect x="0.9800%" y="389" width="1.2250%" height="15" fill="rgb(221,200,47)"/><text x="1.2300%" y="399.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (30 samples, 1.22%)</title><rect x="0.9800%" y="373" width="1.2250%" height="15" fill="rgb(226,26,5)"/><text x="1.2300%" y="383.50"></text></g><g><title>std::sys::unix::futex::futex_wake (30 samples, 1.22%)</title><rect x="0.9800%" y="357" width="1.2250%" height="15" fill="rgb(249,33,26)"/><text x="1.2300%" y="367.50"></text></g><g><title>syscall (30 samples, 1.22%)</title><rect x="0.9800%" y="341" width="1.2250%" height="15" fill="rgb(235,183,28)"/><text x="1.2300%" y="351.50"></text></g><g><title>std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::push (3 samples, 0.12%)</title><rect x="2.2050%" y="405" width="0.1225%" height="15" fill="rgb(221,5,38)"/><text x="2.4550%" y="415.50"></text></g><g><title>std::sync::mpsc::mpsc_queue::Node&lt;T&gt;::new (3 samples, 0.12%)</title><rect x="2.2050%" y="389" width="0.1225%" height="15" fill="rgb(247,18,42)"/><text x="2.4550%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.12%)</title><rect x="2.2050%" y="373" width="0.1225%" height="15" fill="rgb(241,131,45)"/><text x="2.4550%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.12%)</title><rect x="2.2050%" y="357" width="0.1225%" height="15" fill="rgb(249,31,29)"/><text x="2.4550%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.12%)</title><rect x="2.2050%" y="341" width="0.1225%" height="15" fill="rgb(225,111,53)"/><text x="2.4550%" y="351.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.12%)</title><rect x="2.2050%" y="325" width="0.1225%" height="15" fill="rgb(238,160,17)"/><text x="2.4550%" y="335.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.12%)</title><rect x="2.2050%" y="309" width="0.1225%" height="15" fill="rgb(214,148,48)"/><text x="2.4550%" y="319.50"></text></g><g><title>_int_malloc (3 samples, 0.12%)</title><rect x="2.2050%" y="293" width="0.1225%" height="15" fill="rgb(232,36,49)"/><text x="2.4550%" y="303.50"></text></g><g><title>std::sync::mpsc::Sender&lt;T&gt;::send (37 samples, 1.51%)</title><rect x="0.8575%" y="437" width="1.5108%" height="15" fill="rgb(209,103,24)"/><text x="1.1075%" y="447.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::send (35 samples, 1.43%)</title><rect x="0.9392%" y="421" width="1.4292%" height="15" fill="rgb(229,88,8)"/><text x="1.1892%" y="431.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (68 samples, 2.78%)</title><rect x="2.3683%" y="421" width="2.7766%" height="15" fill="rgb(213,181,19)"/><text x="2.6183%" y="431.50">st..</text></g><g><title>std::sys::unix::futex::futex_wait (67 samples, 2.74%)</title><rect x="2.4091%" y="405" width="2.7358%" height="15" fill="rgb(254,191,54)"/><text x="2.6591%" y="415.50">st..</text></g><g><title>syscall (67 samples, 2.74%)</title><rect x="2.4091%" y="389" width="2.7358%" height="15" fill="rgb(241,83,37)"/><text x="2.6591%" y="399.50">sy..</text></g><g><title>Input (127 samples, 5.19%)</title><rect x="0.0000%" y="693" width="5.1858%" height="15" fill="rgb(233,36,39)"/><text x="0.2500%" y="703.50">Input</text></g><g><title>__GI___clone (123 samples, 5.02%)</title><rect x="0.1633%" y="677" width="5.0225%" height="15" fill="rgb(226,3,54)"/><text x="0.4133%" y="687.50">__GI__..</text></g><g><title>start_thread (123 samples, 5.02%)</title><rect x="0.1633%" y="661" width="5.0225%" height="15" fill="rgb(245,192,40)"/><text x="0.4133%" y="671.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (123 samples, 5.02%)</title><rect x="0.1633%" y="645" width="5.0225%" height="15" fill="rgb(238,167,29)"/><text x="0.4133%" y="655.50">std::s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (123 samples, 5.02%)</title><rect x="0.1633%" y="629" width="5.0225%" height="15" fill="rgb(232,182,51)"/><text x="0.4133%" y="639.50">&lt;alloc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (123 samples, 5.02%)</title><rect x="0.1633%" y="613" width="5.0225%" height="15" fill="rgb(231,60,39)"/><text x="0.4133%" y="623.50">&lt;alloc..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (123 samples, 5.02%)</title><rect x="0.1633%" y="597" width="5.0225%" height="15" fill="rgb(208,69,12)"/><text x="0.4133%" y="607.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (123 samples, 5.02%)</title><rect x="0.1633%" y="581" width="5.0225%" height="15" fill="rgb(235,93,37)"/><text x="0.4133%" y="591.50">std::t..</text></g><g><title>std::panic::catch_unwind (123 samples, 5.02%)</title><rect x="0.1633%" y="565" width="5.0225%" height="15" fill="rgb(213,116,39)"/><text x="0.4133%" y="575.50">std::p..</text></g><g><title>std::panicking::try (123 samples, 5.02%)</title><rect x="0.1633%" y="549" width="5.0225%" height="15" fill="rgb(222,207,29)"/><text x="0.4133%" y="559.50">std::p..</text></g><g><title>std::panicking::try::do_call (123 samples, 5.02%)</title><rect x="0.1633%" y="533" width="5.0225%" height="15" fill="rgb(206,96,30)"/><text x="0.4133%" y="543.50">std::p..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (123 samples, 5.02%)</title><rect x="0.1633%" y="517" width="5.0225%" height="15" fill="rgb(218,138,4)"/><text x="0.4133%" y="527.50">&lt;std::..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (123 samples, 5.02%)</title><rect x="0.1633%" y="501" width="5.0225%" height="15" fill="rgb(250,191,14)"/><text x="0.4133%" y="511.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (123 samples, 5.02%)</title><rect x="0.1633%" y="485" width="5.0225%" height="15" fill="rgb(239,60,40)"/><text x="0.4133%" y="495.50">std::s..</text></g><g><title>irust::irust::input_read::{{closure}} (123 samples, 5.02%)</title><rect x="0.1633%" y="469" width="5.0225%" height="15" fill="rgb(206,27,48)"/><text x="0.4133%" y="479.50">irust:..</text></g><g><title>irust::irust::input_read::{{closure}}::{{closure}} (123 samples, 5.02%)</title><rect x="0.1633%" y="453" width="5.0225%" height="15" fill="rgb(225,35,8)"/><text x="0.4133%" y="463.50">irust:..</text></g><g><title>std::thread::park (69 samples, 2.82%)</title><rect x="2.3683%" y="437" width="2.8175%" height="15" fill="rgb(250,213,24)"/><text x="2.6183%" y="447.50">st..</text></g><g><title>std::panic::catch_unwind (7 samples, 0.29%)</title><rect x="5.7575%" y="565" width="0.2858%" height="15" fill="rgb(247,123,22)"/><text x="6.0075%" y="575.50"></text></g><g><title>std::panicking::try (7 samples, 0.29%)</title><rect x="5.7575%" y="549" width="0.2858%" height="15" fill="rgb(231,138,38)"/><text x="6.0075%" y="559.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.29%)</title><rect x="5.7575%" y="533" width="0.2858%" height="15" fill="rgb(231,145,46)"/><text x="6.0075%" y="543.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7 samples, 0.29%)</title><rect x="5.7575%" y="517" width="0.2858%" height="15" fill="rgb(251,118,11)"/><text x="6.0075%" y="527.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (7 samples, 0.29%)</title><rect x="5.7575%" y="501" width="0.2858%" height="15" fill="rgb(217,147,25)"/><text x="6.0075%" y="511.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.29%)</title><rect x="5.7575%" y="485" width="0.2858%" height="15" fill="rgb(247,81,37)"/><text x="6.0075%" y="495.50"></text></g><g><title>irust::irust::watch::{{closure}} (7 samples, 0.29%)</title><rect x="5.7575%" y="469" width="0.2858%" height="15" fill="rgb(209,12,38)"/><text x="6.0075%" y="479.50"></text></g><g><title>&lt;notify::inotify::INotifyWatcher as notify::Watcher&gt;::watch (7 samples, 0.29%)</title><rect x="5.7575%" y="453" width="0.2858%" height="15" fill="rgb(227,1,9)"/><text x="6.0075%" y="463.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (7 samples, 0.29%)</title><rect x="5.7575%" y="437" width="0.2858%" height="15" fill="rgb(248,47,43)"/><text x="6.0075%" y="447.50"></text></g><g><title>std::sync::mpsc::oneshot::Packet&lt;T&gt;::recv (7 samples, 0.29%)</title><rect x="5.7575%" y="421" width="0.2858%" height="15" fill="rgb(221,10,30)"/><text x="6.0075%" y="431.50"></text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (7 samples, 0.29%)</title><rect x="5.7575%" y="405" width="0.2858%" height="15" fill="rgb(210,229,1)"/><text x="6.0075%" y="415.50"></text></g><g><title>std::thread::park (7 samples, 0.29%)</title><rect x="5.7575%" y="389" width="0.2858%" height="15" fill="rgb(222,148,37)"/><text x="6.0075%" y="399.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (7 samples, 0.29%)</title><rect x="5.7575%" y="373" width="0.2858%" height="15" fill="rgb(234,67,33)"/><text x="6.0075%" y="383.50"></text></g><g><title>std::sys::unix::futex::futex_wait (6 samples, 0.24%)</title><rect x="5.7983%" y="357" width="0.2450%" height="15" fill="rgb(247,98,35)"/><text x="6.0483%" y="367.50"></text></g><g><title>syscall (6 samples, 0.24%)</title><rect x="5.7983%" y="341" width="0.2450%" height="15" fill="rgb(247,138,52)"/><text x="6.0483%" y="351.50"></text></g><g><title>Watcher (23 samples, 0.94%)</title><rect x="5.1858%" y="693" width="0.9392%" height="15" fill="rgb(213,79,30)"/><text x="5.4358%" y="703.50"></text></g><g><title>__GI___clone (23 samples, 0.94%)</title><rect x="5.1858%" y="677" width="0.9392%" height="15" fill="rgb(246,177,23)"/><text x="5.4358%" y="687.50"></text></g><g><title>start_thread (10 samples, 0.41%)</title><rect x="5.7166%" y="661" width="0.4083%" height="15" fill="rgb(230,62,27)"/><text x="5.9666%" y="671.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 0.37%)</title><rect x="5.7575%" y="645" width="0.3675%" height="15" fill="rgb(216,154,8)"/><text x="6.0075%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.37%)</title><rect x="5.7575%" y="629" width="0.3675%" height="15" fill="rgb(244,35,45)"/><text x="6.0075%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.37%)</title><rect x="5.7575%" y="613" width="0.3675%" height="15" fill="rgb(251,115,12)"/><text x="6.0075%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (9 samples, 0.37%)</title><rect x="5.7575%" y="597" width="0.3675%" height="15" fill="rgb(240,54,50)"/><text x="6.0075%" y="607.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (9 samples, 0.37%)</title><rect x="5.7575%" y="581" width="0.3675%" height="15" fill="rgb(233,84,52)"/><text x="6.0075%" y="591.50"></text></g><g><title>[rustup] (6 samples, 0.24%)</title><rect x="6.5333%" y="661" width="0.2450%" height="15" fill="rgb(207,117,47)"/><text x="6.7833%" y="671.50"></text></g><g><title>[rustup] (6 samples, 0.24%)</title><rect x="6.5333%" y="645" width="0.2450%" height="15" fill="rgb(249,43,39)"/><text x="6.7833%" y="655.50"></text></g><g><title>[rustup] (6 samples, 0.24%)</title><rect x="6.5333%" y="629" width="0.2450%" height="15" fill="rgb(209,38,44)"/><text x="6.7833%" y="639.50"></text></g><g><title>[rustup] (5 samples, 0.20%)</title><rect x="6.5741%" y="613" width="0.2042%" height="15" fill="rgb(236,212,23)"/><text x="6.8241%" y="623.50"></text></g><g><title>[rustup] (5 samples, 0.20%)</title><rect x="6.5741%" y="597" width="0.2042%" height="15" fill="rgb(242,79,21)"/><text x="6.8241%" y="607.50"></text></g><g><title>[rustup] (4 samples, 0.16%)</title><rect x="6.6149%" y="581" width="0.1633%" height="15" fill="rgb(211,96,35)"/><text x="6.8649%" y="591.50"></text></g><g><title>[rustup] (4 samples, 0.16%)</title><rect x="6.6149%" y="565" width="0.1633%" height="15" fill="rgb(253,215,40)"/><text x="6.8649%" y="575.50"></text></g><g><title>[rustup] (4 samples, 0.16%)</title><rect x="6.6149%" y="549" width="0.1633%" height="15" fill="rgb(211,81,21)"/><text x="6.8649%" y="559.50"></text></g><g><title>__libc_start_main (3 samples, 0.12%)</title><rect x="6.7783%" y="661" width="0.1225%" height="15" fill="rgb(208,190,38)"/><text x="7.0283%" y="671.50"></text></g><g><title>main (3 samples, 0.12%)</title><rect x="6.7783%" y="645" width="0.1225%" height="15" fill="rgb(235,213,38)"/><text x="7.0283%" y="655.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.12%)</title><rect x="6.7783%" y="629" width="0.1225%" height="15" fill="rgb(237,122,38)"/><text x="7.0283%" y="639.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.12%)</title><rect x="6.7783%" y="613" width="0.1225%" height="15" fill="rgb(244,218,35)"/><text x="7.0283%" y="623.50"></text></g><g><title>std::panicking::try (3 samples, 0.12%)</title><rect x="6.7783%" y="597" width="0.1225%" height="15" fill="rgb(240,68,47)"/><text x="7.0283%" y="607.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.12%)</title><rect x="6.7783%" y="581" width="0.1225%" height="15" fill="rgb(210,16,53)"/><text x="7.0283%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.12%)</title><rect x="6.7783%" y="565" width="0.1225%" height="15" fill="rgb(235,124,12)"/><text x="7.0283%" y="575.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.12%)</title><rect x="6.7783%" y="549" width="0.1225%" height="15" fill="rgb(224,169,11)"/><text x="7.0283%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.12%)</title><rect x="6.7783%" y="533" width="0.1225%" height="15" fill="rgb(250,166,2)"/><text x="7.0283%" y="543.50"></text></g><g><title>cargo::main (3 samples, 0.12%)</title><rect x="6.7783%" y="517" width="0.1225%" height="15" fill="rgb(242,216,29)"/><text x="7.0283%" y="527.50"></text></g><g><title>cargo::cli::main (3 samples, 0.12%)</title><rect x="6.7783%" y="501" width="0.1225%" height="15" fill="rgb(230,116,27)"/><text x="7.0283%" y="511.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (3 samples, 0.12%)</title><rect x="6.7783%" y="485" width="0.1225%" height="15" fill="rgb(228,99,48)"/><text x="7.0283%" y="495.50"></text></g><g><title>cargo::ops::registry::http_proxy (3 samples, 0.12%)</title><rect x="6.7783%" y="469" width="0.1225%" height="15" fill="rgb(253,11,6)"/><text x="7.0283%" y="479.50"></text></g><g><title>git2::config::Config::open_default (3 samples, 0.12%)</title><rect x="6.7783%" y="453" width="0.1225%" height="15" fill="rgb(247,143,39)"/><text x="7.0283%" y="463.50"></text></g><g><title>libgit2_sys::init (3 samples, 0.12%)</title><rect x="6.7783%" y="437" width="0.1225%" height="15" fill="rgb(236,97,10)"/><text x="7.0283%" y="447.50"></text></g><g><title>std::sync::once::Once::call_inner (3 samples, 0.12%)</title><rect x="6.7783%" y="421" width="0.1225%" height="15" fill="rgb(233,208,19)"/><text x="7.0283%" y="431.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (3 samples, 0.12%)</title><rect x="6.7783%" y="405" width="0.1225%" height="15" fill="rgb(216,164,2)"/><text x="7.0283%" y="415.50"></text></g><g><title>git_libgit2_init (3 samples, 0.12%)</title><rect x="6.7783%" y="389" width="0.1225%" height="15" fill="rgb(220,129,5)"/><text x="7.0283%" y="399.50"></text></g><g><title>__pthread_once_slow (3 samples, 0.12%)</title><rect x="6.7783%" y="373" width="0.1225%" height="15" fill="rgb(242,17,10)"/><text x="7.0283%" y="383.50"></text></g><g><title>init_once (3 samples, 0.12%)</title><rect x="6.7783%" y="357" width="0.1225%" height="15" fill="rgb(242,107,0)"/><text x="7.0283%" y="367.50"></text></g><g><title>git_openssl_stream_global_init (3 samples, 0.12%)</title><rect x="6.7783%" y="341" width="0.1225%" height="15" fill="rgb(251,28,31)"/><text x="7.0283%" y="351.50"></text></g><g><title>X509_STORE_set_default_paths (3 samples, 0.12%)</title><rect x="6.7783%" y="325" width="0.1225%" height="15" fill="rgb(233,223,10)"/><text x="7.0283%" y="335.50"></text></g><g><title>by_file_ctrl (3 samples, 0.12%)</title><rect x="6.7783%" y="309" width="0.1225%" height="15" fill="rgb(215,21,27)"/><text x="7.0283%" y="319.50"></text></g><g><title>X509_load_cert_crl_file (3 samples, 0.12%)</title><rect x="6.7783%" y="293" width="0.1225%" height="15" fill="rgb(232,23,21)"/><text x="7.0283%" y="303.50"></text></g><g><title>PEM_X509_INFO_read_bio (3 samples, 0.12%)</title><rect x="6.7783%" y="277" width="0.1225%" height="15" fill="rgb(244,5,23)"/><text x="7.0283%" y="287.50"></text></g><g><title>ASN1_item_d2i (3 samples, 0.12%)</title><rect x="6.7783%" y="261" width="0.1225%" height="15" fill="rgb(226,81,46)"/><text x="7.0283%" y="271.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.12%)</title><rect x="6.7783%" y="245" width="0.1225%" height="15" fill="rgb(247,70,30)"/><text x="7.0283%" y="255.50"></text></g><g><title>asn1_template_ex_d2i (3 samples, 0.12%)</title><rect x="6.7783%" y="229" width="0.1225%" height="15" fill="rgb(212,68,19)"/><text x="7.0283%" y="239.50"></text></g><g><title>asn1_template_noexp_d2i (3 samples, 0.12%)</title><rect x="6.7783%" y="213" width="0.1225%" height="15" fill="rgb(240,187,13)"/><text x="7.0283%" y="223.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.12%)</title><rect x="6.7783%" y="197" width="0.1225%" height="15" fill="rgb(223,113,26)"/><text x="7.0283%" y="207.50"></text></g><g><title>asn1_template_ex_d2i (3 samples, 0.12%)</title><rect x="6.7783%" y="181" width="0.1225%" height="15" fill="rgb(206,192,2)"/><text x="7.0283%" y="191.50"></text></g><g><title>asn1_template_noexp_d2i (3 samples, 0.12%)</title><rect x="6.7783%" y="165" width="0.1225%" height="15" fill="rgb(241,108,4)"/><text x="7.0283%" y="175.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.12%)</title><rect x="6.7783%" y="149" width="0.1225%" height="15" fill="rgb(247,173,49)"/><text x="7.0283%" y="159.50"></text></g><g><title>pubkey_cb (3 samples, 0.12%)</title><rect x="6.7783%" y="133" width="0.1225%" height="15" fill="rgb(224,114,35)"/><text x="7.0283%" y="143.50"></text></g><g><title>x509_pubkey_decode (3 samples, 0.12%)</title><rect x="6.7783%" y="117" width="0.1225%" height="15" fill="rgb(245,159,27)"/><text x="7.0283%" y="127.50"></text></g><g><title>eckey_pub_decode (3 samples, 0.12%)</title><rect x="6.7783%" y="101" width="0.1225%" height="15" fill="rgb(245,172,44)"/><text x="7.0283%" y="111.50"></text></g><g><title>eckey_type2param (3 samples, 0.12%)</title><rect x="6.7783%" y="85" width="0.1225%" height="15" fill="rgb(236,23,11)"/><text x="7.0283%" y="95.50"></text></g><g><title>EC_GROUP_new_by_curve_name (3 samples, 0.12%)</title><rect x="6.7783%" y="69" width="0.1225%" height="15" fill="rgb(205,117,38)"/><text x="7.0283%" y="79.50"></text></g><g><title>cargo::commands::builtin (5 samples, 0.20%)</title><rect x="7.1049%" y="661" width="0.2042%" height="15" fill="rgb(237,72,25)"/><text x="7.3549%" y="671.50"></text></g><g><title>cargo::core::compiler::context::Context::compile (8 samples, 0.33%)</title><rect x="7.3091%" y="661" width="0.3267%" height="15" fill="rgb(244,70,9)"/><text x="7.5591%" y="671.50"></text></g><g><title>cargo::core::compiler::job_queue::JobQueue::execute (8 samples, 0.33%)</title><rect x="7.3091%" y="645" width="0.3267%" height="15" fill="rgb(217,125,39)"/><text x="7.5591%" y="655.50"></text></g><g><title>crossbeam_utils::thread::scope (8 samples, 0.33%)</title><rect x="7.3091%" y="629" width="0.3267%" height="15" fill="rgb(235,36,10)"/><text x="7.5591%" y="639.50"></text></g><g><title>std::panic::catch_unwind (8 samples, 0.33%)</title><rect x="7.3091%" y="613" width="0.3267%" height="15" fill="rgb(251,123,47)"/><text x="7.5591%" y="623.50"></text></g><g><title>&lt;jobserver::HelperThread as core::ops::drop::Drop&gt;::drop (8 samples, 0.33%)</title><rect x="7.3091%" y="597" width="0.3267%" height="15" fill="rgb(221,13,13)"/><text x="7.5591%" y="607.50"></text></g><g><title>jobserver::imp::Helper::join (8 samples, 0.33%)</title><rect x="7.3091%" y="581" width="0.3267%" height="15" fill="rgb(238,131,9)"/><text x="7.5591%" y="591.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait_timeout (7 samples, 0.29%)</title><rect x="7.3499%" y="565" width="0.2858%" height="15" fill="rgb(211,50,8)"/><text x="7.5999%" y="575.50"></text></g><g><title>__pthread_cond_timedwait (7 samples, 0.29%)</title><rect x="7.3499%" y="549" width="0.2858%" height="15" fill="rgb(245,182,24)"/><text x="7.5999%" y="559.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (3 samples, 0.12%)</title><rect x="7.6358%" y="629" width="0.1225%" height="15" fill="rgb(242,14,37)"/><text x="7.8858%" y="639.50"></text></g><g><title>cargo::ops::registry::http_proxy (3 samples, 0.12%)</title><rect x="7.6358%" y="613" width="0.1225%" height="15" fill="rgb(246,228,12)"/><text x="7.8858%" y="623.50"></text></g><g><title>git2::config::Config::open_default (3 samples, 0.12%)</title><rect x="7.6358%" y="597" width="0.1225%" height="15" fill="rgb(213,55,15)"/><text x="7.8858%" y="607.50"></text></g><g><title>libgit2_sys::init (3 samples, 0.12%)</title><rect x="7.6358%" y="581" width="0.1225%" height="15" fill="rgb(209,9,3)"/><text x="7.8858%" y="591.50"></text></g><g><title>std::sync::once::Once::call_inner (3 samples, 0.12%)</title><rect x="7.6358%" y="565" width="0.1225%" height="15" fill="rgb(230,59,30)"/><text x="7.8858%" y="575.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (3 samples, 0.12%)</title><rect x="7.6358%" y="549" width="0.1225%" height="15" fill="rgb(209,121,21)"/><text x="7.8858%" y="559.50"></text></g><g><title>git_libgit2_init (3 samples, 0.12%)</title><rect x="7.6358%" y="533" width="0.1225%" height="15" fill="rgb(220,109,13)"/><text x="7.8858%" y="543.50"></text></g><g><title>__pthread_once_slow (3 samples, 0.12%)</title><rect x="7.6358%" y="517" width="0.1225%" height="15" fill="rgb(232,18,1)"/><text x="7.8858%" y="527.50"></text></g><g><title>init_once (3 samples, 0.12%)</title><rect x="7.6358%" y="501" width="0.1225%" height="15" fill="rgb(215,41,42)"/><text x="7.8858%" y="511.50"></text></g><g><title>git_openssl_stream_global_init (3 samples, 0.12%)</title><rect x="7.6358%" y="485" width="0.1225%" height="15" fill="rgb(224,123,36)"/><text x="7.8858%" y="495.50"></text></g><g><title>X509_STORE_set_default_paths (3 samples, 0.12%)</title><rect x="7.6358%" y="469" width="0.1225%" height="15" fill="rgb(240,125,3)"/><text x="7.8858%" y="479.50"></text></g><g><title>by_file_ctrl (3 samples, 0.12%)</title><rect x="7.6358%" y="453" width="0.1225%" height="15" fill="rgb(205,98,50)"/><text x="7.8858%" y="463.50"></text></g><g><title>X509_load_cert_crl_file (3 samples, 0.12%)</title><rect x="7.6358%" y="437" width="0.1225%" height="15" fill="rgb(205,185,37)"/><text x="7.8858%" y="447.50"></text></g><g><title>PEM_X509_INFO_read_bio (3 samples, 0.12%)</title><rect x="7.6358%" y="421" width="0.1225%" height="15" fill="rgb(238,207,15)"/><text x="7.8858%" y="431.50"></text></g><g><title>ASN1_item_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="405" width="0.1225%" height="15" fill="rgb(213,199,42)"/><text x="7.8858%" y="415.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="389" width="0.1225%" height="15" fill="rgb(235,201,11)"/><text x="7.8858%" y="399.50"></text></g><g><title>asn1_template_ex_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="373" width="0.1225%" height="15" fill="rgb(207,46,11)"/><text x="7.8858%" y="383.50"></text></g><g><title>asn1_template_noexp_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="357" width="0.1225%" height="15" fill="rgb(241,35,35)"/><text x="7.8858%" y="367.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="341" width="0.1225%" height="15" fill="rgb(243,32,47)"/><text x="7.8858%" y="351.50"></text></g><g><title>asn1_template_ex_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="325" width="0.1225%" height="15" fill="rgb(247,202,23)"/><text x="7.8858%" y="335.50"></text></g><g><title>asn1_template_noexp_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="309" width="0.1225%" height="15" fill="rgb(219,102,11)"/><text x="7.8858%" y="319.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="293" width="0.1225%" height="15" fill="rgb(243,110,44)"/><text x="7.8858%" y="303.50"></text></g><g><title>x509_name_ex_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="277" width="0.1225%" height="15" fill="rgb(222,74,54)"/><text x="7.8858%" y="287.50"></text></g><g><title>ASN1_item_ex_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="261" width="0.1225%" height="15" fill="rgb(216,99,12)"/><text x="7.8858%" y="271.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="245" width="0.1225%" height="15" fill="rgb(226,22,26)"/><text x="7.8858%" y="255.50"></text></g><g><title>asn1_template_ex_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="229" width="0.1225%" height="15" fill="rgb(217,163,10)"/><text x="7.8858%" y="239.50"></text></g><g><title>asn1_template_noexp_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="213" width="0.1225%" height="15" fill="rgb(213,25,53)"/><text x="7.8858%" y="223.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="197" width="0.1225%" height="15" fill="rgb(252,105,26)"/><text x="7.8858%" y="207.50"></text></g><g><title>asn1_template_ex_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="181" width="0.1225%" height="15" fill="rgb(220,39,43)"/><text x="7.8858%" y="191.50"></text></g><g><title>asn1_template_noexp_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="165" width="0.1225%" height="15" fill="rgb(229,68,48)"/><text x="7.8858%" y="175.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.12%)</title><rect x="7.6358%" y="149" width="0.1225%" height="15" fill="rgb(252,8,32)"/><text x="7.8858%" y="159.50"></text></g><g><title>cargo::main (5 samples, 0.20%)</title><rect x="7.6358%" y="661" width="0.2042%" height="15" fill="rgb(223,20,43)"/><text x="7.8858%" y="671.50"></text></g><g><title>cargo::cli::main (5 samples, 0.20%)</title><rect x="7.6358%" y="645" width="0.2042%" height="15" fill="rgb(229,81,49)"/><text x="7.8858%" y="655.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (3 samples, 0.12%)</title><rect x="7.9624%" y="661" width="0.1225%" height="15" fill="rgb(236,28,36)"/><text x="8.2124%" y="671.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (3 samples, 0.12%)</title><rect x="7.9624%" y="645" width="0.1225%" height="15" fill="rgb(249,185,26)"/><text x="8.2124%" y="655.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.12%)</title><rect x="8.2074%" y="661" width="0.1225%" height="15" fill="rgb(249,174,33)"/><text x="8.4574%" y="671.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.12%)</title><rect x="8.2074%" y="645" width="0.1225%" height="15" fill="rgb(233,201,37)"/><text x="8.4574%" y="655.50"></text></g><g><title>std::panicking::try (3 samples, 0.12%)</title><rect x="8.2074%" y="629" width="0.1225%" height="15" fill="rgb(221,78,26)"/><text x="8.4574%" y="639.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.12%)</title><rect x="8.2074%" y="613" width="0.1225%" height="15" fill="rgb(250,127,30)"/><text x="8.4574%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.12%)</title><rect x="8.2074%" y="597" width="0.1225%" height="15" fill="rgb(230,49,44)"/><text x="8.4574%" y="607.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.12%)</title><rect x="8.2074%" y="581" width="0.1225%" height="15" fill="rgb(229,67,23)"/><text x="8.4574%" y="591.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.12%)</title><rect x="8.2074%" y="565" width="0.1225%" height="15" fill="rgb(249,83,47)"/><text x="8.4574%" y="575.50"></text></g><g><title>cargo::main (3 samples, 0.12%)</title><rect x="8.2074%" y="549" width="0.1225%" height="15" fill="rgb(215,43,3)"/><text x="8.4574%" y="559.50"></text></g><g><title>cargo::cli::main (3 samples, 0.12%)</title><rect x="8.2074%" y="533" width="0.1225%" height="15" fill="rgb(238,154,13)"/><text x="8.4574%" y="543.50"></text></g><g><title>[unknown] (46 samples, 1.88%)</title><rect x="6.4924%" y="677" width="1.8783%" height="15" fill="rgb(219,56,2)"/><text x="6.7424%" y="687.50">[..</text></g><g><title>cargo::util::read2::imp::read2 (8 samples, 0.33%)</title><rect x="8.4116%" y="469" width="0.3267%" height="15" fill="rgb(233,0,4)"/><text x="8.6616%" y="479.50"></text></g><g><title>__GI___poll (7 samples, 0.29%)</title><rect x="8.4524%" y="453" width="0.2858%" height="15" fill="rgb(235,30,7)"/><text x="8.7024%" y="463.50"></text></g><g><title>&lt;cargo::core::compiler::DefaultExecutor as cargo::core::compiler::Executor&gt;::exec (15 samples, 0.61%)</title><rect x="8.4116%" y="501" width="0.6125%" height="15" fill="rgb(250,79,13)"/><text x="8.6616%" y="511.50"></text></g><g><title>cargo::util::process_builder::ProcessBuilder::exec_with_streaming (15 samples, 0.61%)</title><rect x="8.4116%" y="485" width="0.6125%" height="15" fill="rgb(211,146,34)"/><text x="8.6616%" y="495.50"></text></g><g><title>std::process::Command::spawn (7 samples, 0.29%)</title><rect x="8.7383%" y="469" width="0.2858%" height="15" fill="rgb(228,22,38)"/><text x="8.9883%" y="479.50"></text></g><g><title>std::sys::unix::process::process_inner::&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (7 samples, 0.29%)</title><rect x="8.7383%" y="453" width="0.2858%" height="15" fill="rgb(235,168,5)"/><text x="8.9883%" y="463.50"></text></g><g><title>__GI___fork (7 samples, 0.29%)</title><rect x="8.7383%" y="437" width="0.2858%" height="15" fill="rgb(221,155,16)"/><text x="8.9883%" y="447.50"></text></g><g><title>__GI___clone (18 samples, 0.73%)</title><rect x="8.3708%" y="677" width="0.7350%" height="15" fill="rgb(215,215,53)"/><text x="8.6208%" y="687.50"></text></g><g><title>start_thread (17 samples, 0.69%)</title><rect x="8.4116%" y="661" width="0.6942%" height="15" fill="rgb(223,4,10)"/><text x="8.6616%" y="671.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (17 samples, 0.69%)</title><rect x="8.4116%" y="645" width="0.6942%" height="15" fill="rgb(234,103,6)"/><text x="8.6616%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (17 samples, 0.69%)</title><rect x="8.4116%" y="629" width="0.6942%" height="15" fill="rgb(227,97,0)"/><text x="8.6616%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (17 samples, 0.69%)</title><rect x="8.4116%" y="613" width="0.6942%" height="15" fill="rgb(234,150,53)"/><text x="8.6616%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (17 samples, 0.69%)</title><rect x="8.4116%" y="597" width="0.6942%" height="15" fill="rgb(228,201,54)"/><text x="8.6616%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (17 samples, 0.69%)</title><rect x="8.4116%" y="581" width="0.6942%" height="15" fill="rgb(222,22,37)"/><text x="8.6616%" y="591.50"></text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (17 samples, 0.69%)</title><rect x="8.4116%" y="565" width="0.6942%" height="15" fill="rgb(237,53,32)"/><text x="8.6616%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (17 samples, 0.69%)</title><rect x="8.4116%" y="549" width="0.6942%" height="15" fill="rgb(233,25,53)"/><text x="8.6616%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (17 samples, 0.69%)</title><rect x="8.4116%" y="533" width="0.6942%" height="15" fill="rgb(210,40,34)"/><text x="8.6616%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (17 samples, 0.69%)</title><rect x="8.4116%" y="517" width="0.6942%" height="15" fill="rgb(241,220,44)"/><text x="8.6616%" y="527.50"></text></g><g><title>__libc_csu_init (12 samples, 0.49%)</title><rect x="9.3508%" y="645" width="0.4900%" height="15" fill="rgb(235,28,35)"/><text x="9.6008%" y="655.50"></text></g><g><title>curl::init::init_inner (12 samples, 0.49%)</title><rect x="9.3508%" y="629" width="0.4900%" height="15" fill="rgb(210,56,17)"/><text x="9.6008%" y="639.50"></text></g><g><title>std::sync::once::Once::call_inner (12 samples, 0.49%)</title><rect x="9.3508%" y="613" width="0.4900%" height="15" fill="rgb(224,130,29)"/><text x="9.6008%" y="623.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (12 samples, 0.49%)</title><rect x="9.3508%" y="597" width="0.4900%" height="15" fill="rgb(235,212,8)"/><text x="9.6008%" y="607.50"></text></g><g><title>curl_global_init (12 samples, 0.49%)</title><rect x="9.3508%" y="581" width="0.4900%" height="15" fill="rgb(223,33,50)"/><text x="9.6008%" y="591.50"></text></g><g><title>Curl_ossl_init (12 samples, 0.49%)</title><rect x="9.3508%" y="565" width="0.4900%" height="15" fill="rgb(219,149,13)"/><text x="9.6008%" y="575.50"></text></g><g><title>OPENSSL_init_crypto (10 samples, 0.41%)</title><rect x="9.4324%" y="549" width="0.4083%" height="15" fill="rgb(250,156,29)"/><text x="9.6824%" y="559.50"></text></g><g><title>CRYPTO_THREAD_run_once (10 samples, 0.41%)</title><rect x="9.4324%" y="533" width="0.4083%" height="15" fill="rgb(216,193,19)"/><text x="9.6824%" y="543.50"></text></g><g><title>__pthread_once_slow (10 samples, 0.41%)</title><rect x="9.4324%" y="517" width="0.4083%" height="15" fill="rgb(216,135,14)"/><text x="9.6824%" y="527.50"></text></g><g><title>ossl_init_engine_dynamic_ossl_ (10 samples, 0.41%)</title><rect x="9.4324%" y="501" width="0.4083%" height="15" fill="rgb(241,47,5)"/><text x="9.6824%" y="511.50"></text></g><g><title>ERR_clear_error (10 samples, 0.41%)</title><rect x="9.4324%" y="485" width="0.4083%" height="15" fill="rgb(233,42,35)"/><text x="9.6824%" y="495.50"></text></g><g><title>ERR_get_state (10 samples, 0.41%)</title><rect x="9.4324%" y="469" width="0.4083%" height="15" fill="rgb(231,13,6)"/><text x="9.6824%" y="479.50"></text></g><g><title>OPENSSL_init_crypto (10 samples, 0.41%)</title><rect x="9.4324%" y="453" width="0.4083%" height="15" fill="rgb(207,181,40)"/><text x="9.6824%" y="463.50"></text></g><g><title>CRYPTO_THREAD_run_once (10 samples, 0.41%)</title><rect x="9.4324%" y="437" width="0.4083%" height="15" fill="rgb(254,173,49)"/><text x="9.6824%" y="447.50"></text></g><g><title>__pthread_once_slow (10 samples, 0.41%)</title><rect x="9.4324%" y="421" width="0.4083%" height="15" fill="rgb(221,1,38)"/><text x="9.6824%" y="431.50"></text></g><g><title>ossl_init_load_crypto_strings_ossl_ (10 samples, 0.41%)</title><rect x="9.4324%" y="405" width="0.4083%" height="15" fill="rgb(206,124,46)"/><text x="9.6824%" y="415.50"></text></g><g><title>err_load_crypto_strings_int (10 samples, 0.41%)</title><rect x="9.4324%" y="389" width="0.4083%" height="15" fill="rgb(249,21,11)"/><text x="9.6824%" y="399.50"></text></g><g><title>asn1_d2i_ex_primitive (3 samples, 0.12%)</title><rect x="10.0449%" y="133" width="0.1225%" height="15" fill="rgb(222,201,40)"/><text x="10.2949%" y="143.50"></text></g><g><title>ASN1_STRING_to_UTF8 (8 samples, 0.33%)</title><rect x="10.3307%" y="101" width="0.3267%" height="15" fill="rgb(235,61,29)"/><text x="10.5807%" y="111.50"></text></g><g><title>ASN1_mbstring_copy (8 samples, 0.33%)</title><rect x="10.3307%" y="85" width="0.3267%" height="15" fill="rgb(219,207,3)"/><text x="10.5807%" y="95.50"></text></g><g><title>ASN1_mbstring_ncopy (8 samples, 0.33%)</title><rect x="10.3307%" y="69" width="0.3267%" height="15" fill="rgb(222,56,46)"/><text x="10.5807%" y="79.50"></text></g><g><title>ASN1_item_ex_i2d (3 samples, 0.12%)</title><rect x="10.6574%" y="101" width="0.1225%" height="15" fill="rgb(239,76,54)"/><text x="10.9074%" y="111.50"></text></g><g><title>asn1_template_ex_i2d (3 samples, 0.12%)</title><rect x="10.6574%" y="85" width="0.1225%" height="15" fill="rgb(231,124,27)"/><text x="10.9074%" y="95.50"></text></g><g><title>ASN1_item_d2i (24 samples, 0.98%)</title><rect x="9.9633%" y="261" width="0.9800%" height="15" fill="rgb(249,195,6)"/><text x="10.2133%" y="271.50"></text></g><g><title>asn1_item_embed_d2i (24 samples, 0.98%)</title><rect x="9.9633%" y="245" width="0.9800%" height="15" fill="rgb(237,174,47)"/><text x="10.2133%" y="255.50"></text></g><g><title>asn1_template_ex_d2i (22 samples, 0.90%)</title><rect x="10.0449%" y="229" width="0.8983%" height="15" fill="rgb(206,201,31)"/><text x="10.2949%" y="239.50"></text></g><g><title>asn1_template_noexp_d2i (22 samples, 0.90%)</title><rect x="10.0449%" y="213" width="0.8983%" height="15" fill="rgb(231,57,52)"/><text x="10.2949%" y="223.50"></text></g><g><title>asn1_item_embed_d2i (22 samples, 0.90%)</title><rect x="10.0449%" y="197" width="0.8983%" height="15" fill="rgb(248,177,22)"/><text x="10.2949%" y="207.50"></text></g><g><title>asn1_template_ex_d2i (22 samples, 0.90%)</title><rect x="10.0449%" y="181" width="0.8983%" height="15" fill="rgb(215,211,37)"/><text x="10.2949%" y="191.50"></text></g><g><title>asn1_template_noexp_d2i (22 samples, 0.90%)</title><rect x="10.0449%" y="165" width="0.8983%" height="15" fill="rgb(241,128,51)"/><text x="10.2949%" y="175.50"></text></g><g><title>asn1_item_embed_d2i (22 samples, 0.90%)</title><rect x="10.0449%" y="149" width="0.8983%" height="15" fill="rgb(227,165,31)"/><text x="10.2949%" y="159.50"></text></g><g><title>x509_name_ex_d2i (17 samples, 0.69%)</title><rect x="10.2491%" y="133" width="0.6942%" height="15" fill="rgb(228,167,24)"/><text x="10.4991%" y="143.50"></text></g><g><title>x509_name_canon (17 samples, 0.69%)</title><rect x="10.2491%" y="117" width="0.6942%" height="15" fill="rgb(228,143,12)"/><text x="10.4991%" y="127.50"></text></g><g><title>BIO_gets (4 samples, 0.16%)</title><rect x="10.9432%" y="245" width="0.1633%" height="15" fill="rgb(249,149,8)"/><text x="11.1932%" y="255.50"></text></g><g><title>file_gets (4 samples, 0.16%)</title><rect x="10.9432%" y="229" width="0.1633%" height="15" fill="rgb(243,35,44)"/><text x="11.1932%" y="239.50"></text></g><g><title>BIO_puts (3 samples, 0.12%)</title><rect x="11.1066%" y="245" width="0.1225%" height="15" fill="rgb(246,89,9)"/><text x="11.3566%" y="255.50"></text></g><g><title>mem_write (3 samples, 0.12%)</title><rect x="11.1066%" y="229" width="0.1225%" height="15" fill="rgb(233,213,13)"/><text x="11.3566%" y="239.50"></text></g><g><title>EVP_DecodeUpdate (8 samples, 0.33%)</title><rect x="11.2291%" y="245" width="0.3267%" height="15" fill="rgb(233,141,41)"/><text x="11.4791%" y="255.50"></text></g><g><title>evp_decodeblock_int (5 samples, 0.20%)</title><rect x="11.3516%" y="229" width="0.2042%" height="15" fill="rgb(239,167,4)"/><text x="11.6016%" y="239.50"></text></g><g><title>PEM_X509_INFO_read_bio (41 samples, 1.67%)</title><rect x="9.9633%" y="277" width="1.6742%" height="15" fill="rgb(209,217,16)"/><text x="10.2133%" y="287.50"></text></g><g><title>PEM_read_bio_ex (17 samples, 0.69%)</title><rect x="10.9432%" y="261" width="0.6942%" height="15" fill="rgb(219,88,35)"/><text x="11.1932%" y="271.50"></text></g><g><title>by_file_ctrl (46 samples, 1.88%)</title><rect x="9.9633%" y="309" width="1.8783%" height="15" fill="rgb(220,193,23)"/><text x="10.2133%" y="319.50">b..</text></g><g><title>X509_load_cert_crl_file (46 samples, 1.88%)</title><rect x="9.9633%" y="293" width="1.8783%" height="15" fill="rgb(230,90,52)"/><text x="10.2133%" y="303.50">X..</text></g><g><title>X509_STORE_add_cert (5 samples, 0.20%)</title><rect x="11.6374%" y="277" width="0.2042%" height="15" fill="rgb(252,106,19)"/><text x="11.8874%" y="287.50"></text></g><g><title>x509_store_add (5 samples, 0.20%)</title><rect x="11.6374%" y="261" width="0.2042%" height="15" fill="rgb(206,74,20)"/><text x="11.8874%" y="271.50"></text></g><g><title>X509_OBJECT_retrieve_match (5 samples, 0.20%)</title><rect x="11.6374%" y="245" width="0.2042%" height="15" fill="rgb(230,138,44)"/><text x="11.8874%" y="255.50"></text></g><g><title>internal_find (5 samples, 0.20%)</title><rect x="11.6374%" y="229" width="0.2042%" height="15" fill="rgb(235,182,43)"/><text x="11.8874%" y="239.50"></text></g><g><title>__GI___qsort_r (5 samples, 0.20%)</title><rect x="11.6374%" y="213" width="0.2042%" height="15" fill="rgb(242,16,51)"/><text x="11.8874%" y="223.50"></text></g><g><title>msort_with_tmp.part.0 (5 samples, 0.20%)</title><rect x="11.6374%" y="197" width="0.2042%" height="15" fill="rgb(248,9,4)"/><text x="11.8874%" y="207.50"></text></g><g><title>msort_with_tmp.part.0 (4 samples, 0.16%)</title><rect x="11.6782%" y="181" width="0.1633%" height="15" fill="rgb(210,31,22)"/><text x="11.9282%" y="191.50"></text></g><g><title>git_libgit2_init (50 samples, 2.04%)</title><rect x="9.8408%" y="389" width="2.0416%" height="15" fill="rgb(239,54,39)"/><text x="10.0908%" y="399.50">g..</text></g><g><title>__pthread_once_slow (50 samples, 2.04%)</title><rect x="9.8408%" y="373" width="2.0416%" height="15" fill="rgb(230,99,41)"/><text x="10.0908%" y="383.50">_..</text></g><g><title>init_once (49 samples, 2.00%)</title><rect x="9.8816%" y="357" width="2.0008%" height="15" fill="rgb(253,106,12)"/><text x="10.1316%" y="367.50">i..</text></g><g><title>git_openssl_stream_global_init (49 samples, 2.00%)</title><rect x="9.8816%" y="341" width="2.0008%" height="15" fill="rgb(213,46,41)"/><text x="10.1316%" y="351.50">g..</text></g><g><title>X509_STORE_set_default_paths (47 samples, 1.92%)</title><rect x="9.9633%" y="325" width="1.9192%" height="15" fill="rgb(215,133,35)"/><text x="10.2133%" y="335.50">X..</text></g><g><title>libgit2_sys::init (51 samples, 2.08%)</title><rect x="9.8408%" y="437" width="2.0825%" height="15" fill="rgb(213,28,5)"/><text x="10.0908%" y="447.50">l..</text></g><g><title>std::sync::once::Once::call_inner (51 samples, 2.08%)</title><rect x="9.8408%" y="421" width="2.0825%" height="15" fill="rgb(215,77,49)"/><text x="10.0908%" y="431.50">s..</text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (51 samples, 2.08%)</title><rect x="9.8408%" y="405" width="2.0825%" height="15" fill="rgb(248,100,22)"/><text x="10.0908%" y="415.50">s..</text></g><g><title>cargo::cli::main (52 samples, 2.12%)</title><rect x="9.8408%" y="501" width="2.1233%" height="15" fill="rgb(208,67,9)"/><text x="10.0908%" y="511.50">c..</text></g><g><title>cargo::ops::registry::needs_custom_http_transport (52 samples, 2.12%)</title><rect x="9.8408%" y="485" width="2.1233%" height="15" fill="rgb(219,133,21)"/><text x="10.0908%" y="495.50">c..</text></g><g><title>cargo::ops::registry::http_proxy (52 samples, 2.12%)</title><rect x="9.8408%" y="469" width="2.1233%" height="15" fill="rgb(246,46,29)"/><text x="10.0908%" y="479.50">c..</text></g><g><title>git2::config::Config::open_default (52 samples, 2.12%)</title><rect x="9.8408%" y="453" width="2.1233%" height="15" fill="rgb(246,185,52)"/><text x="10.0908%" y="463.50">g..</text></g><g><title>std::panic::catch_unwind (55 samples, 2.25%)</title><rect x="9.8408%" y="613" width="2.2458%" height="15" fill="rgb(252,136,11)"/><text x="10.0908%" y="623.50">s..</text></g><g><title>std::panicking::try (55 samples, 2.25%)</title><rect x="9.8408%" y="597" width="2.2458%" height="15" fill="rgb(219,138,53)"/><text x="10.0908%" y="607.50">s..</text></g><g><title>std::panicking::try::do_call (55 samples, 2.25%)</title><rect x="9.8408%" y="581" width="2.2458%" height="15" fill="rgb(211,51,23)"/><text x="10.0908%" y="591.50">s..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (55 samples, 2.25%)</title><rect x="9.8408%" y="565" width="2.2458%" height="15" fill="rgb(247,221,28)"/><text x="10.0908%" y="575.50">c..</text></g><g><title>std::rt::lang_start::_{{closure}} (55 samples, 2.25%)</title><rect x="9.8408%" y="549" width="2.2458%" height="15" fill="rgb(251,222,45)"/><text x="10.0908%" y="559.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (55 samples, 2.25%)</title><rect x="9.8408%" y="533" width="2.2458%" height="15" fill="rgb(217,162,53)"/><text x="10.0908%" y="543.50">s..</text></g><g><title>cargo::main (55 samples, 2.25%)</title><rect x="9.8408%" y="517" width="2.2458%" height="15" fill="rgb(229,93,14)"/><text x="10.0908%" y="527.50">c..</text></g><g><title>__libc_start_main (68 samples, 2.78%)</title><rect x="9.3508%" y="661" width="2.7766%" height="15" fill="rgb(209,67,49)"/><text x="9.6008%" y="671.50">__..</text></g><g><title>main (56 samples, 2.29%)</title><rect x="9.8408%" y="645" width="2.2866%" height="15" fill="rgb(213,87,29)"/><text x="10.0908%" y="655.50">m..</text></g><g><title>std::rt::lang_start_internal (56 samples, 2.29%)</title><rect x="9.8408%" y="629" width="2.2866%" height="15" fill="rgb(205,151,52)"/><text x="10.0908%" y="639.50">s..</text></g><g><title>__mmap (7 samples, 0.29%)</title><rect x="12.2091%" y="533" width="0.2858%" height="15" fill="rgb(253,215,39)"/><text x="12.4591%" y="543.50"></text></g><g><title>_dl_map_object_from_fd (9 samples, 0.37%)</title><rect x="12.1682%" y="549" width="0.3675%" height="15" fill="rgb(221,220,41)"/><text x="12.4182%" y="559.50"></text></g><g><title>open_path (3 samples, 0.12%)</title><rect x="12.5357%" y="549" width="0.1225%" height="15" fill="rgb(218,133,21)"/><text x="12.7857%" y="559.50"></text></g><g><title>_dl_map_object_deps (13 samples, 0.53%)</title><rect x="12.1682%" y="613" width="0.5308%" height="15" fill="rgb(221,193,43)"/><text x="12.4182%" y="623.50"></text></g><g><title>_dl_catch_exception (13 samples, 0.53%)</title><rect x="12.1682%" y="597" width="0.5308%" height="15" fill="rgb(240,128,52)"/><text x="12.4182%" y="607.50"></text></g><g><title>openaux (13 samples, 0.53%)</title><rect x="12.1682%" y="581" width="0.5308%" height="15" fill="rgb(253,114,12)"/><text x="12.4182%" y="591.50"></text></g><g><title>_dl_map_object (13 samples, 0.53%)</title><rect x="12.1682%" y="565" width="0.5308%" height="15" fill="rgb(215,223,47)"/><text x="12.4182%" y="575.50"></text></g><g><title>_dl_lookup_symbol_x (5 samples, 0.20%)</title><rect x="13.2299%" y="597" width="0.2042%" height="15" fill="rgb(248,225,23)"/><text x="13.4799%" y="607.50"></text></g><g><title>do_lookup_x (4 samples, 0.16%)</title><rect x="13.2707%" y="581" width="0.1633%" height="15" fill="rgb(250,108,0)"/><text x="13.5207%" y="591.50"></text></g><g><title>_dl_relocate_object (21 samples, 0.86%)</title><rect x="12.6991%" y="613" width="0.8575%" height="15" fill="rgb(228,208,7)"/><text x="12.9491%" y="623.50"></text></g><g><title>_dl_protect_relro (3 samples, 0.12%)</title><rect x="13.4341%" y="597" width="0.1225%" height="15" fill="rgb(244,45,10)"/><text x="13.6841%" y="607.50"></text></g><g><title>__mprotect (3 samples, 0.12%)</title><rect x="13.4341%" y="581" width="0.1225%" height="15" fill="rgb(207,125,25)"/><text x="13.6841%" y="591.50"></text></g><g><title>_start (109 samples, 4.45%)</title><rect x="9.1466%" y="677" width="4.4508%" height="15" fill="rgb(210,195,18)"/><text x="9.3966%" y="687.50">_start</text></g><g><title>_dl_start (36 samples, 1.47%)</title><rect x="12.1274%" y="661" width="1.4700%" height="15" fill="rgb(249,80,12)"/><text x="12.3774%" y="671.50"></text></g><g><title>_dl_sysdep_start (36 samples, 1.47%)</title><rect x="12.1274%" y="645" width="1.4700%" height="15" fill="rgb(221,65,9)"/><text x="12.3774%" y="655.50"></text></g><g><title>dl_main (36 samples, 1.47%)</title><rect x="12.1274%" y="629" width="1.4700%" height="15" fill="rgb(235,49,36)"/><text x="12.3774%" y="639.50"></text></g><g><title>cargo (185 samples, 7.55%)</title><rect x="6.1249%" y="693" width="7.5541%" height="15" fill="rgb(225,32,20)"/><text x="6.3749%" y="703.50">cargo</text></g><g><title>__libc_vfork (6 samples, 0.24%)</title><rect x="13.6791%" y="293" width="0.2450%" height="15" fill="rgb(215,141,46)"/><text x="13.9291%" y="303.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="517" width="0.2858%" height="15" fill="rgb(250,160,47)"/><text x="13.9291%" y="527.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="501" width="0.2858%" height="15" fill="rgb(216,222,40)"/><text x="13.9291%" y="511.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="485" width="0.2858%" height="15" fill="rgb(234,217,39)"/><text x="13.9291%" y="495.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="469" width="0.2858%" height="15" fill="rgb(207,178,40)"/><text x="13.9291%" y="479.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="453" width="0.2858%" height="15" fill="rgb(221,136,13)"/><text x="13.9291%" y="463.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="437" width="0.2858%" height="15" fill="rgb(249,199,10)"/><text x="13.9291%" y="447.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="421" width="0.2858%" height="15" fill="rgb(249,222,13)"/><text x="13.9291%" y="431.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="405" width="0.2858%" height="15" fill="rgb(244,185,38)"/><text x="13.9291%" y="415.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="389" width="0.2858%" height="15" fill="rgb(236,202,9)"/><text x="13.9291%" y="399.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="373" width="0.2858%" height="15" fill="rgb(250,229,37)"/><text x="13.9291%" y="383.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="357" width="0.2858%" height="15" fill="rgb(206,174,23)"/><text x="13.9291%" y="367.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="341" width="0.2858%" height="15" fill="rgb(211,33,43)"/><text x="13.9291%" y="351.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="325" width="0.2858%" height="15" fill="rgb(245,58,50)"/><text x="13.9291%" y="335.50"></text></g><g><title>[gcc] (7 samples, 0.29%)</title><rect x="13.6791%" y="309" width="0.2858%" height="15" fill="rgb(244,68,36)"/><text x="13.9291%" y="319.50"></text></g><g><title>[gcc] (8 samples, 0.33%)</title><rect x="13.6791%" y="549" width="0.3267%" height="15" fill="rgb(232,229,15)"/><text x="13.9291%" y="559.50"></text></g><g><title>[gcc] (8 samples, 0.33%)</title><rect x="13.6791%" y="533" width="0.3267%" height="15" fill="rgb(254,30,23)"/><text x="13.9291%" y="543.50"></text></g><g><title>[gcc] (9 samples, 0.37%)</title><rect x="13.6791%" y="581" width="0.3675%" height="15" fill="rgb(235,160,14)"/><text x="13.9291%" y="591.50"></text></g><g><title>[gcc] (9 samples, 0.37%)</title><rect x="13.6791%" y="565" width="0.3675%" height="15" fill="rgb(212,155,44)"/><text x="13.9291%" y="575.50"></text></g><g><title>[gcc] (10 samples, 0.41%)</title><rect x="13.6791%" y="677" width="0.4083%" height="15" fill="rgb(226,2,50)"/><text x="13.9291%" y="687.50"></text></g><g><title>__libc_start_main (10 samples, 0.41%)</title><rect x="13.6791%" y="661" width="0.4083%" height="15" fill="rgb(234,177,6)"/><text x="13.9291%" y="671.50"></text></g><g><title>[gcc] (10 samples, 0.41%)</title><rect x="13.6791%" y="645" width="0.4083%" height="15" fill="rgb(217,24,9)"/><text x="13.9291%" y="655.50"></text></g><g><title>[gcc] (10 samples, 0.41%)</title><rect x="13.6791%" y="629" width="0.4083%" height="15" fill="rgb(220,13,46)"/><text x="13.9291%" y="639.50"></text></g><g><title>[gcc] (10 samples, 0.41%)</title><rect x="13.6791%" y="613" width="0.4083%" height="15" fill="rgb(239,221,27)"/><text x="13.9291%" y="623.50"></text></g><g><title>[gcc] (10 samples, 0.41%)</title><rect x="13.6791%" y="597" width="0.4083%" height="15" fill="rgb(222,198,25)"/><text x="13.9291%" y="607.50"></text></g><g><title>cc (11 samples, 0.45%)</title><rect x="13.6791%" y="693" width="0.4492%" height="15" fill="rgb(211,99,13)"/><text x="13.9291%" y="703.50"></text></g><g><title>collect2 (3 samples, 0.12%)</title><rect x="14.1282%" y="693" width="0.1225%" height="15" fill="rgb(232,111,31)"/><text x="14.3782%" y="703.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.12%)</title><rect x="14.3324%" y="677" width="0.1225%" height="15" fill="rgb(245,82,37)"/><text x="14.5824%" y="687.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.16%)</title><rect x="14.6999%" y="661" width="0.1633%" height="15" fill="rgb(227,149,46)"/><text x="14.9499%" y="671.50"></text></g><g><title>core::fmt::write (12 samples, 0.49%)</title><rect x="14.9857%" y="661" width="0.4900%" height="15" fill="rgb(218,36,50)"/><text x="15.2357%" y="671.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (3 samples, 0.12%)</title><rect x="15.5982%" y="661" width="0.1225%" height="15" fill="rgb(226,80,48)"/><text x="15.8482%" y="671.50"></text></g><g><title>[[heap]] (39 samples, 1.59%)</title><rect x="14.5365%" y="677" width="1.5925%" height="15" fill="rgb(238,224,15)"/><text x="14.7865%" y="687.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (10 samples, 0.41%)</title><rect x="15.7207%" y="661" width="0.4083%" height="15" fill="rgb(241,136,10)"/><text x="15.9707%" y="671.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (3 samples, 0.12%)</title><rect x="16.0065%" y="645" width="0.1225%" height="15" fill="rgb(208,32,45)"/><text x="16.2565%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.12%)</title><rect x="16.0065%" y="629" width="0.1225%" height="15" fill="rgb(207,135,9)"/><text x="16.2565%" y="639.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (3 samples, 0.12%)</title><rect x="16.0065%" y="613" width="0.1225%" height="15" fill="rgb(206,86,44)"/><text x="16.2565%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.20%)</title><rect x="16.2924%" y="645" width="0.2042%" height="15" fill="rgb(245,177,15)"/><text x="16.5424%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.20%)</title><rect x="16.2924%" y="629" width="0.2042%" height="15" fill="rgb(206,64,50)"/><text x="16.5424%" y="639.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.20%)</title><rect x="16.2924%" y="613" width="0.2042%" height="15" fill="rgb(234,36,40)"/><text x="16.5424%" y="623.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (5 samples, 0.20%)</title><rect x="16.2924%" y="597" width="0.2042%" height="15" fill="rgb(213,64,8)"/><text x="16.5424%" y="607.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (12 samples, 0.49%)</title><rect x="16.1699%" y="661" width="0.4900%" height="15" fill="rgb(210,75,36)"/><text x="16.4199%" y="671.50"></text></g><g><title>std::io::stdio::Stdout::lock (3 samples, 0.12%)</title><rect x="16.5374%" y="645" width="0.1225%" height="15" fill="rgb(229,88,21)"/><text x="16.7874%" y="655.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (3 samples, 0.12%)</title><rect x="16.5374%" y="629" width="0.1225%" height="15" fill="rgb(252,204,47)"/><text x="16.7874%" y="639.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (3 samples, 0.12%)</title><rect x="16.5374%" y="613" width="0.1225%" height="15" fill="rgb(208,77,27)"/><text x="16.7874%" y="623.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.12%)</title><rect x="16.7007%" y="661" width="0.1225%" height="15" fill="rgb(221,76,26)"/><text x="16.9507%" y="671.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (6 samples, 0.24%)</title><rect x="16.8232%" y="661" width="0.2450%" height="15" fill="rgb(225,139,18)"/><text x="17.0732%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (5 samples, 0.20%)</title><rect x="17.1907%" y="661" width="0.2042%" height="15" fill="rgb(230,137,11)"/><text x="17.4407%" y="671.50"></text></g><g><title>_int_free (4 samples, 0.16%)</title><rect x="17.4765%" y="661" width="0.1633%" height="15" fill="rgb(212,28,1)"/><text x="17.7265%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.12%)</title><rect x="17.6399%" y="661" width="0.1225%" height="15" fill="rgb(248,164,17)"/><text x="17.8899%" y="671.50"></text></g><g><title>[[stack]] (48 samples, 1.96%)</title><rect x="16.1290%" y="677" width="1.9600%" height="15" fill="rgb(222,171,42)"/><text x="16.3790%" y="687.50">[..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (9 samples, 0.37%)</title><rect x="18.1298%" y="661" width="0.3675%" height="15" fill="rgb(243,84,45)"/><text x="18.3798%" y="671.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.29%)</title><rect x="18.4973%" y="661" width="0.2858%" height="15" fill="rgb(252,49,23)"/><text x="18.7473%" y="671.50"></text></g><g><title>[irust] (19 samples, 0.78%)</title><rect x="18.1298%" y="677" width="0.7758%" height="15" fill="rgb(215,19,7)"/><text x="18.3798%" y="687.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (29 samples, 1.18%)</title><rect x="19.0282%" y="661" width="1.1842%" height="15" fill="rgb(238,81,41)"/><text x="19.2782%" y="671.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (36 samples, 1.47%)</title><rect x="20.2532%" y="661" width="1.4700%" height="15" fill="rgb(210,199,37)"/><text x="20.5032%" y="671.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (14 samples, 0.57%)</title><rect x="21.1515%" y="645" width="0.5717%" height="15" fill="rgb(244,192,49)"/><text x="21.4015%" y="655.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (14 samples, 0.57%)</title><rect x="21.1515%" y="629" width="0.5717%" height="15" fill="rgb(226,211,11)"/><text x="21.4015%" y="639.50"></text></g><g><title>std::memchr::memrchr (7 samples, 0.29%)</title><rect x="21.4373%" y="613" width="0.2858%" height="15" fill="rgb(236,162,54)"/><text x="21.6873%" y="623.50"></text></g><g><title>std::sys::unix::memchr::memrchr (7 samples, 0.29%)</title><rect x="21.4373%" y="597" width="0.2858%" height="15" fill="rgb(220,229,9)"/><text x="21.6873%" y="607.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (7 samples, 0.29%)</title><rect x="21.4373%" y="581" width="0.2858%" height="15" fill="rgb(250,87,22)"/><text x="21.6873%" y="591.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.16%)</title><rect x="21.8048%" y="661" width="0.1633%" height="15" fill="rgb(239,43,17)"/><text x="22.0548%" y="671.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.16%)</title><rect x="21.9682%" y="661" width="0.1633%" height="15" fill="rgb(231,177,25)"/><text x="22.2182%" y="671.50"></text></g><g><title>__spawni_child (10 samples, 0.41%)</title><rect x="22.1723%" y="661" width="0.4083%" height="15" fill="rgb(219,179,1)"/><text x="22.4223%" y="671.50"></text></g><g><title>__execvpe_common (9 samples, 0.37%)</title><rect x="22.2131%" y="645" width="0.3675%" height="15" fill="rgb(238,219,53)"/><text x="22.4631%" y="655.50"></text></g><g><title>__GI_execve (9 samples, 0.37%)</title><rect x="22.2131%" y="629" width="0.3675%" height="15" fill="rgb(232,167,36)"/><text x="22.4631%" y="639.50"></text></g><g><title>_int_free (5 samples, 0.20%)</title><rect x="22.5806%" y="661" width="0.2042%" height="15" fill="rgb(244,19,51)"/><text x="22.8306%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.12%)</title><rect x="22.8256%" y="661" width="0.1225%" height="15" fill="rgb(224,6,22)"/><text x="23.0756%" y="671.50"></text></g><g><title>core::fmt::write (3 samples, 0.12%)</title><rect x="23.0298%" y="661" width="0.1225%" height="15" fill="rgb(224,145,5)"/><text x="23.2798%" y="671.50"></text></g><g><title>irust::irust::highlight::highlight (3 samples, 0.12%)</title><rect x="23.2340%" y="661" width="0.1225%" height="15" fill="rgb(234,130,49)"/><text x="23.4840%" y="671.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input (3 samples, 0.12%)</title><rect x="23.3565%" y="661" width="0.1225%" height="15" fill="rgb(254,6,2)"/><text x="23.6065%" y="671.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner (3 samples, 0.12%)</title><rect x="23.3565%" y="645" width="0.1225%" height="15" fill="rgb(208,96,46)"/><text x="23.6065%" y="655.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (3 samples, 0.12%)</title><rect x="23.5606%" y="661" width="0.1225%" height="15" fill="rgb(239,3,39)"/><text x="23.8106%" y="671.50"></text></g><g><title>[unknown] (122 samples, 4.98%)</title><rect x="18.9057%" y="677" width="4.9816%" height="15" fill="rgb(233,210,1)"/><text x="19.1557%" y="687.50">[unkno..</text></g><g><title>__GI___clone (15 samples, 0.61%)</title><rect x="23.8873%" y="677" width="0.6125%" height="15" fill="rgb(244,137,37)"/><text x="24.1373%" y="687.50"></text></g><g><title>__GI___libc_free (4 samples, 0.16%)</title><rect x="24.4998%" y="677" width="0.1633%" height="15" fill="rgb(240,136,2)"/><text x="24.7498%" y="687.50"></text></g><g><title>core::fmt::write (3 samples, 0.12%)</title><rect x="24.6631%" y="661" width="0.1225%" height="15" fill="rgb(239,18,37)"/><text x="24.9131%" y="671.50"></text></g><g><title>_fini (4 samples, 0.16%)</title><rect x="24.6631%" y="677" width="0.1633%" height="15" fill="rgb(218,185,22)"/><text x="24.9131%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.16%)</title><rect x="25.1940%" y="485" width="0.1633%" height="15" fill="rgb(225,218,4)"/><text x="25.4440%" y="495.50"></text></g><g><title>&lt;irust::irust::IRust as core::ops::drop::Drop&gt;::drop (4 samples, 0.16%)</title><rect x="25.1940%" y="469" width="0.1633%" height="15" fill="rgb(230,182,32)"/><text x="25.4440%" y="479.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::exit (4 samples, 0.16%)</title><rect x="25.1940%" y="453" width="0.1633%" height="15" fill="rgb(242,56,43)"/><text x="25.4440%" y="463.50"></text></g><g><title>irust::irust::history::History::save (4 samples, 0.16%)</title><rect x="25.1940%" y="437" width="0.1633%" height="15" fill="rgb(233,99,24)"/><text x="25.4440%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.12%)</title><rect x="25.2348%" y="421" width="0.1225%" height="15" fill="rgb(234,209,42)"/><text x="25.4848%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.12%)</title><rect x="25.2348%" y="405" width="0.1225%" height="15" fill="rgb(227,7,12)"/><text x="25.4848%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.12%)</title><rect x="25.2348%" y="389" width="0.1225%" height="15" fill="rgb(245,203,43)"/><text x="25.4848%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.12%)</title><rect x="25.2348%" y="373" width="0.1225%" height="15" fill="rgb(238,205,33)"/><text x="25.4848%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.12%)</title><rect x="25.2348%" y="357" width="0.1225%" height="15" fill="rgb(231,56,7)"/><text x="25.4848%" y="367.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (3 samples, 0.12%)</title><rect x="25.2348%" y="341" width="0.1225%" height="15" fill="rgb(244,186,29)"/><text x="25.4848%" y="351.50"></text></g><g><title>irust::irust::history::History::save::{{closure}} (3 samples, 0.12%)</title><rect x="25.2348%" y="325" width="0.1225%" height="15" fill="rgb(234,111,31)"/><text x="25.4848%" y="335.50"></text></g><g><title>irust::irust::cursor::Cursor::new (7 samples, 0.29%)</title><rect x="25.3573%" y="469" width="0.2858%" height="15" fill="rgb(241,149,10)"/><text x="25.6073%" y="479.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::get_current_pos (7 samples, 0.29%)</title><rect x="25.3573%" y="453" width="0.2858%" height="15" fill="rgb(249,206,44)"/><text x="25.6073%" y="463.50"></text></g><g><title>crossterm::cursor::sys::unix::position (7 samples, 0.29%)</title><rect x="25.3573%" y="437" width="0.2858%" height="15" fill="rgb(251,153,30)"/><text x="25.6073%" y="447.50"></text></g><g><title>crossterm::cursor::sys::unix::read_position (7 samples, 0.29%)</title><rect x="25.3573%" y="421" width="0.2858%" height="15" fill="rgb(239,152,38)"/><text x="25.6073%" y="431.50"></text></g><g><title>crossterm::cursor::sys::unix::read_position_raw (7 samples, 0.29%)</title><rect x="25.3573%" y="405" width="0.2858%" height="15" fill="rgb(249,139,47)"/><text x="25.6073%" y="415.50"></text></g><g><title>crossterm::event::poll_internal (7 samples, 0.29%)</title><rect x="25.3573%" y="389" width="0.2858%" height="15" fill="rgb(244,64,35)"/><text x="25.6073%" y="399.50"></text></g><g><title>crossterm::event::read::InternalEventReader::poll (7 samples, 0.29%)</title><rect x="25.3573%" y="373" width="0.2858%" height="15" fill="rgb(216,46,15)"/><text x="25.6073%" y="383.50"></text></g><g><title>&lt;crossterm::event::source::unix::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (7 samples, 0.29%)</title><rect x="25.3573%" y="357" width="0.2858%" height="15" fill="rgb(250,74,19)"/><text x="25.6073%" y="367.50"></text></g><g><title>mio::poll::Poll::poll (7 samples, 0.29%)</title><rect x="25.3573%" y="341" width="0.2858%" height="15" fill="rgb(249,42,33)"/><text x="25.6073%" y="351.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (7 samples, 0.29%)</title><rect x="25.3573%" y="325" width="0.2858%" height="15" fill="rgb(242,149,17)"/><text x="25.6073%" y="335.50"></text></g><g><title>epoll_wait (7 samples, 0.29%)</title><rect x="25.3573%" y="309" width="0.2858%" height="15" fill="rgb(244,29,21)"/><text x="25.6073%" y="319.50"></text></g><g><title>irust::irust::IRust::new (8 samples, 0.33%)</title><rect x="25.3573%" y="485" width="0.3267%" height="15" fill="rgb(220,130,37)"/><text x="25.6073%" y="495.50"></text></g><g><title>&lt;irust::irust::buffer::Buffer as alloc::string::ToString&gt;::to_string (11 samples, 0.45%)</title><rect x="25.7248%" y="437" width="0.4492%" height="15" fill="rgb(211,67,2)"/><text x="25.9748%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 0.45%)</title><rect x="25.7248%" y="421" width="0.4492%" height="15" fill="rgb(235,68,52)"/><text x="25.9748%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (11 samples, 0.45%)</title><rect x="25.7248%" y="405" width="0.4492%" height="15" fill="rgb(246,142,3)"/><text x="25.9748%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (11 samples, 0.45%)</title><rect x="25.7248%" y="389" width="0.4492%" height="15" fill="rgb(241,25,7)"/><text x="25.9748%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (11 samples, 0.45%)</title><rect x="25.7248%" y="373" width="0.4492%" height="15" fill="rgb(242,119,39)"/><text x="25.9748%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 0.37%)</title><rect x="25.8065%" y="357" width="0.3675%" height="15" fill="rgb(241,98,45)"/><text x="26.0565%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.37%)</title><rect x="25.8065%" y="341" width="0.3675%" height="15" fill="rgb(254,28,30)"/><text x="26.0565%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.37%)</title><rect x="25.8065%" y="325" width="0.3675%" height="15" fill="rgb(241,142,54)"/><text x="26.0565%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.37%)</title><rect x="25.8065%" y="309" width="0.3675%" height="15" fill="rgb(222,85,15)"/><text x="26.0565%" y="319.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (3 samples, 0.12%)</title><rect x="26.0514%" y="293" width="0.1225%" height="15" fill="rgb(210,85,47)"/><text x="26.3014%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.12%)</title><rect x="26.0514%" y="277" width="0.1225%" height="15" fill="rgb(224,206,25)"/><text x="26.3014%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (3 samples, 0.12%)</title><rect x="26.0514%" y="261" width="0.1225%" height="15" fill="rgb(243,201,19)"/><text x="26.3014%" y="271.50"></text></g><g><title>alloc::string::String::push (3 samples, 0.12%)</title><rect x="26.0514%" y="245" width="0.1225%" height="15" fill="rgb(236,59,4)"/><text x="26.3014%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (3 samples, 0.12%)</title><rect x="26.0514%" y="229" width="0.1225%" height="15" fill="rgb(254,179,45)"/><text x="26.3014%" y="239.50"></text></g><g><title>&lt;irust::irust::buffer::Buffer as alloc::string::ToString&gt;::to_string (8 samples, 0.33%)</title><rect x="26.2964%" y="421" width="0.3267%" height="15" fill="rgb(226,14,10)"/><text x="26.5464%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.33%)</title><rect x="26.2964%" y="405" width="0.3267%" height="15" fill="rgb(244,27,41)"/><text x="26.5464%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (8 samples, 0.33%)</title><rect x="26.2964%" y="389" width="0.3267%" height="15" fill="rgb(235,35,32)"/><text x="26.5464%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (8 samples, 0.33%)</title><rect x="26.2964%" y="373" width="0.3267%" height="15" fill="rgb(218,68,31)"/><text x="26.5464%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (8 samples, 0.33%)</title><rect x="26.2964%" y="357" width="0.3267%" height="15" fill="rgb(207,120,37)"/><text x="26.5464%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.33%)</title><rect x="26.2964%" y="341" width="0.3267%" height="15" fill="rgb(227,98,0)"/><text x="26.5464%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.33%)</title><rect x="26.2964%" y="325" width="0.3267%" height="15" fill="rgb(207,7,3)"/><text x="26.5464%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.33%)</title><rect x="26.2964%" y="309" width="0.3267%" height="15" fill="rgb(206,98,19)"/><text x="26.5464%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.33%)</title><rect x="26.2964%" y="293" width="0.3267%" height="15" fill="rgb(217,5,26)"/><text x="26.5464%" y="303.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8 samples, 0.33%)</title><rect x="26.2964%" y="277" width="0.3267%" height="15" fill="rgb(235,190,38)"/><text x="26.5464%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (8 samples, 0.33%)</title><rect x="26.2964%" y="261" width="0.3267%" height="15" fill="rgb(247,86,24)"/><text x="26.5464%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (8 samples, 0.33%)</title><rect x="26.2964%" y="245" width="0.3267%" height="15" fill="rgb(205,101,16)"/><text x="26.5464%" y="255.50"></text></g><g><title>alloc::string::String::push (8 samples, 0.33%)</title><rect x="26.2964%" y="229" width="0.3267%" height="15" fill="rgb(246,168,33)"/><text x="26.5464%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (8 samples, 0.33%)</title><rect x="26.2964%" y="213" width="0.3267%" height="15" fill="rgb(231,114,1)"/><text x="26.5464%" y="223.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_start (3 samples, 0.12%)</title><rect x="26.6231%" y="421" width="0.1225%" height="15" fill="rgb(207,184,53)"/><text x="26.8731%" y="431.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_internal_pos (3 samples, 0.12%)</title><rect x="26.6231%" y="405" width="0.1225%" height="15" fill="rgb(224,95,51)"/><text x="26.8731%" y="415.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (3 samples, 0.12%)</title><rect x="26.6231%" y="389" width="0.1225%" height="15" fill="rgb(212,188,45)"/><text x="26.8731%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.12%)</title><rect x="26.6231%" y="373" width="0.1225%" height="15" fill="rgb(223,154,38)"/><text x="26.8731%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto::{{closure}} (3 samples, 0.12%)</title><rect x="26.6231%" y="357" width="0.1225%" height="15" fill="rgb(251,22,52)"/><text x="26.8731%" y="367.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.12%)</title><rect x="26.6231%" y="341" width="0.1225%" height="15" fill="rgb(229,209,22)"/><text x="26.8731%" y="351.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.12%)</title><rect x="26.6231%" y="325" width="0.1225%" height="15" fill="rgb(234,138,34)"/><text x="26.8731%" y="335.50"></text></g><g><title>irust::irust::cursor::Cursor::restore_position (4 samples, 0.16%)</title><rect x="26.8273%" y="421" width="0.1633%" height="15" fill="rgb(212,95,11)"/><text x="27.0773%" y="431.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.16%)</title><rect x="27.5623%" y="405" width="0.1633%" height="15" fill="rgb(240,179,47)"/><text x="27.8123%" y="415.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.29%)</title><rect x="27.8073%" y="197" width="0.2858%" height="15" fill="rgb(240,163,11)"/><text x="28.0573%" y="207.50"></text></g><g><title>_int_malloc (5 samples, 0.20%)</title><rect x="27.8889%" y="181" width="0.2042%" height="15" fill="rgb(236,37,12)"/><text x="28.1389%" y="191.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (12 samples, 0.49%)</title><rect x="27.7256%" y="405" width="0.4900%" height="15" fill="rgb(232,164,16)"/><text x="27.9756%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (10 samples, 0.41%)</title><rect x="27.8073%" y="389" width="0.4083%" height="15" fill="rgb(244,205,15)"/><text x="28.0573%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (10 samples, 0.41%)</title><rect x="27.8073%" y="373" width="0.4083%" height="15" fill="rgb(223,117,47)"/><text x="28.0573%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (10 samples, 0.41%)</title><rect x="27.8073%" y="357" width="0.4083%" height="15" fill="rgb(244,107,35)"/><text x="28.0573%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.41%)</title><rect x="27.8073%" y="341" width="0.4083%" height="15" fill="rgb(205,140,8)"/><text x="28.0573%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.41%)</title><rect x="27.8073%" y="325" width="0.4083%" height="15" fill="rgb(228,84,46)"/><text x="28.0573%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.41%)</title><rect x="27.8073%" y="309" width="0.4083%" height="15" fill="rgb(254,188,9)"/><text x="28.0573%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.41%)</title><rect x="27.8073%" y="293" width="0.4083%" height="15" fill="rgb(206,112,54)"/><text x="28.0573%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.41%)</title><rect x="27.8073%" y="277" width="0.4083%" height="15" fill="rgb(216,84,49)"/><text x="28.0573%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.41%)</title><rect x="27.8073%" y="261" width="0.4083%" height="15" fill="rgb(214,194,35)"/><text x="28.0573%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.41%)</title><rect x="27.8073%" y="245" width="0.4083%" height="15" fill="rgb(249,28,3)"/><text x="28.0573%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.41%)</title><rect x="27.8073%" y="229" width="0.4083%" height="15" fill="rgb(222,56,52)"/><text x="28.0573%" y="239.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.41%)</title><rect x="27.8073%" y="213" width="0.4083%" height="15" fill="rgb(245,217,50)"/><text x="28.0573%" y="223.50"></text></g><g><title>irust::irust::highlight::highlight (15 samples, 0.61%)</title><rect x="28.2973%" y="405" width="0.6125%" height="15" fill="rgb(213,201,24)"/><text x="28.5473%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.20%)</title><rect x="29.0731%" y="293" width="0.2042%" height="15" fill="rgb(248,116,28)"/><text x="29.3231%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.20%)</title><rect x="29.0731%" y="277" width="0.2042%" height="15" fill="rgb(219,72,43)"/><text x="29.3231%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.20%)</title><rect x="29.0731%" y="261" width="0.2042%" height="15" fill="rgb(209,138,14)"/><text x="29.3231%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.16%)</title><rect x="29.1139%" y="245" width="0.1633%" height="15" fill="rgb(222,18,33)"/><text x="29.3639%" y="255.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.16%)</title><rect x="29.1139%" y="229" width="0.1633%" height="15" fill="rgb(213,199,7)"/><text x="29.3639%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (37 samples, 1.51%)</title><rect x="29.0731%" y="373" width="1.5108%" height="15" fill="rgb(250,110,10)"/><text x="29.3231%" y="383.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (37 samples, 1.51%)</title><rect x="29.0731%" y="357" width="1.5108%" height="15" fill="rgb(248,123,6)"/><text x="29.3231%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (37 samples, 1.51%)</title><rect x="29.0731%" y="341" width="1.5108%" height="15" fill="rgb(206,91,31)"/><text x="29.3231%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (37 samples, 1.51%)</title><rect x="29.0731%" y="325" width="1.5108%" height="15" fill="rgb(211,154,13)"/><text x="29.3231%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (37 samples, 1.51%)</title><rect x="29.0731%" y="309" width="1.5108%" height="15" fill="rgb(225,148,7)"/><text x="29.3231%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (32 samples, 1.31%)</title><rect x="29.2773%" y="293" width="1.3067%" height="15" fill="rgb(220,160,43)"/><text x="29.5273%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (31 samples, 1.27%)</title><rect x="29.3181%" y="277" width="1.2658%" height="15" fill="rgb(213,52,39)"/><text x="29.5681%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 1.27%)</title><rect x="29.3181%" y="261" width="1.2658%" height="15" fill="rgb(243,137,7)"/><text x="29.5681%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 1.27%)</title><rect x="29.3181%" y="245" width="1.2658%" height="15" fill="rgb(230,79,13)"/><text x="29.5681%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (31 samples, 1.27%)</title><rect x="29.3181%" y="229" width="1.2658%" height="15" fill="rgb(247,105,23)"/><text x="29.5681%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 1.27%)</title><rect x="29.3181%" y="213" width="1.2658%" height="15" fill="rgb(223,179,41)"/><text x="29.5681%" y="223.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 1.27%)</title><rect x="29.3181%" y="197" width="1.2658%" height="15" fill="rgb(218,9,34)"/><text x="29.5681%" y="207.50"></text></g><g><title>__GI___libc_malloc (30 samples, 1.22%)</title><rect x="29.3589%" y="181" width="1.2250%" height="15" fill="rgb(222,106,8)"/><text x="29.6089%" y="191.50"></text></g><g><title>_int_malloc (20 samples, 0.82%)</title><rect x="29.7673%" y="165" width="0.8167%" height="15" fill="rgb(211,220,0)"/><text x="30.0173%" y="175.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (38 samples, 1.55%)</title><rect x="29.0731%" y="389" width="1.5517%" height="15" fill="rgb(229,52,16)"/><text x="29.3231%" y="399.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.29%)</title><rect x="30.6247%" y="357" width="0.2858%" height="15" fill="rgb(212,155,18)"/><text x="30.8747%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.37%)</title><rect x="30.6247%" y="389" width="0.3675%" height="15" fill="rgb(242,21,14)"/><text x="30.8747%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.37%)</title><rect x="30.6247%" y="373" width="0.3675%" height="15" fill="rgb(222,19,48)"/><text x="30.8747%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (5 samples, 0.20%)</title><rect x="31.1556%" y="373" width="0.2042%" height="15" fill="rgb(232,45,27)"/><text x="31.4056%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (4 samples, 0.16%)</title><rect x="31.1964%" y="357" width="0.1633%" height="15" fill="rgb(249,103,42)"/><text x="31.4464%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.16%)</title><rect x="31.1964%" y="341" width="0.1633%" height="15" fill="rgb(246,81,33)"/><text x="31.4464%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (4 samples, 0.16%)</title><rect x="31.1964%" y="325" width="0.1633%" height="15" fill="rgb(252,33,42)"/><text x="31.4464%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.16%)</title><rect x="31.1964%" y="309" width="0.1633%" height="15" fill="rgb(209,212,41)"/><text x="31.4464%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.12%)</title><rect x="31.2372%" y="293" width="0.1225%" height="15" fill="rgb(207,154,6)"/><text x="31.4872%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (3 samples, 0.12%)</title><rect x="31.2372%" y="277" width="0.1225%" height="15" fill="rgb(223,64,47)"/><text x="31.4872%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.12%)</title><rect x="31.2372%" y="261" width="0.1225%" height="15" fill="rgb(211,161,38)"/><text x="31.4872%" y="271.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.12%)</title><rect x="31.2372%" y="245" width="0.1225%" height="15" fill="rgb(219,138,40)"/><text x="31.4872%" y="255.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.12%)</title><rect x="31.2372%" y="229" width="0.1225%" height="15" fill="rgb(241,228,46)"/><text x="31.4872%" y="239.50"></text></g><g><title>alloc::string::String::push (7 samples, 0.29%)</title><rect x="31.1556%" y="389" width="0.2858%" height="15" fill="rgb(223,209,38)"/><text x="31.4056%" y="399.50"></text></g><g><title>_int_free (3 samples, 0.12%)</title><rect x="31.6864%" y="213" width="0.1225%" height="15" fill="rgb(236,164,45)"/><text x="31.9364%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (14 samples, 0.57%)</title><rect x="31.5231%" y="373" width="0.5717%" height="15" fill="rgb(231,15,5)"/><text x="31.7731%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.57%)</title><rect x="31.5231%" y="357" width="0.5717%" height="15" fill="rgb(252,35,15)"/><text x="31.7731%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (14 samples, 0.57%)</title><rect x="31.5231%" y="341" width="0.5717%" height="15" fill="rgb(248,181,18)"/><text x="31.7731%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.57%)</title><rect x="31.5231%" y="325" width="0.5717%" height="15" fill="rgb(233,39,42)"/><text x="31.7731%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.57%)</title><rect x="31.5231%" y="309" width="0.5717%" height="15" fill="rgb(238,110,33)"/><text x="31.7731%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (14 samples, 0.57%)</title><rect x="31.5231%" y="293" width="0.5717%" height="15" fill="rgb(233,195,10)"/><text x="31.7731%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (14 samples, 0.57%)</title><rect x="31.5231%" y="277" width="0.5717%" height="15" fill="rgb(254,105,3)"/><text x="31.7731%" y="287.50"></text></g><g><title>alloc::alloc::realloc (14 samples, 0.57%)</title><rect x="31.5231%" y="261" width="0.5717%" height="15" fill="rgb(221,225,9)"/><text x="31.7731%" y="271.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.57%)</title><rect x="31.5231%" y="245" width="0.5717%" height="15" fill="rgb(224,227,45)"/><text x="31.7731%" y="255.50"></text></g><g><title>_int_realloc (11 samples, 0.45%)</title><rect x="31.6456%" y="229" width="0.4492%" height="15" fill="rgb(229,198,43)"/><text x="31.8956%" y="239.50"></text></g><g><title>_int_malloc (7 samples, 0.29%)</title><rect x="31.8089%" y="213" width="0.2858%" height="15" fill="rgb(206,209,35)"/><text x="32.0589%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (17 samples, 0.69%)</title><rect x="31.4414%" y="389" width="0.6942%" height="15" fill="rgb(245,195,53)"/><text x="31.6914%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_alphanumeric (4 samples, 0.16%)</title><rect x="32.1356%" y="389" width="0.1633%" height="15" fill="rgb(240,92,26)"/><text x="32.3856%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_numeric (3 samples, 0.12%)</title><rect x="32.1764%" y="373" width="0.1225%" height="15" fill="rgb(207,40,23)"/><text x="32.4264%" y="383.50"></text></g><g><title>alloc::string::String::reserve (4 samples, 0.16%)</title><rect x="32.2989%" y="341" width="0.1633%" height="15" fill="rgb(223,111,35)"/><text x="32.5489%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (4 samples, 0.16%)</title><rect x="32.2989%" y="325" width="0.1633%" height="15" fill="rgb(229,147,28)"/><text x="32.5489%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.16%)</title><rect x="32.2989%" y="309" width="0.1633%" height="15" fill="rgb(211,29,28)"/><text x="32.5489%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (4 samples, 0.16%)</title><rect x="32.2989%" y="293" width="0.1633%" height="15" fill="rgb(228,72,33)"/><text x="32.5489%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.16%)</title><rect x="32.2989%" y="277" width="0.1633%" height="15" fill="rgb(205,214,31)"/><text x="32.5489%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.16%)</title><rect x="32.2989%" y="261" width="0.1633%" height="15" fill="rgb(224,111,15)"/><text x="32.5489%" y="271.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.16%)</title><rect x="32.2989%" y="245" width="0.1633%" height="15" fill="rgb(253,21,26)"/><text x="32.5489%" y="255.50"></text></g><g><title>_int_malloc (3 samples, 0.12%)</title><rect x="32.3397%" y="229" width="0.1225%" height="15" fill="rgb(245,139,43)"/><text x="32.5897%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 0.24%)</title><rect x="32.2989%" y="389" width="0.2450%" height="15" fill="rgb(252,170,7)"/><text x="32.5489%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.24%)</title><rect x="32.2989%" y="373" width="0.2450%" height="15" fill="rgb(231,118,14)"/><text x="32.5489%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (6 samples, 0.24%)</title><rect x="32.2989%" y="357" width="0.2450%" height="15" fill="rgb(238,83,0)"/><text x="32.5489%" y="367.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (4 samples, 0.16%)</title><rect x="32.9931%" y="341" width="0.1633%" height="15" fill="rgb(221,39,39)"/><text x="33.2431%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (4 samples, 0.16%)</title><rect x="32.9931%" y="325" width="0.1633%" height="15" fill="rgb(222,119,46)"/><text x="33.2431%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (17 samples, 0.69%)</title><rect x="32.6256%" y="389" width="0.6942%" height="15" fill="rgb(222,165,49)"/><text x="32.8756%" y="399.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (17 samples, 0.69%)</title><rect x="32.6256%" y="373" width="0.6942%" height="15" fill="rgb(219,113,52)"/><text x="32.8756%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (17 samples, 0.69%)</title><rect x="32.6256%" y="357" width="0.6942%" height="15" fill="rgb(214,7,15)"/><text x="32.8756%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.16%)</title><rect x="33.1564%" y="341" width="0.1633%" height="15" fill="rgb(235,32,4)"/><text x="33.4064%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.12%)</title><rect x="33.3197%" y="373" width="0.1225%" height="15" fill="rgb(238,90,54)"/><text x="33.5697%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.12%)</title><rect x="33.3197%" y="357" width="0.1225%" height="15" fill="rgb(213,208,19)"/><text x="33.5697%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.12%)</title><rect x="33.3197%" y="341" width="0.1225%" height="15" fill="rgb(233,156,4)"/><text x="33.5697%" y="351.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.12%)</title><rect x="33.3197%" y="325" width="0.1225%" height="15" fill="rgb(207,194,5)"/><text x="33.5697%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.12%)</title><rect x="33.4831%" y="357" width="0.1225%" height="15" fill="rgb(206,111,30)"/><text x="33.7331%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.12%)</title><rect x="33.4831%" y="341" width="0.1225%" height="15" fill="rgb(243,70,54)"/><text x="33.7331%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.12%)</title><rect x="33.4831%" y="325" width="0.1225%" height="15" fill="rgb(242,28,8)"/><text x="33.7331%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.12%)</title><rect x="33.4831%" y="309" width="0.1225%" height="15" fill="rgb(219,106,18)"/><text x="33.7331%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (5 samples, 0.20%)</title><rect x="33.4422%" y="373" width="0.2042%" height="15" fill="rgb(244,222,10)"/><text x="33.6922%" y="383.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.37%)</title><rect x="33.7689%" y="229" width="0.3675%" height="15" fill="rgb(236,179,52)"/><text x="34.0189%" y="239.50"></text></g><g><title>_int_malloc (6 samples, 0.24%)</title><rect x="33.8914%" y="213" width="0.2450%" height="15" fill="rgb(213,23,39)"/><text x="34.1414%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.45%)</title><rect x="33.7689%" y="245" width="0.4492%" height="15" fill="rgb(238,48,10)"/><text x="34.0189%" y="255.50"></text></g><g><title>alloc::string::String::reserve (13 samples, 0.53%)</title><rect x="33.7281%" y="325" width="0.5308%" height="15" fill="rgb(251,196,23)"/><text x="33.9781%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (13 samples, 0.53%)</title><rect x="33.7281%" y="309" width="0.5308%" height="15" fill="rgb(250,152,24)"/><text x="33.9781%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.53%)</title><rect x="33.7281%" y="293" width="0.5308%" height="15" fill="rgb(209,150,17)"/><text x="33.9781%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (12 samples, 0.49%)</title><rect x="33.7689%" y="277" width="0.4900%" height="15" fill="rgb(234,202,34)"/><text x="34.0189%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.49%)</title><rect x="33.7689%" y="261" width="0.4900%" height="15" fill="rgb(253,148,53)"/><text x="34.0189%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.86%)</title><rect x="33.6464%" y="373" width="0.8575%" height="15" fill="rgb(218,129,16)"/><text x="33.8964%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (21 samples, 0.86%)</title><rect x="33.6464%" y="357" width="0.8575%" height="15" fill="rgb(216,85,19)"/><text x="33.8964%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (21 samples, 0.86%)</title><rect x="33.6464%" y="341" width="0.8575%" height="15" fill="rgb(235,228,7)"/><text x="33.8964%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.24%)</title><rect x="34.2589%" y="325" width="0.2450%" height="15" fill="rgb(245,175,0)"/><text x="34.5089%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.20%)</title><rect x="34.2997%" y="309" width="0.2042%" height="15" fill="rgb(208,168,36)"/><text x="34.5497%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.24%)</title><rect x="34.6264%" y="357" width="0.2450%" height="15" fill="rgb(246,171,24)"/><text x="34.8764%" y="367.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.24%)</title><rect x="34.6264%" y="341" width="0.2450%" height="15" fill="rgb(215,142,24)"/><text x="34.8764%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.24%)</title><rect x="34.6264%" y="325" width="0.2450%" height="15" fill="rgb(250,187,7)"/><text x="34.8764%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.24%)</title><rect x="34.6264%" y="309" width="0.2450%" height="15" fill="rgb(228,66,33)"/><text x="34.8764%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.24%)</title><rect x="34.6264%" y="293" width="0.2450%" height="15" fill="rgb(234,215,21)"/><text x="34.8764%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.24%)</title><rect x="34.6264%" y="277" width="0.2450%" height="15" fill="rgb(222,191,20)"/><text x="34.8764%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (6 samples, 0.24%)</title><rect x="34.6264%" y="261" width="0.2450%" height="15" fill="rgb(245,79,54)"/><text x="34.8764%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.24%)</title><rect x="34.6264%" y="245" width="0.2450%" height="15" fill="rgb(240,10,37)"/><text x="34.8764%" y="255.50"></text></g><g><title>_int_free (4 samples, 0.16%)</title><rect x="34.7080%" y="229" width="0.1633%" height="15" fill="rgb(214,192,32)"/><text x="34.9580%" y="239.50"></text></g><g><title>irust::irust::highlight::parse (151 samples, 6.17%)</title><rect x="28.9098%" y="405" width="6.1658%" height="15" fill="rgb(209,36,54)"/><text x="29.1598%" y="415.50">irust::i..</text></g><g><title>irust::irust::highlight::catch_all (43 samples, 1.76%)</title><rect x="33.3197%" y="389" width="1.7558%" height="15" fill="rgb(220,10,11)"/><text x="33.5697%" y="399.50"></text></g><g><title>irust::irust::highlight::parse_as (14 samples, 0.57%)</title><rect x="34.5039%" y="373" width="0.5717%" height="15" fill="rgb(221,106,17)"/><text x="34.7539%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (4 samples, 0.16%)</title><rect x="35.2389%" y="341" width="0.1633%" height="15" fill="rgb(251,142,44)"/><text x="35.4889%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.16%)</title><rect x="35.2389%" y="325" width="0.1633%" height="15" fill="rgb(238,13,15)"/><text x="35.4889%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.16%)</title><rect x="35.2389%" y="309" width="0.1633%" height="15" fill="rgb(208,107,27)"/><text x="35.4889%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.16%)</title><rect x="35.2389%" y="293" width="0.1633%" height="15" fill="rgb(205,136,37)"/><text x="35.4889%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (5 samples, 0.20%)</title><rect x="35.2389%" y="389" width="0.2042%" height="15" fill="rgb(250,205,27)"/><text x="35.4889%" y="399.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (5 samples, 0.20%)</title><rect x="35.2389%" y="373" width="0.2042%" height="15" fill="rgb(210,80,43)"/><text x="35.4889%" y="383.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (5 samples, 0.20%)</title><rect x="35.2389%" y="357" width="0.2042%" height="15" fill="rgb(247,160,36)"/><text x="35.4889%" y="367.50"></text></g><g><title>__memcmp_sse4_1 (3 samples, 0.12%)</title><rect x="35.6880%" y="325" width="0.1225%" height="15" fill="rgb(234,13,49)"/><text x="35.9380%" y="335.50"></text></g><g><title>irust::irust::highlight::theme::theme_color_to_term_color (20 samples, 0.82%)</title><rect x="35.0755%" y="405" width="0.8167%" height="15" fill="rgb(234,122,0)"/><text x="35.3255%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (11 samples, 0.45%)</title><rect x="35.4430%" y="389" width="0.4492%" height="15" fill="rgb(207,146,38)"/><text x="35.6930%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.45%)</title><rect x="35.4430%" y="373" width="0.4492%" height="15" fill="rgb(207,177,25)"/><text x="35.6930%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (11 samples, 0.45%)</title><rect x="35.4430%" y="357" width="0.4492%" height="15" fill="rgb(211,178,42)"/><text x="35.6930%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (11 samples, 0.45%)</title><rect x="35.4430%" y="341" width="0.4492%" height="15" fill="rgb(230,69,54)"/><text x="35.6930%" y="351.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.20%)</title><rect x="36.1372%" y="213" width="0.2042%" height="15" fill="rgb(214,135,41)"/><text x="36.3872%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.37%)</title><rect x="36.0555%" y="309" width="0.3675%" height="15" fill="rgb(237,67,25)"/><text x="36.3055%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (9 samples, 0.37%)</title><rect x="36.0555%" y="293" width="0.3675%" height="15" fill="rgb(222,189,50)"/><text x="36.3055%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.37%)</title><rect x="36.0555%" y="277" width="0.3675%" height="15" fill="rgb(245,148,34)"/><text x="36.3055%" y="287.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.37%)</title><rect x="36.0555%" y="261" width="0.3675%" height="15" fill="rgb(222,29,6)"/><text x="36.3055%" y="271.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.37%)</title><rect x="36.0555%" y="245" width="0.3675%" height="15" fill="rgb(221,189,43)"/><text x="36.3055%" y="255.50"></text></g><g><title>_int_realloc (8 samples, 0.33%)</title><rect x="36.0964%" y="229" width="0.3267%" height="15" fill="rgb(207,36,27)"/><text x="36.3464%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (10 samples, 0.41%)</title><rect x="36.0555%" y="373" width="0.4083%" height="15" fill="rgb(217,90,24)"/><text x="36.3055%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.41%)</title><rect x="36.0555%" y="357" width="0.4083%" height="15" fill="rgb(224,66,35)"/><text x="36.3055%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (10 samples, 0.41%)</title><rect x="36.0555%" y="341" width="0.4083%" height="15" fill="rgb(221,13,50)"/><text x="36.3055%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.41%)</title><rect x="36.0555%" y="325" width="0.4083%" height="15" fill="rgb(236,68,49)"/><text x="36.3055%" y="335.50"></text></g><g><title>irust::irust::highlight::highlight (233 samples, 9.51%)</title><rect x="27.0723%" y="421" width="9.5141%" height="15" fill="rgb(229,146,28)"/><text x="27.3223%" y="431.50">irust::irust::..</text></g><g><title>irust::irust::printer::Printer::push (17 samples, 0.69%)</title><rect x="35.8922%" y="405" width="0.6942%" height="15" fill="rgb(225,31,38)"/><text x="36.1422%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (15 samples, 0.61%)</title><rect x="35.9739%" y="389" width="0.6125%" height="15" fill="rgb(250,208,3)"/><text x="36.2239%" y="399.50"></text></g><g><title>core::ptr::write (3 samples, 0.12%)</title><rect x="36.4639%" y="373" width="0.1225%" height="15" fill="rgb(246,54,23)"/><text x="36.7139%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.12%)</title><rect x="37.7705%" y="405" width="0.1225%" height="15" fill="rgb(243,76,11)"/><text x="38.0205%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.12%)</title><rect x="37.7705%" y="389" width="0.1225%" height="15" fill="rgb(245,21,50)"/><text x="38.0205%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.24%)</title><rect x="37.9339%" y="405" width="0.2450%" height="15" fill="rgb(228,9,43)"/><text x="38.1839%" y="415.50"></text></g><g><title>core::str::validations::next_code_point (6 samples, 0.24%)</title><rect x="37.9339%" y="389" width="0.2450%" height="15" fill="rgb(208,100,47)"/><text x="38.1839%" y="399.50"></text></g><g><title>core::intrinsics::copy (195 samples, 7.96%)</title><rect x="38.2605%" y="373" width="7.9624%" height="15" fill="rgb(232,26,8)"/><text x="38.5105%" y="383.50">core::intri..</text></g><g><title>__memcpy_sse2_unaligned_erms (194 samples, 7.92%)</title><rect x="38.3013%" y="357" width="7.9216%" height="15" fill="rgb(216,166,38)"/><text x="38.5513%" y="367.50">__memcpy_ss..</text></g><g><title>&lt;irust::irust::printer::Printer as core::iter::traits::iterator::Iterator&gt;::next (202 samples, 8.25%)</title><rect x="38.1788%" y="405" width="8.2483%" height="15" fill="rgb(251,202,51)"/><text x="38.4288%" y="415.50">&lt;irust::iru..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::remove (202 samples, 8.25%)</title><rect x="38.1788%" y="389" width="8.2483%" height="15" fill="rgb(254,216,34)"/><text x="38.4288%" y="399.50">alloc::vec:..</text></g><g><title>core::ptr::read (5 samples, 0.20%)</title><rect x="46.2229%" y="373" width="0.2042%" height="15" fill="rgb(251,32,27)"/><text x="46.4729%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 1.02%)</title><rect x="46.4271%" y="357" width="1.0208%" height="15" fill="rgb(208,127,28)"/><text x="46.6771%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (25 samples, 1.02%)</title><rect x="46.4271%" y="341" width="1.0208%" height="15" fill="rgb(224,137,22)"/><text x="46.6771%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 1.02%)</title><rect x="46.4271%" y="325" width="1.0208%" height="15" fill="rgb(254,70,32)"/><text x="46.6771%" y="335.50"></text></g><g><title>_int_free (25 samples, 1.02%)</title><rect x="46.4271%" y="309" width="1.0208%" height="15" fill="rgb(229,75,37)"/><text x="46.6771%" y="319.50"></text></g><g><title>malloc_consolidate (24 samples, 0.98%)</title><rect x="46.4679%" y="293" width="0.9800%" height="15" fill="rgb(252,64,23)"/><text x="46.7179%" y="303.50"></text></g><g><title>unlink_chunk.constprop.0 (4 samples, 0.16%)</title><rect x="47.2846%" y="277" width="0.1633%" height="15" fill="rgb(232,162,48)"/><text x="47.5346%" y="287.50"></text></g><g><title>__GI___libc_free (8 samples, 0.33%)</title><rect x="47.5296%" y="293" width="0.3267%" height="15" fill="rgb(246,160,12)"/><text x="47.7796%" y="303.50"></text></g><g><title>core::ptr::drop_in_place (57 samples, 2.33%)</title><rect x="46.4271%" y="405" width="2.3275%" height="15" fill="rgb(247,166,0)"/><text x="46.6771%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place (57 samples, 2.33%)</title><rect x="46.4271%" y="389" width="2.3275%" height="15" fill="rgb(249,219,21)"/><text x="46.6771%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place (57 samples, 2.33%)</title><rect x="46.4271%" y="373" width="2.3275%" height="15" fill="rgb(205,209,3)"/><text x="46.6771%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place (32 samples, 1.31%)</title><rect x="47.4479%" y="357" width="1.3067%" height="15" fill="rgb(243,44,1)"/><text x="47.6979%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 1.31%)</title><rect x="47.4479%" y="341" width="1.3067%" height="15" fill="rgb(206,159,16)"/><text x="47.6979%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (31 samples, 1.27%)</title><rect x="47.4888%" y="325" width="1.2658%" height="15" fill="rgb(244,77,30)"/><text x="47.7388%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 1.27%)</title><rect x="47.4888%" y="309" width="1.2658%" height="15" fill="rgb(218,69,12)"/><text x="47.7388%" y="319.50"></text></g><g><title>_int_free (21 samples, 0.86%)</title><rect x="47.8971%" y="293" width="0.8575%" height="15" fill="rgb(212,87,7)"/><text x="48.1471%" y="303.50"></text></g><g><title>__memrchr_sse2 (5 samples, 0.20%)</title><rect x="49.1221%" y="69" width="0.2042%" height="15" fill="rgb(245,114,25)"/><text x="49.3721%" y="79.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (10 samples, 0.41%)</title><rect x="48.9588%" y="181" width="0.4083%" height="15" fill="rgb(210,61,42)"/><text x="49.2088%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.29%)</title><rect x="49.0813%" y="165" width="0.2858%" height="15" fill="rgb(211,52,33)"/><text x="49.3313%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.29%)</title><rect x="49.0813%" y="149" width="0.2858%" height="15" fill="rgb(234,58,33)"/><text x="49.3313%" y="159.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.29%)</title><rect x="49.0813%" y="133" width="0.2858%" height="15" fill="rgb(220,115,36)"/><text x="49.3313%" y="143.50"></text></g><g><title>std::memchr::memrchr (6 samples, 0.24%)</title><rect x="49.1221%" y="117" width="0.2450%" height="15" fill="rgb(243,153,54)"/><text x="49.3721%" y="127.50"></text></g><g><title>std::sys::unix::memchr::memrchr (6 samples, 0.24%)</title><rect x="49.1221%" y="101" width="0.2450%" height="15" fill="rgb(251,47,18)"/><text x="49.3721%" y="111.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (6 samples, 0.24%)</title><rect x="49.1221%" y="85" width="0.2450%" height="15" fill="rgb(242,102,42)"/><text x="49.3721%" y="95.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.16%)</title><rect x="49.4079%" y="149" width="0.1633%" height="15" fill="rgb(234,31,38)"/><text x="49.6579%" y="159.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.16%)</title><rect x="49.4079%" y="133" width="0.1633%" height="15" fill="rgb(221,117,51)"/><text x="49.6579%" y="143.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.12%)</title><rect x="49.4488%" y="117" width="0.1225%" height="15" fill="rgb(212,20,18)"/><text x="49.6988%" y="127.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.12%)</title><rect x="49.4488%" y="101" width="0.1225%" height="15" fill="rgb(245,133,36)"/><text x="49.6988%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (6 samples, 0.24%)</title><rect x="49.3671%" y="181" width="0.2450%" height="15" fill="rgb(212,6,19)"/><text x="49.6171%" y="191.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (6 samples, 0.24%)</title><rect x="49.3671%" y="165" width="0.2450%" height="15" fill="rgb(218,1,36)"/><text x="49.6171%" y="175.50"></text></g><g><title>std::io::Write::write_fmt (19 samples, 0.78%)</title><rect x="48.8771%" y="277" width="0.7758%" height="15" fill="rgb(246,84,54)"/><text x="49.1271%" y="287.50"></text></g><g><title>core::fmt::write (19 samples, 0.78%)</title><rect x="48.8771%" y="261" width="0.7758%" height="15" fill="rgb(242,110,6)"/><text x="49.1271%" y="271.50"></text></g><g><title>crossterm::cursor::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::cursor::MoveTo&gt;&gt;::fmt (19 samples, 0.78%)</title><rect x="48.8771%" y="245" width="0.7758%" height="15" fill="rgb(214,47,5)"/><text x="49.1271%" y="255.50"></text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (19 samples, 0.78%)</title><rect x="48.8771%" y="229" width="0.7758%" height="15" fill="rgb(218,159,25)"/><text x="49.1271%" y="239.50"></text></g><g><title>core::fmt::Formatter::write_fmt (19 samples, 0.78%)</title><rect x="48.8771%" y="213" width="0.7758%" height="15" fill="rgb(215,211,28)"/><text x="49.1271%" y="223.50"></text></g><g><title>core::fmt::write (17 samples, 0.69%)</title><rect x="48.9588%" y="197" width="0.6942%" height="15" fill="rgb(238,59,32)"/><text x="49.2088%" y="207.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (22 samples, 0.90%)</title><rect x="48.7954%" y="309" width="0.8983%" height="15" fill="rgb(226,82,3)"/><text x="49.0454%" y="319.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (22 samples, 0.90%)</title><rect x="48.7954%" y="293" width="0.8983%" height="15" fill="rgb(240,164,32)"/><text x="49.0454%" y="303.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_next_row_terminal_start (23 samples, 0.94%)</title><rect x="48.7954%" y="405" width="0.9392%" height="15" fill="rgb(232,46,7)"/><text x="49.0454%" y="415.50"></text></g><g><title>irust::irust::cursor::Cursor::goto (23 samples, 0.94%)</title><rect x="48.7954%" y="389" width="0.9392%" height="15" fill="rgb(229,129,53)"/><text x="49.0454%" y="399.50"></text></g><g><title>irust::irust::cursor::Cursor::goto_internal_pos (23 samples, 0.94%)</title><rect x="48.7954%" y="373" width="0.9392%" height="15" fill="rgb(234,188,29)"/><text x="49.0454%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto (23 samples, 0.94%)</title><rect x="48.7954%" y="357" width="0.9392%" height="15" fill="rgb(246,141,4)"/><text x="49.0454%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (23 samples, 0.94%)</title><rect x="48.7954%" y="341" width="0.9392%" height="15" fill="rgb(229,23,39)"/><text x="49.0454%" y="351.50"></text></g><g><title>irust::irust::raw_terminal::RawCursor::goto::{{closure}} (23 samples, 0.94%)</title><rect x="48.7954%" y="325" width="0.9392%" height="15" fill="rgb(206,12,3)"/><text x="49.0454%" y="335.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.16%)</title><rect x="50.1429%" y="213" width="0.1633%" height="15" fill="rgb(252,226,20)"/><text x="50.3929%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.12%)</title><rect x="50.1837%" y="197" width="0.1225%" height="15" fill="rgb(216,123,35)"/><text x="50.4337%" y="207.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (15 samples, 0.61%)</title><rect x="49.7754%" y="389" width="0.6125%" height="15" fill="rgb(212,68,40)"/><text x="50.0254%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (15 samples, 0.61%)</title><rect x="49.7754%" y="373" width="0.6125%" height="15" fill="rgb(254,125,32)"/><text x="50.0254%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg::{{closure}} (15 samples, 0.61%)</title><rect x="49.7754%" y="357" width="0.6125%" height="15" fill="rgb(253,97,22)"/><text x="50.0254%" y="367.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (15 samples, 0.61%)</title><rect x="49.7754%" y="341" width="0.6125%" height="15" fill="rgb(241,101,14)"/><text x="50.0254%" y="351.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (15 samples, 0.61%)</title><rect x="49.7754%" y="325" width="0.6125%" height="15" fill="rgb(238,103,29)"/><text x="50.0254%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (13 samples, 0.53%)</title><rect x="49.8571%" y="309" width="0.5308%" height="15" fill="rgb(233,195,47)"/><text x="50.1071%" y="319.50"></text></g><g><title>core::fmt::write (13 samples, 0.53%)</title><rect x="49.8571%" y="293" width="0.5308%" height="15" fill="rgb(246,218,30)"/><text x="50.1071%" y="303.50"></text></g><g><title>crossterm::style::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::style::SetForegroundColor&gt;&gt;::fmt (11 samples, 0.45%)</title><rect x="49.9388%" y="277" width="0.4492%" height="15" fill="rgb(219,145,47)"/><text x="50.1888%" y="287.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (11 samples, 0.45%)</title><rect x="49.9388%" y="261" width="0.4492%" height="15" fill="rgb(243,12,26)"/><text x="50.1888%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (11 samples, 0.45%)</title><rect x="49.9388%" y="245" width="0.4492%" height="15" fill="rgb(214,87,16)"/><text x="50.1888%" y="255.50"></text></g><g><title>core::fmt::write (8 samples, 0.33%)</title><rect x="50.0612%" y="229" width="0.3267%" height="15" fill="rgb(208,99,42)"/><text x="50.3112%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.12%)</title><rect x="50.5512%" y="341" width="0.1225%" height="15" fill="rgb(253,99,2)"/><text x="50.8012%" y="351.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.16%)</title><rect x="51.1229%" y="245" width="0.1633%" height="15" fill="rgb(220,168,23)"/><text x="51.3729%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.16%)</title><rect x="51.1229%" y="229" width="0.1633%" height="15" fill="rgb(242,38,24)"/><text x="51.3729%" y="239.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.16%)</title><rect x="51.1229%" y="213" width="0.1633%" height="15" fill="rgb(225,182,9)"/><text x="51.3729%" y="223.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.16%)</title><rect x="51.1229%" y="197" width="0.1633%" height="15" fill="rgb(243,178,37)"/><text x="51.3729%" y="207.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.16%)</title><rect x="51.1229%" y="181" width="0.1633%" height="15" fill="rgb(232,139,19)"/><text x="51.3729%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (14 samples, 0.57%)</title><rect x="50.9187%" y="277" width="0.5717%" height="15" fill="rgb(225,201,24)"/><text x="51.1687%" y="287.50"></text></g><g><title>core::fmt::write (10 samples, 0.41%)</title><rect x="51.0821%" y="261" width="0.4083%" height="15" fill="rgb(221,47,46)"/><text x="51.3321%" y="271.50"></text></g><g><title>core::fmt::Write::write_char (5 samples, 0.20%)</title><rect x="51.2862%" y="245" width="0.2042%" height="15" fill="rgb(249,23,13)"/><text x="51.5362%" y="255.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.20%)</title><rect x="51.2862%" y="229" width="0.2042%" height="15" fill="rgb(219,9,5)"/><text x="51.5362%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.20%)</title><rect x="51.2862%" y="213" width="0.2042%" height="15" fill="rgb(254,171,16)"/><text x="51.5362%" y="223.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.16%)</title><rect x="51.3271%" y="197" width="0.1633%" height="15" fill="rgb(230,171,20)"/><text x="51.5771%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.16%)</title><rect x="51.3271%" y="181" width="0.1633%" height="15" fill="rgb(210,71,41)"/><text x="51.5771%" y="191.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (45 samples, 1.84%)</title><rect x="49.7754%" y="405" width="1.8375%" height="15" fill="rgb(206,173,20)"/><text x="50.0254%" y="415.50">i..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char (30 samples, 1.22%)</title><rect x="50.3879%" y="389" width="1.2250%" height="15" fill="rgb(233,88,34)"/><text x="50.6379%" y="399.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (27 samples, 1.10%)</title><rect x="50.5104%" y="373" width="1.1025%" height="15" fill="rgb(223,209,46)"/><text x="50.7604%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (27 samples, 1.10%)</title><rect x="50.5104%" y="357" width="1.1025%" height="15" fill="rgb(250,43,18)"/><text x="50.7604%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (23 samples, 0.94%)</title><rect x="50.6737%" y="341" width="0.9392%" height="15" fill="rgb(208,13,10)"/><text x="50.9237%" y="351.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (23 samples, 0.94%)</title><rect x="50.6737%" y="325" width="0.9392%" height="15" fill="rgb(212,200,36)"/><text x="50.9237%" y="335.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (23 samples, 0.94%)</title><rect x="50.6737%" y="309" width="0.9392%" height="15" fill="rgb(225,90,30)"/><text x="50.9237%" y="319.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (20 samples, 0.82%)</title><rect x="50.7962%" y="293" width="0.8167%" height="15" fill="rgb(236,182,39)"/><text x="51.0462%" y="303.50"></text></g><g><title>std::io::stdio::Stdout::lock (3 samples, 0.12%)</title><rect x="51.4904%" y="277" width="0.1225%" height="15" fill="rgb(212,144,35)"/><text x="51.7404%" y="287.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (3 samples, 0.12%)</title><rect x="51.4904%" y="261" width="0.1225%" height="15" fill="rgb(228,63,44)"/><text x="51.7404%" y="271.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (3 samples, 0.12%)</title><rect x="51.4904%" y="245" width="0.1225%" height="15" fill="rgb(228,109,6)"/><text x="51.7404%" y="255.50"></text></g><g><title>pthread_mutex_lock (3 samples, 0.12%)</title><rect x="51.4904%" y="229" width="0.1225%" height="15" fill="rgb(238,117,24)"/><text x="51.7404%" y="239.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (11 samples, 0.45%)</title><rect x="52.0212%" y="389" width="0.4492%" height="15" fill="rgb(242,26,26)"/><text x="52.2712%" y="399.50"></text></g><g><title>&lt;crossterm::style::types::color::Color as core::cmp::PartialEq&gt;::ne (5 samples, 0.20%)</title><rect x="52.2662%" y="373" width="0.2042%" height="15" fill="rgb(221,92,48)"/><text x="52.5162%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.29%)</title><rect x="53.0012%" y="309" width="0.2858%" height="15" fill="rgb(209,209,32)"/><text x="53.2512%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.29%)</title><rect x="53.0012%" y="293" width="0.2858%" height="15" fill="rgb(221,70,22)"/><text x="53.2512%" y="303.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.29%)</title><rect x="53.0012%" y="277" width="0.2858%" height="15" fill="rgb(248,145,5)"/><text x="53.2512%" y="287.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (7 samples, 0.29%)</title><rect x="53.0012%" y="261" width="0.2858%" height="15" fill="rgb(226,116,26)"/><text x="53.2512%" y="271.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (7 samples, 0.29%)</title><rect x="53.0012%" y="245" width="0.2858%" height="15" fill="rgb(244,5,17)"/><text x="53.2512%" y="255.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.29%)</title><rect x="53.6546%" y="213" width="0.2858%" height="15" fill="rgb(252,159,33)"/><text x="53.9046%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.20%)</title><rect x="53.7362%" y="197" width="0.2042%" height="15" fill="rgb(206,71,0)"/><text x="53.9862%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.20%)</title><rect x="53.7362%" y="181" width="0.2042%" height="15" fill="rgb(233,118,54)"/><text x="53.9862%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.20%)</title><rect x="53.7362%" y="165" width="0.2042%" height="15" fill="rgb(234,83,48)"/><text x="53.9862%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.12%)</title><rect x="53.8179%" y="149" width="0.1225%" height="15" fill="rgb(228,3,54)"/><text x="54.0679%" y="159.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (3 samples, 0.12%)</title><rect x="53.8179%" y="133" width="0.1225%" height="15" fill="rgb(226,155,13)"/><text x="54.0679%" y="143.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (11 samples, 0.45%)</title><rect x="53.6546%" y="245" width="0.4492%" height="15" fill="rgb(241,28,37)"/><text x="53.9046%" y="255.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (11 samples, 0.45%)</title><rect x="53.6546%" y="229" width="0.4492%" height="15" fill="rgb(233,93,10)"/><text x="53.9046%" y="239.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (4 samples, 0.16%)</title><rect x="53.9404%" y="213" width="0.1633%" height="15" fill="rgb(225,113,19)"/><text x="54.1904%" y="223.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (14 samples, 0.57%)</title><rect x="53.6137%" y="277" width="0.5717%" height="15" fill="rgb(241,2,18)"/><text x="53.8637%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (13 samples, 0.53%)</title><rect x="53.6546%" y="261" width="0.5308%" height="15" fill="rgb(228,207,21)"/><text x="53.9046%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (4 samples, 0.16%)</title><rect x="55.1245%" y="85" width="0.1633%" height="15" fill="rgb(213,211,35)"/><text x="55.3745%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.16%)</title><rect x="55.1245%" y="69" width="0.1633%" height="15" fill="rgb(209,83,10)"/><text x="55.3745%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (4 samples, 0.16%)</title><rect x="55.1245%" y="53" width="0.1633%" height="15" fill="rgb(209,164,1)"/><text x="55.3745%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (4 samples, 0.16%)</title><rect x="55.1245%" y="37" width="0.1633%" height="15" fill="rgb(213,184,43)"/><text x="55.3745%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.24%)</title><rect x="55.1245%" y="133" width="0.2450%" height="15" fill="rgb(231,61,34)"/><text x="55.3745%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.24%)</title><rect x="55.1245%" y="117" width="0.2450%" height="15" fill="rgb(235,75,3)"/><text x="55.3745%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (6 samples, 0.24%)</title><rect x="55.1245%" y="101" width="0.2450%" height="15" fill="rgb(220,106,47)"/><text x="55.3745%" y="111.50"></text></g><g><title>__GI___libc_write (31 samples, 1.27%)</title><rect x="55.3695%" y="69" width="1.2658%" height="15" fill="rgb(210,196,33)"/><text x="55.6195%" y="79.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (39 samples, 1.59%)</title><rect x="55.0837%" y="149" width="1.5925%" height="15" fill="rgb(229,154,42)"/><text x="55.3337%" y="159.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (32 samples, 1.31%)</title><rect x="55.3695%" y="133" width="1.3067%" height="15" fill="rgb(228,114,26)"/><text x="55.6195%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (32 samples, 1.31%)</title><rect x="55.3695%" y="117" width="1.3067%" height="15" fill="rgb(208,144,1)"/><text x="55.6195%" y="127.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (32 samples, 1.31%)</title><rect x="55.3695%" y="101" width="1.3067%" height="15" fill="rgb(239,112,37)"/><text x="55.6195%" y="111.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (32 samples, 1.31%)</title><rect x="55.3695%" y="85" width="1.3067%" height="15" fill="rgb(210,96,50)"/><text x="55.6195%" y="95.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (4 samples, 0.16%)</title><rect x="56.6762%" y="149" width="0.1633%" height="15" fill="rgb(222,178,2)"/><text x="56.9262%" y="159.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (4 samples, 0.16%)</title><rect x="56.6762%" y="133" width="0.1633%" height="15" fill="rgb(226,74,18)"/><text x="56.9262%" y="143.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (4 samples, 0.16%)</title><rect x="56.6762%" y="117" width="0.1633%" height="15" fill="rgb(225,67,54)"/><text x="56.9262%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.16%)</title><rect x="56.6762%" y="101" width="0.1633%" height="15" fill="rgb(251,92,32)"/><text x="56.9262%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (4 samples, 0.16%)</title><rect x="56.6762%" y="85" width="0.1633%" height="15" fill="rgb(228,149,22)"/><text x="56.9262%" y="95.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (56 samples, 2.29%)</title><rect x="55.0020%" y="181" width="2.2866%" height="15" fill="rgb(243,54,13)"/><text x="55.2520%" y="191.50">&lt;..</text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (56 samples, 2.29%)</title><rect x="55.0020%" y="165" width="2.2866%" height="15" fill="rgb(243,180,28)"/><text x="55.2520%" y="175.50">&lt;..</text></g><g><title>std::memchr::memrchr (11 samples, 0.45%)</title><rect x="56.8395%" y="149" width="0.4492%" height="15" fill="rgb(208,167,24)"/><text x="57.0895%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr (11 samples, 0.45%)</title><rect x="56.8395%" y="133" width="0.4492%" height="15" fill="rgb(245,73,45)"/><text x="57.0895%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (11 samples, 0.45%)</title><rect x="56.8395%" y="117" width="0.4492%" height="15" fill="rgb(237,203,48)"/><text x="57.0895%" y="127.50"></text></g><g><title>__memrchr_sse2 (10 samples, 0.41%)</title><rect x="56.8804%" y="101" width="0.4083%" height="15" fill="rgb(211,197,16)"/><text x="57.1304%" y="111.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (63 samples, 2.57%)</title><rect x="54.8387%" y="213" width="2.5725%" height="15" fill="rgb(243,99,51)"/><text x="55.0887%" y="223.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (60 samples, 2.45%)</title><rect x="54.9612%" y="197" width="2.4500%" height="15" fill="rgb(215,123,29)"/><text x="55.2112%" y="207.50">&lt;s..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.12%)</title><rect x="57.6970%" y="117" width="0.1225%" height="15" fill="rgb(239,186,37)"/><text x="57.9470%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.12%)</title><rect x="57.6970%" y="101" width="0.1225%" height="15" fill="rgb(252,136,39)"/><text x="57.9470%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.12%)</title><rect x="57.6970%" y="85" width="0.1225%" height="15" fill="rgb(223,213,32)"/><text x="57.9470%" y="95.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.20%)</title><rect x="57.6970%" y="133" width="0.2042%" height="15" fill="rgb(233,115,5)"/><text x="57.9470%" y="143.50"></text></g><g><title>std::io::Write::write_fmt (121 samples, 4.94%)</title><rect x="53.2871%" y="309" width="4.9408%" height="15" fill="rgb(207,226,44)"/><text x="53.5371%" y="319.50">std::i..</text></g><g><title>core::fmt::write (117 samples, 4.78%)</title><rect x="53.4504%" y="293" width="4.7775%" height="15" fill="rgb(208,126,0)"/><text x="53.7004%" y="303.50">core::..</text></g><g><title>crossterm::style::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::style::SetForegroundColor&gt;&gt;::fmt (98 samples, 4.00%)</title><rect x="54.2262%" y="277" width="4.0016%" height="15" fill="rgb(244,66,21)"/><text x="54.4762%" y="287.50">cros..</text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (98 samples, 4.00%)</title><rect x="54.2262%" y="261" width="4.0016%" height="15" fill="rgb(222,97,12)"/><text x="54.4762%" y="271.50">cros..</text></g><g><title>core::fmt::Formatter::write_fmt (96 samples, 3.92%)</title><rect x="54.3079%" y="245" width="3.9200%" height="15" fill="rgb(219,213,19)"/><text x="54.5579%" y="255.50">core..</text></g><g><title>core::fmt::write (92 samples, 3.76%)</title><rect x="54.4712%" y="229" width="3.7566%" height="15" fill="rgb(252,169,30)"/><text x="54.7212%" y="239.50">core..</text></g><g><title>crossterm::style::ansi::&lt;impl core::fmt::Display for crossterm::style::types::colored::Colored&gt;::fmt (17 samples, 0.69%)</title><rect x="57.5337%" y="213" width="0.6942%" height="15" fill="rgb(206,32,51)"/><text x="57.7837%" y="223.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (13 samples, 0.53%)</title><rect x="57.6970%" y="197" width="0.5308%" height="15" fill="rgb(250,172,42)"/><text x="57.9470%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (13 samples, 0.53%)</title><rect x="57.6970%" y="181" width="0.5308%" height="15" fill="rgb(209,34,43)"/><text x="57.9470%" y="191.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (13 samples, 0.53%)</title><rect x="57.6970%" y="165" width="0.5308%" height="15" fill="rgb(223,11,35)"/><text x="57.9470%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (13 samples, 0.53%)</title><rect x="57.6970%" y="149" width="0.5308%" height="15" fill="rgb(251,219,26)"/><text x="57.9470%" y="159.50"></text></g><g><title>std::memchr::memrchr (8 samples, 0.33%)</title><rect x="57.9012%" y="133" width="0.3267%" height="15" fill="rgb(231,119,3)"/><text x="58.1512%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr (8 samples, 0.33%)</title><rect x="57.9012%" y="117" width="0.3267%" height="15" fill="rgb(216,97,11)"/><text x="58.1512%" y="127.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (8 samples, 0.33%)</title><rect x="57.9012%" y="101" width="0.3267%" height="15" fill="rgb(223,59,9)"/><text x="58.1512%" y="111.50"></text></g><g><title>__memrchr_sse2 (7 samples, 0.29%)</title><rect x="57.9420%" y="85" width="0.2858%" height="15" fill="rgb(233,93,31)"/><text x="58.1920%" y="95.50"></text></g><g><title>__GI___pthread_mutex_lock (8 samples, 0.33%)</title><rect x="58.2278%" y="261" width="0.3267%" height="15" fill="rgb(239,81,33)"/><text x="58.4778%" y="271.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (149 samples, 6.08%)</title><rect x="52.5112%" y="389" width="6.0841%" height="15" fill="rgb(213,120,34)"/><text x="52.7612%" y="399.50">irust::i..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (146 samples, 5.96%)</title><rect x="52.6337%" y="373" width="5.9616%" height="15" fill="rgb(243,49,53)"/><text x="52.8837%" y="383.50">core::re..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg::{{closure}} (144 samples, 5.88%)</title><rect x="52.7154%" y="357" width="5.8800%" height="15" fill="rgb(247,216,33)"/><text x="52.9654%" y="367.50">irust::..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (142 samples, 5.80%)</title><rect x="52.7971%" y="341" width="5.7983%" height="15" fill="rgb(226,26,14)"/><text x="53.0471%" y="351.50">&lt;std::i..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (138 samples, 5.63%)</title><rect x="52.9604%" y="325" width="5.6350%" height="15" fill="rgb(215,49,53)"/><text x="53.2104%" y="335.50">&lt;&amp;std::..</text></g><g><title>std::io::stdio::Stdout::lock (9 samples, 0.37%)</title><rect x="58.2278%" y="309" width="0.3675%" height="15" fill="rgb(245,162,40)"/><text x="58.4778%" y="319.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (9 samples, 0.37%)</title><rect x="58.2278%" y="293" width="0.3675%" height="15" fill="rgb(229,68,17)"/><text x="58.4778%" y="303.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (9 samples, 0.37%)</title><rect x="58.2278%" y="277" width="0.3675%" height="15" fill="rgb(213,182,10)"/><text x="58.4778%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (8 samples, 0.33%)</title><rect x="59.0037%" y="373" width="0.3267%" height="15" fill="rgb(245,125,30)"/><text x="59.2537%" y="383.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.12%)</title><rect x="60.1470%" y="277" width="0.1225%" height="15" fill="rgb(232,202,2)"/><text x="60.3970%" y="287.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (22 samples, 0.90%)</title><rect x="60.2695%" y="213" width="0.8983%" height="15" fill="rgb(237,140,51)"/><text x="60.5195%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (25 samples, 1.02%)</title><rect x="60.2695%" y="277" width="1.0208%" height="15" fill="rgb(236,157,25)"/><text x="60.5195%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (25 samples, 1.02%)</title><rect x="60.2695%" y="261" width="1.0208%" height="15" fill="rgb(219,209,0)"/><text x="60.5195%" y="271.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 1.02%)</title><rect x="60.2695%" y="245" width="1.0208%" height="15" fill="rgb(240,116,54)"/><text x="60.5195%" y="255.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (25 samples, 1.02%)</title><rect x="60.2695%" y="229" width="1.0208%" height="15" fill="rgb(216,10,36)"/><text x="60.5195%" y="239.50"></text></g><g><title>pthread_mutex_unlock (3 samples, 0.12%)</title><rect x="61.1678%" y="213" width="0.1225%" height="15" fill="rgb(222,72,44)"/><text x="61.4178%" y="223.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.12%)</title><rect x="61.6578%" y="261" width="0.1225%" height="15" fill="rgb(232,159,9)"/><text x="61.9078%" y="271.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (4 samples, 0.16%)</title><rect x="62.5561%" y="229" width="0.1633%" height="15" fill="rgb(210,39,32)"/><text x="62.8061%" y="239.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (7 samples, 0.29%)</title><rect x="62.4745%" y="245" width="0.2858%" height="15" fill="rgb(216,194,45)"/><text x="62.7245%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.12%)</title><rect x="62.7603%" y="245" width="0.1225%" height="15" fill="rgb(218,18,35)"/><text x="63.0103%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (3 samples, 0.12%)</title><rect x="62.7603%" y="229" width="0.1225%" height="15" fill="rgb(207,83,51)"/><text x="63.0103%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::capacity (4 samples, 0.16%)</title><rect x="63.2095%" y="165" width="0.1633%" height="15" fill="rgb(225,63,43)"/><text x="63.4595%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.16%)</title><rect x="63.4545%" y="117" width="0.1633%" height="15" fill="rgb(207,57,36)"/><text x="63.7045%" y="127.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.16%)</title><rect x="63.4545%" y="101" width="0.1633%" height="15" fill="rgb(216,99,33)"/><text x="63.7045%" y="111.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.82%)</title><rect x="63.0461%" y="181" width="0.8167%" height="15" fill="rgb(225,42,16)"/><text x="63.2961%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (12 samples, 0.49%)</title><rect x="63.3728%" y="165" width="0.4900%" height="15" fill="rgb(220,201,45)"/><text x="63.6228%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (12 samples, 0.49%)</title><rect x="63.3728%" y="149" width="0.4900%" height="15" fill="rgb(225,33,4)"/><text x="63.6228%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (12 samples, 0.49%)</title><rect x="63.3728%" y="133" width="0.4900%" height="15" fill="rgb(224,33,50)"/><text x="63.6228%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.24%)</title><rect x="63.6178%" y="117" width="0.2450%" height="15" fill="rgb(246,198,51)"/><text x="63.8678%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.24%)</title><rect x="63.6178%" y="101" width="0.2450%" height="15" fill="rgb(205,22,4)"/><text x="63.8678%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (5 samples, 0.20%)</title><rect x="63.8628%" y="165" width="0.2042%" height="15" fill="rgb(206,3,8)"/><text x="64.1128%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (29 samples, 1.18%)</title><rect x="63.0053%" y="213" width="1.1842%" height="15" fill="rgb(251,23,15)"/><text x="63.2553%" y="223.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (29 samples, 1.18%)</title><rect x="63.0053%" y="197" width="1.1842%" height="15" fill="rgb(252,88,28)"/><text x="63.2553%" y="207.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (8 samples, 0.33%)</title><rect x="63.8628%" y="181" width="0.3267%" height="15" fill="rgb(212,127,14)"/><text x="64.1128%" y="191.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (3 samples, 0.12%)</title><rect x="64.0670%" y="165" width="0.1225%" height="15" fill="rgb(247,145,37)"/><text x="64.3170%" y="175.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (3 samples, 0.12%)</title><rect x="64.0670%" y="149" width="0.1225%" height="15" fill="rgb(209,117,53)"/><text x="64.3170%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.12%)</title><rect x="64.0670%" y="133" width="0.1225%" height="15" fill="rgb(212,90,42)"/><text x="64.3170%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (3 samples, 0.12%)</title><rect x="64.0670%" y="117" width="0.1225%" height="15" fill="rgb(218,164,37)"/><text x="64.3170%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (39 samples, 1.59%)</title><rect x="62.8828%" y="245" width="1.5925%" height="15" fill="rgb(246,65,34)"/><text x="63.1328%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (37 samples, 1.51%)</title><rect x="62.9645%" y="229" width="1.5108%" height="15" fill="rgb(231,100,33)"/><text x="63.2145%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (7 samples, 0.29%)</title><rect x="64.1895%" y="213" width="0.2858%" height="15" fill="rgb(228,126,14)"/><text x="64.4395%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (7 samples, 0.29%)</title><rect x="64.1895%" y="197" width="0.2858%" height="15" fill="rgb(215,173,21)"/><text x="64.4395%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (7 samples, 0.29%)</title><rect x="64.1895%" y="181" width="0.2858%" height="15" fill="rgb(210,6,40)"/><text x="64.4395%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.24%)</title><rect x="64.2303%" y="165" width="0.2450%" height="15" fill="rgb(212,48,18)"/><text x="64.4803%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.24%)</title><rect x="64.2303%" y="149" width="0.2450%" height="15" fill="rgb(230,214,11)"/><text x="64.4803%" y="159.50"></text></g><g><title>core::mem::replace (6 samples, 0.24%)</title><rect x="64.2303%" y="133" width="0.2450%" height="15" fill="rgb(254,105,39)"/><text x="64.4803%" y="143.50"></text></g><g><title>core::mem::swap (6 samples, 0.24%)</title><rect x="64.2303%" y="117" width="0.2450%" height="15" fill="rgb(245,158,5)"/><text x="64.4803%" y="127.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (6 samples, 0.24%)</title><rect x="64.2303%" y="101" width="0.2450%" height="15" fill="rgb(249,208,11)"/><text x="64.4803%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.24%)</title><rect x="64.2303%" y="85" width="0.2450%" height="15" fill="rgb(210,39,28)"/><text x="64.4803%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.24%)</title><rect x="65.2103%" y="101" width="0.2450%" height="15" fill="rgb(211,56,53)"/><text x="65.4603%" y="111.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (6 samples, 0.24%)</title><rect x="65.2103%" y="85" width="0.2450%" height="15" fill="rgb(226,201,30)"/><text x="65.4603%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.33%)</title><rect x="65.1695%" y="149" width="0.3267%" height="15" fill="rgb(239,101,34)"/><text x="65.4195%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.33%)</title><rect x="65.1695%" y="133" width="0.3267%" height="15" fill="rgb(226,209,5)"/><text x="65.4195%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.33%)</title><rect x="65.1695%" y="117" width="0.3267%" height="15" fill="rgb(250,105,47)"/><text x="65.4195%" y="127.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (13 samples, 0.53%)</title><rect x="65.0878%" y="165" width="0.5308%" height="15" fill="rgb(230,72,3)"/><text x="65.3378%" y="175.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.12%)</title><rect x="65.4961%" y="149" width="0.1225%" height="15" fill="rgb(232,218,39)"/><text x="65.7461%" y="159.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (3 samples, 0.12%)</title><rect x="65.4961%" y="133" width="0.1225%" height="15" fill="rgb(248,166,6)"/><text x="65.7461%" y="143.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (3 samples, 0.12%)</title><rect x="65.4961%" y="117" width="0.1225%" height="15" fill="rgb(247,89,20)"/><text x="65.7461%" y="127.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 0.12%)</title><rect x="65.4961%" y="101" width="0.1225%" height="15" fill="rgb(248,130,54)"/><text x="65.7461%" y="111.50"></text></g><g><title>__GI___libc_write (3 samples, 0.12%)</title><rect x="65.4961%" y="85" width="0.1225%" height="15" fill="rgb(234,196,4)"/><text x="65.7461%" y="95.50"></text></g><g><title>__memrchr_sse2 (14 samples, 0.57%)</title><rect x="65.7411%" y="117" width="0.5717%" height="15" fill="rgb(250,143,31)"/><text x="65.9911%" y="127.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (35 samples, 1.43%)</title><rect x="64.9653%" y="197" width="1.4292%" height="15" fill="rgb(211,110,34)"/><text x="65.2153%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (35 samples, 1.43%)</title><rect x="64.9653%" y="181" width="1.4292%" height="15" fill="rgb(215,124,48)"/><text x="65.2153%" y="191.50"></text></g><g><title>std::memchr::memrchr (18 samples, 0.73%)</title><rect x="65.6595%" y="165" width="0.7350%" height="15" fill="rgb(216,46,13)"/><text x="65.9095%" y="175.50"></text></g><g><title>std::sys::unix::memchr::memrchr (18 samples, 0.73%)</title><rect x="65.6595%" y="149" width="0.7350%" height="15" fill="rgb(205,184,25)"/><text x="65.9095%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (18 samples, 0.73%)</title><rect x="65.6595%" y="133" width="0.7350%" height="15" fill="rgb(228,1,10)"/><text x="65.9095%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (45 samples, 1.84%)</title><rect x="64.5978%" y="229" width="1.8375%" height="15" fill="rgb(213,116,27)"/><text x="64.8478%" y="239.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (40 samples, 1.63%)</title><rect x="64.8020%" y="213" width="1.6333%" height="15" fill="rgb(241,95,50)"/><text x="65.0520%" y="223.50"></text></g><g><title>core::fmt::Write::write_char (51 samples, 2.08%)</title><rect x="64.4753%" y="245" width="2.0825%" height="15" fill="rgb(238,48,32)"/><text x="64.7253%" y="255.50">c..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (3 samples, 0.12%)</title><rect x="66.4353%" y="229" width="0.1225%" height="15" fill="rgb(235,113,49)"/><text x="66.6853%" y="239.50"></text></g><g><title>core::fmt::write (118 samples, 4.82%)</title><rect x="61.7803%" y="261" width="4.8183%" height="15" fill="rgb(205,127,43)"/><text x="62.0303%" y="271.50">core::..</text></g><g><title>std::io::Write::write_fmt (133 samples, 5.43%)</title><rect x="61.2903%" y="277" width="5.4308%" height="15" fill="rgb(250,162,2)"/><text x="61.5403%" y="287.50">std::io..</text></g><g><title>core::ptr::drop_in_place (3 samples, 0.12%)</title><rect x="66.5986%" y="261" width="0.1225%" height="15" fill="rgb(220,13,41)"/><text x="66.8486%" y="271.50"></text></g><g><title>__GI___pthread_mutex_lock (23 samples, 0.94%)</title><rect x="66.7211%" y="229" width="0.9392%" height="15" fill="rgb(249,221,25)"/><text x="66.9711%" y="239.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (202 samples, 8.25%)</title><rect x="59.6570%" y="309" width="8.2483%" height="15" fill="rgb(215,208,19)"/><text x="59.9070%" y="319.50">&lt;std::io::s..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (196 samples, 8.00%)</title><rect x="59.9020%" y="293" width="8.0033%" height="15" fill="rgb(236,175,2)"/><text x="60.1520%" y="303.50">&lt;&amp;std::io::..</text></g><g><title>std::io::stdio::Stdout::lock (29 samples, 1.18%)</title><rect x="66.7211%" y="277" width="1.1842%" height="15" fill="rgb(241,52,2)"/><text x="66.9711%" y="287.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (29 samples, 1.18%)</title><rect x="66.7211%" y="261" width="1.1842%" height="15" fill="rgb(248,140,14)"/><text x="66.9711%" y="271.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (29 samples, 1.18%)</title><rect x="66.7211%" y="245" width="1.1842%" height="15" fill="rgb(253,22,42)"/><text x="66.9711%" y="255.50"></text></g><g><title>pthread_mutex_lock (6 samples, 0.24%)</title><rect x="67.6603%" y="229" width="0.2450%" height="15" fill="rgb(234,61,47)"/><text x="67.9103%" y="239.50"></text></g><g><title>core::fmt::Arguments::new_v1 (5 samples, 0.20%)</title><rect x="67.9053%" y="309" width="0.2042%" height="15" fill="rgb(208,226,15)"/><text x="68.1553%" y="319.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (215 samples, 8.78%)</title><rect x="59.4528%" y="325" width="8.7791%" height="15" fill="rgb(217,221,4)"/><text x="59.7028%" y="335.50">irust::irust..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (217 samples, 8.86%)</title><rect x="59.4120%" y="357" width="8.8608%" height="15" fill="rgb(212,174,34)"/><text x="59.6620%" y="367.50">irust::irust:..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (216 samples, 8.82%)</title><rect x="59.4528%" y="341" width="8.8199%" height="15" fill="rgb(253,83,4)"/><text x="59.7028%" y="351.50">core::result..</text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner (779 samples, 31.81%)</title><rect x="36.5864%" y="421" width="31.8089%" height="15" fill="rgb(250,195,49)"/><text x="36.8364%" y="431.50">irust::irust::printer::&lt;impl irust::irust::IRust&gt;::..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char_with_color (411 samples, 16.78%)</title><rect x="51.6129%" y="405" width="16.7824%" height="15" fill="rgb(241,192,25)"/><text x="51.8629%" y="415.50">irust::irust::writer::&lt;imp..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char (240 samples, 9.80%)</title><rect x="58.5953%" y="389" width="9.7999%" height="15" fill="rgb(208,124,10)"/><text x="58.8453%" y="399.50">irust::irust::..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (222 samples, 9.06%)</title><rect x="59.3303%" y="373" width="9.0649%" height="15" fill="rgb(222,33,0)"/><text x="59.5803%" y="383.50">irust::irust:..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (3 samples, 0.12%)</title><rect x="68.2728%" y="357" width="0.1225%" height="15" fill="rgb(234,209,28)"/><text x="68.5228%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (3 samples, 0.12%)</title><rect x="68.7219%" y="357" width="0.1225%" height="15" fill="rgb(224,11,23)"/><text x="68.9719%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (3 samples, 0.12%)</title><rect x="68.7219%" y="341" width="0.1225%" height="15" fill="rgb(232,99,1)"/><text x="68.9719%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (3 samples, 0.12%)</title><rect x="68.7219%" y="325" width="0.1225%" height="15" fill="rgb(237,95,45)"/><text x="68.9719%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.12%)</title><rect x="68.7219%" y="309" width="0.1225%" height="15" fill="rgb(208,109,11)"/><text x="68.9719%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.12%)</title><rect x="68.7219%" y="293" width="0.1225%" height="15" fill="rgb(216,190,48)"/><text x="68.9719%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.12%)</title><rect x="68.7219%" y="277" width="0.1225%" height="15" fill="rgb(251,171,36)"/><text x="68.9719%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.12%)</title><rect x="68.7219%" y="261" width="0.1225%" height="15" fill="rgb(230,62,22)"/><text x="68.9719%" y="271.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::scroll_if_needed_for_input (12 samples, 0.49%)</title><rect x="68.3953%" y="421" width="0.4900%" height="15" fill="rgb(225,114,35)"/><text x="68.6453%" y="431.50"></text></g><g><title>irust::irust::cursor::Cursor::input_last_pos (12 samples, 0.49%)</title><rect x="68.3953%" y="405" width="0.4900%" height="15" fill="rgb(215,118,42)"/><text x="68.6453%" y="415.50"></text></g><g><title>irust::irust::buffer::Buffer::last_buffer_pos_to_relative_cursor_pos (12 samples, 0.49%)</title><rect x="68.3953%" y="389" width="0.4900%" height="15" fill="rgb(243,119,21)"/><text x="68.6453%" y="399.50"></text></g><g><title>irust::irust::buffer::Buffer::buffer_pos_to_relative_cursor_pos (12 samples, 0.49%)</title><rect x="68.3953%" y="373" width="0.4900%" height="15" fill="rgb(252,177,53)"/><text x="68.6453%" y="383.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_character (1,067 samples, 43.57%)</title><rect x="25.7248%" y="453" width="43.5688%" height="15" fill="rgb(237,209,29)"/><text x="25.9748%" y="463.50">irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_character</text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input (1,053 samples, 43.00%)</title><rect x="26.2964%" y="437" width="42.9971%" height="15" fill="rgb(212,65,23)"/><text x="26.5464%" y="447.50">irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_from_terminal_start (8 samples, 0.33%)</title><rect x="68.9669%" y="421" width="0.3267%" height="15" fill="rgb(230,222,46)"/><text x="69.2169%" y="431.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write (7 samples, 0.29%)</title><rect x="69.0078%" y="405" width="0.2858%" height="15" fill="rgb(215,135,32)"/><text x="69.2578%" y="415.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char (4 samples, 0.16%)</title><rect x="69.1303%" y="389" width="0.1633%" height="15" fill="rgb(246,101,22)"/><text x="69.3803%" y="399.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (3 samples, 0.12%)</title><rect x="69.1711%" y="373" width="0.1225%" height="15" fill="rgb(206,107,13)"/><text x="69.4211%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (3 samples, 0.12%)</title><rect x="69.1711%" y="357" width="0.1225%" height="15" fill="rgb(250,100,44)"/><text x="69.4211%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.12%)</title><rect x="69.1711%" y="341" width="0.1225%" height="15" fill="rgb(231,147,38)"/><text x="69.4211%" y="351.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (3 samples, 0.12%)</title><rect x="69.1711%" y="325" width="0.1225%" height="15" fill="rgb(229,8,40)"/><text x="69.4211%" y="335.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.12%)</title><rect x="69.1711%" y="309" width="0.1225%" height="15" fill="rgb(221,135,30)"/><text x="69.4211%" y="319.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.12%)</title><rect x="69.1711%" y="293" width="0.1225%" height="15" fill="rgb(249,193,18)"/><text x="69.4211%" y="303.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::incomplete_input (3 samples, 0.12%)</title><rect x="69.2936%" y="437" width="0.1225%" height="15" fill="rgb(209,133,39)"/><text x="69.5436%" y="447.50"></text></g><g><title>irust::utils::StringTools::unmatched_brackets (3 samples, 0.12%)</title><rect x="69.2936%" y="421" width="0.1225%" height="15" fill="rgb(232,100,14)"/><text x="69.5436%" y="431.50"></text></g><g><title>irust::irust::highlight::parse (4 samples, 0.16%)</title><rect x="69.5386%" y="389" width="0.1633%" height="15" fill="rgb(224,185,1)"/><text x="69.7886%" y="399.50"></text></g><g><title>irust::irust::highlight::highlight (8 samples, 0.33%)</title><rect x="69.4569%" y="405" width="0.3267%" height="15" fill="rgb(223,139,8)"/><text x="69.7069%" y="415.50"></text></g><g><title>&lt;irust::irust::printer::Printer as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.41%)</title><rect x="69.8653%" y="389" width="0.4083%" height="15" fill="rgb(232,213,38)"/><text x="70.1153%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::remove (10 samples, 0.41%)</title><rect x="69.8653%" y="373" width="0.4083%" height="15" fill="rgb(207,94,22)"/><text x="70.1153%" y="383.50"></text></g><g><title>core::intrinsics::copy (10 samples, 0.41%)</title><rect x="69.8653%" y="357" width="0.4083%" height="15" fill="rgb(219,183,54)"/><text x="70.1153%" y="367.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (10 samples, 0.41%)</title><rect x="69.8653%" y="341" width="0.4083%" height="15" fill="rgb(216,185,54)"/><text x="70.1153%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.12%)</title><rect x="70.2736%" y="389" width="0.1225%" height="15" fill="rgb(254,217,39)"/><text x="70.5236%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.12%)</title><rect x="70.2736%" y="373" width="0.1225%" height="15" fill="rgb(240,178,23)"/><text x="70.5236%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.12%)</title><rect x="70.2736%" y="357" width="0.1225%" height="15" fill="rgb(218,11,47)"/><text x="70.5236%" y="367.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.16%)</title><rect x="70.5186%" y="133" width="0.1633%" height="15" fill="rgb(218,51,51)"/><text x="70.7686%" y="143.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.12%)</title><rect x="70.5594%" y="117" width="0.1225%" height="15" fill="rgb(238,126,27)"/><text x="70.8094%" y="127.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (3 samples, 0.12%)</title><rect x="70.5594%" y="101" width="0.1225%" height="15" fill="rgb(249,202,22)"/><text x="70.8094%" y="111.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (3 samples, 0.12%)</title><rect x="70.5594%" y="85" width="0.1225%" height="15" fill="rgb(254,195,49)"/><text x="70.8094%" y="95.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 0.12%)</title><rect x="70.5594%" y="69" width="0.1225%" height="15" fill="rgb(208,123,14)"/><text x="70.8094%" y="79.50"></text></g><g><title>__GI___libc_write (3 samples, 0.12%)</title><rect x="70.5594%" y="53" width="0.1225%" height="15" fill="rgb(224,200,8)"/><text x="70.8094%" y="63.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.20%)</title><rect x="70.5186%" y="197" width="0.2042%" height="15" fill="rgb(217,61,36)"/><text x="70.7686%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.20%)</title><rect x="70.5186%" y="181" width="0.2042%" height="15" fill="rgb(206,35,45)"/><text x="70.7686%" y="191.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.20%)</title><rect x="70.5186%" y="165" width="0.2042%" height="15" fill="rgb(217,65,33)"/><text x="70.7686%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.20%)</title><rect x="70.5186%" y="149" width="0.2042%" height="15" fill="rgb(222,158,48)"/><text x="70.7686%" y="159.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg (9 samples, 0.37%)</title><rect x="70.3961%" y="373" width="0.3675%" height="15" fill="rgb(254,2,54)"/><text x="70.6461%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (9 samples, 0.37%)</title><rect x="70.3961%" y="357" width="0.3675%" height="15" fill="rgb(250,143,38)"/><text x="70.6461%" y="367.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::set_fg::{{closure}} (9 samples, 0.37%)</title><rect x="70.3961%" y="341" width="0.3675%" height="15" fill="rgb(248,25,0)"/><text x="70.6461%" y="351.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (9 samples, 0.37%)</title><rect x="70.3961%" y="325" width="0.3675%" height="15" fill="rgb(206,152,27)"/><text x="70.6461%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (9 samples, 0.37%)</title><rect x="70.3961%" y="309" width="0.3675%" height="15" fill="rgb(240,77,30)"/><text x="70.6461%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (9 samples, 0.37%)</title><rect x="70.3961%" y="293" width="0.3675%" height="15" fill="rgb(231,5,3)"/><text x="70.6461%" y="303.50"></text></g><g><title>core::fmt::write (9 samples, 0.37%)</title><rect x="70.3961%" y="277" width="0.3675%" height="15" fill="rgb(207,226,32)"/><text x="70.6461%" y="287.50"></text></g><g><title>crossterm::style::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::style::SetForegroundColor&gt;&gt;::fmt (6 samples, 0.24%)</title><rect x="70.5186%" y="261" width="0.2450%" height="15" fill="rgb(222,207,47)"/><text x="70.7686%" y="271.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (6 samples, 0.24%)</title><rect x="70.5186%" y="245" width="0.2450%" height="15" fill="rgb(229,115,45)"/><text x="70.7686%" y="255.50"></text></g><g><title>core::fmt::Formatter::write_fmt (6 samples, 0.24%)</title><rect x="70.5186%" y="229" width="0.2450%" height="15" fill="rgb(224,191,6)"/><text x="70.7686%" y="239.50"></text></g><g><title>core::fmt::write (6 samples, 0.24%)</title><rect x="70.5186%" y="213" width="0.2450%" height="15" fill="rgb(230,227,24)"/><text x="70.7686%" y="223.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.16%)</title><rect x="70.8452%" y="261" width="0.1633%" height="15" fill="rgb(228,80,19)"/><text x="71.0952%" y="271.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_inner (31 samples, 1.27%)</title><rect x="69.7836%" y="405" width="1.2658%" height="15" fill="rgb(247,229,0)"/><text x="70.0336%" y="415.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char_with_color (16 samples, 0.65%)</title><rect x="70.3961%" y="389" width="0.6533%" height="15" fill="rgb(237,194,15)"/><text x="70.6461%" y="399.50"></text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_char (7 samples, 0.29%)</title><rect x="70.7636%" y="373" width="0.2858%" height="15" fill="rgb(219,203,20)"/><text x="71.0136%" y="383.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::write (7 samples, 0.29%)</title><rect x="70.7636%" y="357" width="0.2858%" height="15" fill="rgb(234,128,8)"/><text x="71.0136%" y="367.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write (7 samples, 0.29%)</title><rect x="70.7636%" y="341" width="0.2858%" height="15" fill="rgb(248,202,8)"/><text x="71.0136%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (7 samples, 0.29%)</title><rect x="70.7636%" y="325" width="0.2858%" height="15" fill="rgb(206,104,37)"/><text x="71.0136%" y="335.50"></text></g><g><title>irust::irust::raw_terminal::RawTerminal::_write::{{closure}} (7 samples, 0.29%)</title><rect x="70.7636%" y="309" width="0.2858%" height="15" fill="rgb(223,8,27)"/><text x="71.0136%" y="319.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 0.29%)</title><rect x="70.7636%" y="293" width="0.2858%" height="15" fill="rgb(216,217,28)"/><text x="71.0136%" y="303.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 0.29%)</title><rect x="70.7636%" y="277" width="0.2858%" height="15" fill="rgb(249,199,1)"/><text x="71.0136%" y="287.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_enter (44 samples, 1.80%)</title><rect x="69.2936%" y="453" width="1.7967%" height="15" fill="rgb(240,85,17)"/><text x="69.5436%" y="463.50">i..</text></g><g><title>irust::irust::writer::&lt;impl irust::irust::IRust&gt;::write_from_next_line (41 samples, 1.67%)</title><rect x="69.4161%" y="437" width="1.6742%" height="15" fill="rgb(206,108,45)"/><text x="69.6661%" y="447.50"></text></g><g><title>irust::irust::printer::&lt;impl irust::irust::IRust&gt;::print_input (41 samples, 1.67%)</title><rect x="69.4161%" y="421" width="1.6742%" height="15" fill="rgb(245,210,41)"/><text x="69.6661%" y="431.50"></text></g><g><title>irust::irust::IRust::handle_input_event (1,115 samples, 45.53%)</title><rect x="25.6840%" y="469" width="45.5288%" height="15" fill="rgb(206,13,37)"/><text x="25.9340%" y="479.50">irust::irust::IRust::handle_input_event</text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_tab (3 samples, 0.12%)</title><rect x="71.0902%" y="453" width="0.1225%" height="15" fill="rgb(250,61,18)"/><text x="71.3402%" y="463.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_tab::{{closure}} (3 samples, 0.12%)</title><rect x="71.0902%" y="437" width="0.1225%" height="15" fill="rgb(235,172,48)"/><text x="71.3402%" y="447.50"></text></g><g><title>irust::irust::racer::&lt;impl irust::irust::IRust&gt;::update_suggestions (3 samples, 0.12%)</title><rect x="71.0902%" y="421" width="0.1225%" height="15" fill="rgb(249,201,17)"/><text x="71.3402%" y="431.50"></text></g><g><title>irust::irust::racer::&lt;impl irust::irust::IRust&gt;::show_suggestions_inner (3 samples, 0.12%)</title><rect x="71.0902%" y="405" width="0.1225%" height="15" fill="rgb(219,208,6)"/><text x="71.3402%" y="415.50"></text></g><g><title>irust::irust::repl::Repl::eval_in_tmp_repl (3 samples, 0.12%)</title><rect x="71.0902%" y="389" width="0.1225%" height="15" fill="rgb(248,31,23)"/><text x="71.3402%" y="399.50"></text></g><g><title>irust::irust::repl::Repl::prepare_ground (8 samples, 0.33%)</title><rect x="71.2127%" y="453" width="0.3267%" height="15" fill="rgb(245,15,42)"/><text x="71.4627%" y="463.50"></text></g><g><title>irust::irust::cargo_cmds::cargo_new (8 samples, 0.33%)</title><rect x="71.2127%" y="437" width="0.3267%" height="15" fill="rgb(222,217,39)"/><text x="71.4627%" y="447.50"></text></g><g><title>std::process::Child::wait (7 samples, 0.29%)</title><rect x="71.2536%" y="421" width="0.2858%" height="15" fill="rgb(210,219,27)"/><text x="71.5036%" y="431.50"></text></g><g><title>std::sys::unix::process::process_inner::Process::wait (7 samples, 0.29%)</title><rect x="71.2536%" y="405" width="0.2858%" height="15" fill="rgb(252,166,36)"/><text x="71.5036%" y="415.50"></text></g><g><title>std::sys::unix::cvt_r (7 samples, 0.29%)</title><rect x="71.2536%" y="389" width="0.2858%" height="15" fill="rgb(245,132,34)"/><text x="71.5036%" y="399.50"></text></g><g><title>std::sys::unix::process::process_inner::Process::wait::{{closure}} (7 samples, 0.29%)</title><rect x="71.2536%" y="373" width="0.2858%" height="15" fill="rgb(236,54,3)"/><text x="71.5036%" y="383.50"></text></g><g><title>__wait4 (7 samples, 0.29%)</title><rect x="71.2536%" y="357" width="0.2858%" height="15" fill="rgb(241,173,43)"/><text x="71.5036%" y="367.50"></text></g><g><title>irust::irust::IRust::prepare (9 samples, 0.37%)</title><rect x="71.2127%" y="469" width="0.3675%" height="15" fill="rgb(215,190,9)"/><text x="71.4627%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (49 samples, 2.00%)</title><rect x="71.5802%" y="421" width="2.0008%" height="15" fill="rgb(242,101,16)"/><text x="71.8302%" y="431.50">&lt;..</text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (49 samples, 2.00%)</title><rect x="71.5802%" y="405" width="2.0008%" height="15" fill="rgb(223,190,21)"/><text x="71.8302%" y="415.50">&lt;..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (49 samples, 2.00%)</title><rect x="71.5802%" y="389" width="2.0008%" height="15" fill="rgb(215,228,25)"/><text x="71.8302%" y="399.50">&lt;..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (49 samples, 2.00%)</title><rect x="71.5802%" y="373" width="2.0008%" height="15" fill="rgb(225,36,22)"/><text x="71.8302%" y="383.50">s..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (49 samples, 2.00%)</title><rect x="71.5802%" y="357" width="2.0008%" height="15" fill="rgb(251,106,46)"/><text x="71.8302%" y="367.50">&lt;..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (49 samples, 2.00%)</title><rect x="71.5802%" y="341" width="2.0008%" height="15" fill="rgb(208,90,1)"/><text x="71.8302%" y="351.50">&lt;..</text></g><g><title>std::sys::unix::fd::FileDesc::write (49 samples, 2.00%)</title><rect x="71.5802%" y="325" width="2.0008%" height="15" fill="rgb(243,10,4)"/><text x="71.8302%" y="335.50">s..</text></g><g><title>__GI___libc_write (49 samples, 2.00%)</title><rect x="71.5802%" y="309" width="2.0008%" height="15" fill="rgb(212,137,27)"/><text x="71.8302%" y="319.50">_..</text></g><g><title>irust::irust::raw_terminal::RawTerminal::flush (51 samples, 2.08%)</title><rect x="71.5802%" y="469" width="2.0825%" height="15" fill="rgb(231,220,49)"/><text x="71.8302%" y="479.50">i..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (51 samples, 2.08%)</title><rect x="71.5802%" y="453" width="2.0825%" height="15" fill="rgb(237,96,20)"/><text x="71.8302%" y="463.50">&lt;..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (51 samples, 2.08%)</title><rect x="71.5802%" y="437" width="2.0825%" height="15" fill="rgb(239,229,30)"/><text x="71.8302%" y="447.50">&lt;..</text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (37 samples, 1.51%)</title><rect x="73.6627%" y="437" width="1.5108%" height="15" fill="rgb(219,65,33)"/><text x="73.9127%" y="447.50"></text></g><g><title>std::thread::park (36 samples, 1.47%)</title><rect x="73.7036%" y="421" width="1.4700%" height="15" fill="rgb(243,134,7)"/><text x="73.9536%" y="431.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (36 samples, 1.47%)</title><rect x="73.7036%" y="405" width="1.4700%" height="15" fill="rgb(216,177,54)"/><text x="73.9536%" y="415.50"></text></g><g><title>std::sys::unix::futex::futex_wait (36 samples, 1.47%)</title><rect x="73.7036%" y="389" width="1.4700%" height="15" fill="rgb(211,160,20)"/><text x="73.9536%" y="399.50"></text></g><g><title>syscall (36 samples, 1.47%)</title><rect x="73.7036%" y="373" width="1.4700%" height="15" fill="rgb(239,85,39)"/><text x="73.9536%" y="383.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (42 samples, 1.71%)</title><rect x="73.6627%" y="469" width="1.7150%" height="15" fill="rgb(232,125,22)"/><text x="73.9127%" y="479.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::recv (42 samples, 1.71%)</title><rect x="73.6627%" y="453" width="1.7150%" height="15" fill="rgb(244,57,34)"/><text x="73.9127%" y="463.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (3 samples, 0.12%)</title><rect x="75.2552%" y="437" width="0.1225%" height="15" fill="rgb(214,203,32)"/><text x="75.5052%" y="447.50"></text></g><g><title>std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (3 samples, 0.12%)</title><rect x="75.2552%" y="421" width="0.1225%" height="15" fill="rgb(207,58,43)"/><text x="75.5052%" y="431.50"></text></g><g><title>std::panic::catch_unwind (1,252 samples, 51.12%)</title><rect x="25.1940%" y="613" width="51.1229%" height="15" fill="rgb(215,193,15)"/><text x="25.4440%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,252 samples, 51.12%)</title><rect x="25.1940%" y="597" width="51.1229%" height="15" fill="rgb(232,15,44)"/><text x="25.4440%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,252 samples, 51.12%)</title><rect x="25.1940%" y="581" width="51.1229%" height="15" fill="rgb(212,3,48)"/><text x="25.4440%" y="591.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,252 samples, 51.12%)</title><rect x="25.1940%" y="565" width="51.1229%" height="15" fill="rgb(218,128,7)"/><text x="25.4440%" y="575.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,252 samples, 51.12%)</title><rect x="25.1940%" y="549" width="51.1229%" height="15" fill="rgb(226,216,39)"/><text x="25.4440%" y="559.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,252 samples, 51.12%)</title><rect x="25.1940%" y="533" width="51.1229%" height="15" fill="rgb(243,47,51)"/><text x="25.4440%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,252 samples, 51.12%)</title><rect x="25.1940%" y="517" width="51.1229%" height="15" fill="rgb(241,183,40)"/><text x="25.4440%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>irust::main (1,252 samples, 51.12%)</title><rect x="25.1940%" y="501" width="51.1229%" height="15" fill="rgb(231,217,32)"/><text x="25.4440%" y="511.50">irust::main</text></g><g><title>irust::irust::IRust::run (1,240 samples, 50.63%)</title><rect x="25.6840%" y="485" width="50.6329%" height="15" fill="rgb(229,61,38)"/><text x="25.9340%" y="495.50">irust::irust::IRust::run</text></g><g><title>std::thread::Thread::unpark (23 samples, 0.94%)</title><rect x="75.3777%" y="469" width="0.9392%" height="15" fill="rgb(225,210,5)"/><text x="75.6277%" y="479.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::unpark (23 samples, 0.94%)</title><rect x="75.3777%" y="453" width="0.9392%" height="15" fill="rgb(231,79,45)"/><text x="75.6277%" y="463.50"></text></g><g><title>syscall (23 samples, 0.94%)</title><rect x="75.3777%" y="437" width="0.9392%" height="15" fill="rgb(224,100,7)"/><text x="75.6277%" y="447.50"></text></g><g><title>__libc_start_main (1,253 samples, 51.16%)</title><rect x="25.1940%" y="661" width="51.1637%" height="15" fill="rgb(241,198,18)"/><text x="25.4440%" y="671.50">__libc_start_main</text></g><g><title>main (1,253 samples, 51.16%)</title><rect x="25.1940%" y="645" width="51.1637%" height="15" fill="rgb(252,97,53)"/><text x="25.4440%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (1,253 samples, 51.16%)</title><rect x="25.1940%" y="629" width="51.1637%" height="15" fill="rgb(220,88,7)"/><text x="25.4440%" y="639.50">std::rt::lang_start_internal</text></g><g><title>_start (1,264 samples, 51.61%)</title><rect x="24.8673%" y="677" width="51.6129%" height="15" fill="rgb(213,176,14)"/><text x="25.1173%" y="687.50">_start</text></g><g><title>_dl_start (3 samples, 0.12%)</title><rect x="76.3577%" y="661" width="0.1225%" height="15" fill="rgb(246,73,7)"/><text x="76.6077%" y="671.50"></text></g><g><title>_dl_sysdep_start (3 samples, 0.12%)</title><rect x="76.3577%" y="645" width="0.1225%" height="15" fill="rgb(245,64,36)"/><text x="76.6077%" y="655.50"></text></g><g><title>dl_main (3 samples, 0.12%)</title><rect x="76.3577%" y="629" width="0.1225%" height="15" fill="rgb(245,80,10)"/><text x="76.6077%" y="639.50"></text></g><g><title>anon.52493d1041a68f033e8903c5bd57b0fd.16.llvm.16049549548602548924 (10 samples, 0.41%)</title><rect x="76.4802%" y="677" width="0.4083%" height="15" fill="rgb(232,107,50)"/><text x="76.7302%" y="687.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (10 samples, 0.41%)</title><rect x="76.4802%" y="661" width="0.4083%" height="15" fill="rgb(253,3,0)"/><text x="76.7302%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.20%)</title><rect x="76.6844%" y="645" width="0.2042%" height="15" fill="rgb(212,99,53)"/><text x="76.9344%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.20%)</title><rect x="76.6844%" y="629" width="0.2042%" height="15" fill="rgb(249,111,54)"/><text x="76.9344%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.20%)</title><rect x="76.6844%" y="613" width="0.2042%" height="15" fill="rgb(249,55,30)"/><text x="76.9344%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.20%)</title><rect x="76.6844%" y="597" width="0.2042%" height="15" fill="rgb(237,47,42)"/><text x="76.9344%" y="607.50"></text></g><g><title>crossterm::style::&lt;impl core::fmt::Display for crossterm::ansi::Ansi&lt;crossterm::style::SetForegroundColor&gt;&gt;::fmt (4 samples, 0.16%)</title><rect x="76.9294%" y="677" width="0.1633%" height="15" fill="rgb(211,20,18)"/><text x="77.1794%" y="687.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (4 samples, 0.16%)</title><rect x="76.9294%" y="661" width="0.1633%" height="15" fill="rgb(231,203,46)"/><text x="77.1794%" y="671.50"></text></g><g><title>core::fmt::write (6 samples, 0.24%)</title><rect x="77.2969%" y="661" width="0.2450%" height="15" fill="rgb(237,142,3)"/><text x="77.5469%" y="671.50"></text></g><g><title>irust (1,553 samples, 63.41%)</title><rect x="14.2507%" y="693" width="63.4136%" height="15" fill="rgb(241,107,1)"/><text x="14.5007%" y="703.50">irust</text></g><g><title>std::io::stdio::stdout::INSTANCE (11 samples, 0.45%)</title><rect x="77.2152%" y="677" width="0.4492%" height="15" fill="rgb(229,83,13)"/><text x="77.4652%" y="687.50"></text></g><g><title>[ld] (3 samples, 0.12%)</title><rect x="77.7869%" y="661" width="0.1225%" height="15" fill="rgb(241,91,40)"/><text x="78.0369%" y="671.50"></text></g><g><title>bfd_check_format_matches (4 samples, 0.16%)</title><rect x="79.7877%" y="533" width="0.1633%" height="15" fill="rgb(225,3,45)"/><text x="80.0377%" y="543.50"></text></g><g><title>bfd_section_list_clear (3 samples, 0.12%)</title><rect x="79.8285%" y="517" width="0.1225%" height="15" fill="rgb(244,223,14)"/><text x="80.0785%" y="527.50"></text></g><g><title>__memset_erms (3 samples, 0.12%)</title><rect x="79.8285%" y="501" width="0.1225%" height="15" fill="rgb(224,124,37)"/><text x="80.0785%" y="511.50"></text></g><g><title>[ld] (25 samples, 1.02%)</title><rect x="79.0118%" y="549" width="1.0208%" height="15" fill="rgb(251,171,30)"/><text x="79.2618%" y="559.50"></text></g><g><title>__GI_fnmatch (10 samples, 0.41%)</title><rect x="80.0327%" y="549" width="0.4083%" height="15" fill="rgb(236,46,54)"/><text x="80.2827%" y="559.50"></text></g><g><title>internal_fnmatch (5 samples, 0.20%)</title><rect x="80.2368%" y="533" width="0.2042%" height="15" fill="rgb(245,213,5)"/><text x="80.4868%" y="543.50"></text></g><g><title>[libbfd-2.35.1.so] (6 samples, 0.24%)</title><rect x="80.8085%" y="485" width="0.2450%" height="15" fill="rgb(230,144,27)"/><text x="81.0585%" y="495.50"></text></g><g><title>_bfd_elf_new_section_hook (5 samples, 0.20%)</title><rect x="80.8493%" y="469" width="0.2042%" height="15" fill="rgb(220,86,6)"/><text x="81.0993%" y="479.50"></text></g><g><title>bfd_zalloc (4 samples, 0.16%)</title><rect x="80.8902%" y="453" width="0.1633%" height="15" fill="rgb(240,20,13)"/><text x="81.1402%" y="463.50"></text></g><g><title>bfd_alloc (3 samples, 0.12%)</title><rect x="80.9310%" y="437" width="0.1225%" height="15" fill="rgb(217,89,34)"/><text x="81.1810%" y="447.50"></text></g><g><title>_objalloc_alloc (3 samples, 0.12%)</title><rect x="80.9310%" y="421" width="0.1225%" height="15" fill="rgb(229,13,5)"/><text x="81.1810%" y="431.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.12%)</title><rect x="80.9310%" y="405" width="0.1225%" height="15" fill="rgb(244,67,35)"/><text x="81.1810%" y="415.50"></text></g><g><title>_int_malloc (3 samples, 0.12%)</title><rect x="80.9310%" y="389" width="0.1225%" height="15" fill="rgb(221,40,2)"/><text x="81.1810%" y="399.50"></text></g><g><title>_bfd_elf_make_section_from_shdr (13 samples, 0.53%)</title><rect x="80.7268%" y="501" width="0.5308%" height="15" fill="rgb(237,157,21)"/><text x="80.9768%" y="511.50"></text></g><g><title>bfd_make_section_anyway_with_flags (3 samples, 0.12%)</title><rect x="81.1352%" y="485" width="0.1225%" height="15" fill="rgb(222,94,11)"/><text x="81.3852%" y="495.50"></text></g><g><title>bfd_section_from_shdr (14 samples, 0.57%)</title><rect x="80.7268%" y="517" width="0.5717%" height="15" fill="rgb(249,113,6)"/><text x="80.9768%" y="527.50"></text></g><g><title>bfd_check_format_matches (18 samples, 0.73%)</title><rect x="80.6043%" y="549" width="0.7350%" height="15" fill="rgb(238,137,36)"/><text x="80.8543%" y="559.50"></text></g><g><title>bfd_elf64_object_p (16 samples, 0.65%)</title><rect x="80.6860%" y="533" width="0.6533%" height="15" fill="rgb(210,102,26)"/><text x="80.9360%" y="543.50"></text></g><g><title>[ld] (82 samples, 3.35%)</title><rect x="78.0727%" y="565" width="3.3483%" height="15" fill="rgb(218,30,30)"/><text x="78.3227%" y="575.50">[ld]</text></g><g><title>bfd_hash_insert (4 samples, 0.16%)</title><rect x="81.6660%" y="517" width="0.1633%" height="15" fill="rgb(214,67,26)"/><text x="81.9160%" y="527.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.20%)</title><rect x="81.6660%" y="549" width="0.2042%" height="15" fill="rgb(251,9,53)"/><text x="81.9160%" y="559.50"></text></g><g><title>bfd_link_hash_lookup (5 samples, 0.20%)</title><rect x="81.6660%" y="533" width="0.2042%" height="15" fill="rgb(228,204,25)"/><text x="81.9160%" y="543.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.16%)</title><rect x="81.8702%" y="549" width="0.1633%" height="15" fill="rgb(207,153,8)"/><text x="82.1202%" y="559.50"></text></g><g><title>_bfd_elf_link_read_relocs (3 samples, 0.12%)</title><rect x="82.1968%" y="533" width="0.1225%" height="15" fill="rgb(242,9,16)"/><text x="82.4468%" y="543.50"></text></g><g><title>[ld] (105 samples, 4.29%)</title><rect x="78.0727%" y="581" width="4.2875%" height="15" fill="rgb(217,211,10)"/><text x="78.3227%" y="591.50">[ld]</text></g><g><title>bfd_elf_link_add_symbols (22 samples, 0.90%)</title><rect x="81.4618%" y="565" width="0.8983%" height="15" fill="rgb(219,228,52)"/><text x="81.7118%" y="575.50"></text></g><g><title>bfd_elf_link_add_symbols (6 samples, 0.24%)</title><rect x="82.1151%" y="549" width="0.2450%" height="15" fill="rgb(231,92,29)"/><text x="82.3651%" y="559.50"></text></g><g><title>[ld] (118 samples, 4.82%)</title><rect x="78.0727%" y="597" width="4.8183%" height="15" fill="rgb(232,8,23)"/><text x="78.3227%" y="607.50">[ld]</text></g><g><title>bfd_elf_link_add_symbols (12 samples, 0.49%)</title><rect x="82.4010%" y="581" width="0.4900%" height="15" fill="rgb(216,211,34)"/><text x="82.6510%" y="591.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (6 samples, 0.24%)</title><rect x="82.6460%" y="565" width="0.2450%" height="15" fill="rgb(236,151,0)"/><text x="82.8960%" y="575.50"></text></g><g><title>bfd_elf_discard_info (3 samples, 0.12%)</title><rect x="82.8910%" y="597" width="0.1225%" height="15" fill="rgb(209,168,3)"/><text x="83.1410%" y="607.50"></text></g><g><title>bfd_elf_size_dynamic_sections (8 samples, 0.33%)</title><rect x="83.0135%" y="597" width="0.3267%" height="15" fill="rgb(208,129,28)"/><text x="83.2635%" y="607.50"></text></g><g><title>bfd_link_hash_traverse (5 samples, 0.20%)</title><rect x="83.1360%" y="581" width="0.2042%" height="15" fill="rgb(229,78,22)"/><text x="83.3860%" y="591.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.12%)</title><rect x="83.2176%" y="565" width="0.1225%" height="15" fill="rgb(228,187,13)"/><text x="83.4676%" y="575.50"></text></g><g><title>[ld] (131 samples, 5.35%)</title><rect x="78.0318%" y="613" width="5.3491%" height="15" fill="rgb(240,119,24)"/><text x="78.2818%" y="623.50">[ld]</text></g><g><title>_bfd_elf_link_check_relocs (6 samples, 0.24%)</title><rect x="83.3810%" y="613" width="0.2450%" height="15" fill="rgb(209,194,42)"/><text x="83.6310%" y="623.50"></text></g><g><title>[libbfd-2.35.1.so] (6 samples, 0.24%)</title><rect x="83.3810%" y="597" width="0.2450%" height="15" fill="rgb(247,200,46)"/><text x="83.6310%" y="607.50"></text></g><g><title>bfd_sym_from_r_symndx (4 samples, 0.16%)</title><rect x="83.4626%" y="581" width="0.1633%" height="15" fill="rgb(218,76,16)"/><text x="83.7126%" y="591.50"></text></g><g><title>bfd_elf_get_elf_syms (4 samples, 0.16%)</title><rect x="83.4626%" y="565" width="0.1633%" height="15" fill="rgb(225,21,48)"/><text x="83.7126%" y="575.50"></text></g><g><title>bfd_seek (3 samples, 0.12%)</title><rect x="83.5035%" y="549" width="0.1225%" height="15" fill="rgb(239,223,50)"/><text x="83.7535%" y="559.50"></text></g><g><title>__GI___fseeko64 (3 samples, 0.12%)</title><rect x="83.5035%" y="533" width="0.1225%" height="15" fill="rgb(244,45,21)"/><text x="83.7535%" y="543.50"></text></g><g><title>__GI__IO_file_seekoff (3 samples, 0.12%)</title><rect x="83.5035%" y="517" width="0.1225%" height="15" fill="rgb(232,33,43)"/><text x="83.7535%" y="527.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.12%)</title><rect x="83.6668%" y="581" width="0.1225%" height="15" fill="rgb(209,8,3)"/><text x="83.9168%" y="591.50"></text></g><g><title>_bfd_elf_merge_sections (10 samples, 0.41%)</title><rect x="83.6260%" y="613" width="0.4083%" height="15" fill="rgb(214,25,53)"/><text x="83.8760%" y="623.50"></text></g><g><title>[libbfd-2.35.1.so] (10 samples, 0.41%)</title><rect x="83.6260%" y="597" width="0.4083%" height="15" fill="rgb(254,186,54)"/><text x="83.8760%" y="607.50"></text></g><g><title>__GI___qsort_r (6 samples, 0.24%)</title><rect x="83.7893%" y="581" width="0.2450%" height="15" fill="rgb(208,174,49)"/><text x="84.0393%" y="591.50"></text></g><g><title>msort_with_tmp.part.0 (6 samples, 0.24%)</title><rect x="83.7893%" y="565" width="0.2450%" height="15" fill="rgb(233,191,51)"/><text x="84.0393%" y="575.50"></text></g><g><title>msort_with_tmp.part.0 (4 samples, 0.16%)</title><rect x="83.8710%" y="549" width="0.1633%" height="15" fill="rgb(222,134,10)"/><text x="84.1210%" y="559.50"></text></g><g><title>msort_with_tmp.part.0 (3 samples, 0.12%)</title><rect x="83.9118%" y="533" width="0.1225%" height="15" fill="rgb(230,226,20)"/><text x="84.1618%" y="543.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.12%)</title><rect x="84.2385%" y="581" width="0.1225%" height="15" fill="rgb(251,111,25)"/><text x="84.4885%" y="591.50"></text></g><g><title>_bfd_elf_rela_local_sym (9 samples, 0.37%)</title><rect x="84.3610%" y="581" width="0.3675%" height="15" fill="rgb(224,40,46)"/><text x="84.6110%" y="591.50"></text></g><g><title>[libbfd-2.35.1.so] (6 samples, 0.24%)</title><rect x="84.4835%" y="565" width="0.2450%" height="15" fill="rgb(236,108,47)"/><text x="84.7335%" y="575.50"></text></g><g><title>[libbfd-2.35.1.so] (6 samples, 0.24%)</title><rect x="84.4835%" y="549" width="0.2450%" height="15" fill="rgb(234,93,0)"/><text x="84.7335%" y="559.50"></text></g><g><title>[libbfd-2.35.1.so] (19 samples, 0.78%)</title><rect x="84.1160%" y="597" width="0.7758%" height="15" fill="rgb(224,213,32)"/><text x="84.3660%" y="607.50"></text></g><g><title>bfd_elf_sym_name (3 samples, 0.12%)</title><rect x="84.9735%" y="597" width="0.1225%" height="15" fill="rgb(251,11,48)"/><text x="85.2235%" y="607.50"></text></g><g><title>bfd_get_full_section_contents (3 samples, 0.12%)</title><rect x="85.0960%" y="597" width="0.1225%" height="15" fill="rgb(236,173,5)"/><text x="85.3460%" y="607.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.12%)</title><rect x="85.0960%" y="581" width="0.1225%" height="15" fill="rgb(230,95,12)"/><text x="85.3460%" y="591.50"></text></g><g><title>bfd_hash_traverse (5 samples, 0.20%)</title><rect x="85.2185%" y="597" width="0.2042%" height="15" fill="rgb(232,209,1)"/><text x="85.4685%" y="607.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.20%)</title><rect x="85.2185%" y="581" width="0.2042%" height="15" fill="rgb(232,6,1)"/><text x="85.4685%" y="591.50"></text></g><g><title>bfd_bwrite (5 samples, 0.20%)</title><rect x="85.4226%" y="565" width="0.2042%" height="15" fill="rgb(210,224,50)"/><text x="85.6726%" y="575.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.20%)</title><rect x="85.4226%" y="549" width="0.2042%" height="15" fill="rgb(228,127,35)"/><text x="85.6726%" y="559.50"></text></g><g><title>__GI__IO_fwrite (5 samples, 0.20%)</title><rect x="85.4226%" y="533" width="0.2042%" height="15" fill="rgb(245,102,45)"/><text x="85.6726%" y="543.50"></text></g><g><title>_IO_new_file_xsputn (5 samples, 0.20%)</title><rect x="85.4226%" y="517" width="0.2042%" height="15" fill="rgb(214,1,49)"/><text x="85.6726%" y="527.50"></text></g><g><title>new_do_write (5 samples, 0.20%)</title><rect x="85.4226%" y="501" width="0.2042%" height="15" fill="rgb(226,163,40)"/><text x="85.6726%" y="511.50"></text></g><g><title>_IO_new_file_write (5 samples, 0.20%)</title><rect x="85.4226%" y="485" width="0.2042%" height="15" fill="rgb(239,212,28)"/><text x="85.6726%" y="495.50"></text></g><g><title>__GI___libc_write (5 samples, 0.20%)</title><rect x="85.4226%" y="469" width="0.2042%" height="15" fill="rgb(220,20,13)"/><text x="85.6726%" y="479.50"></text></g><g><title>bfd_elf_final_link (43 samples, 1.76%)</title><rect x="84.0343%" y="613" width="1.7558%" height="15" fill="rgb(210,164,35)"/><text x="84.2843%" y="623.50"></text></g><g><title>bfd_set_section_contents (9 samples, 0.37%)</title><rect x="85.4226%" y="597" width="0.3675%" height="15" fill="rgb(248,109,41)"/><text x="85.6726%" y="607.50"></text></g><g><title>_bfd_elf_set_section_contents (9 samples, 0.37%)</title><rect x="85.4226%" y="581" width="0.3675%" height="15" fill="rgb(238,23,50)"/><text x="85.6726%" y="591.50"></text></g><g><title>bfd_seek (4 samples, 0.16%)</title><rect x="85.6268%" y="565" width="0.1633%" height="15" fill="rgb(211,48,49)"/><text x="85.8768%" y="575.50"></text></g><g><title>__GI___fseeko64 (4 samples, 0.16%)</title><rect x="85.6268%" y="549" width="0.1633%" height="15" fill="rgb(223,36,21)"/><text x="85.8768%" y="559.50"></text></g><g><title>__GI__IO_file_seekoff (4 samples, 0.16%)</title><rect x="85.6268%" y="533" width="0.1633%" height="15" fill="rgb(207,123,46)"/><text x="85.8768%" y="543.50"></text></g><g><title>_bfd_elf_gc_mark_extra_sections (3 samples, 0.12%)</title><rect x="85.8310%" y="597" width="0.1225%" height="15" fill="rgb(240,218,32)"/><text x="86.0810%" y="607.50"></text></g><g><title>_bfd_elf_gc_mark (3 samples, 0.12%)</title><rect x="85.8310%" y="581" width="0.1225%" height="15" fill="rgb(252,5,43)"/><text x="86.0810%" y="591.50"></text></g><g><title>_bfd_elf_gc_mark_reloc (3 samples, 0.12%)</title><rect x="85.8310%" y="565" width="0.1225%" height="15" fill="rgb(252,84,19)"/><text x="86.0810%" y="575.50"></text></g><g><title>bfd_elf_gc_sections (7 samples, 0.29%)</title><rect x="85.7901%" y="613" width="0.2858%" height="15" fill="rgb(243,152,39)"/><text x="86.0401%" y="623.50"></text></g><g><title>[ld] (201 samples, 8.21%)</title><rect x="77.9094%" y="629" width="8.2074%" height="15" fill="rgb(234,160,15)"/><text x="78.1594%" y="639.50">[ld]</text></g><g><title>[ld] (13 samples, 0.53%)</title><rect x="86.1168%" y="549" width="0.5308%" height="15" fill="rgb(237,34,20)"/><text x="86.3668%" y="559.50"></text></g><g><title>[ld] (13 samples, 0.53%)</title><rect x="86.1168%" y="533" width="0.5308%" height="15" fill="rgb(229,97,13)"/><text x="86.3668%" y="543.50"></text></g><g><title>bfd_close (14 samples, 0.57%)</title><rect x="86.1168%" y="629" width="0.5717%" height="15" fill="rgb(234,71,50)"/><text x="86.3668%" y="639.50"></text></g><g><title>_bfd_elf_write_object_contents (14 samples, 0.57%)</title><rect x="86.1168%" y="613" width="0.5717%" height="15" fill="rgb(253,155,4)"/><text x="86.3668%" y="623.50"></text></g><g><title>[ld] (14 samples, 0.57%)</title><rect x="86.1168%" y="597" width="0.5717%" height="15" fill="rgb(222,185,37)"/><text x="86.3668%" y="607.50"></text></g><g><title>[ld] (14 samples, 0.57%)</title><rect x="86.1168%" y="581" width="0.5717%" height="15" fill="rgb(251,177,13)"/><text x="86.3668%" y="591.50"></text></g><g><title>bfd_elf64_checksum_contents (14 samples, 0.57%)</title><rect x="86.1168%" y="565" width="0.5717%" height="15" fill="rgb(250,179,40)"/><text x="86.3668%" y="575.50"></text></g><g><title>[ld] (219 samples, 8.94%)</title><rect x="77.7869%" y="677" width="8.9424%" height="15" fill="rgb(242,44,2)"/><text x="78.0369%" y="687.50">[ld]</text></g><g><title>__libc_start_main (216 samples, 8.82%)</title><rect x="77.9094%" y="661" width="8.8199%" height="15" fill="rgb(216,177,13)"/><text x="78.1594%" y="671.50">__libc_start..</text></g><g><title>[ld] (216 samples, 8.82%)</title><rect x="77.9094%" y="645" width="8.8199%" height="15" fill="rgb(216,106,43)"/><text x="78.1594%" y="655.50">[ld]</text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.12%)</title><rect x="86.7293%" y="661" width="0.1225%" height="15" fill="rgb(216,183,2)"/><text x="86.9793%" y="671.50"></text></g><g><title>[unknown] (7 samples, 0.29%)</title><rect x="86.7293%" y="677" width="0.2858%" height="15" fill="rgb(249,75,3)"/><text x="86.9793%" y="687.50"></text></g><g><title>ld (232 samples, 9.47%)</title><rect x="77.6644%" y="693" width="9.4733%" height="15" fill="rgb(219,67,39)"/><text x="77.9144%" y="703.50">ld</text></g><g><title>__libc_start_main (4 samples, 0.16%)</title><rect x="87.1376%" y="661" width="0.1633%" height="15" fill="rgb(253,228,2)"/><text x="87.3876%" y="671.50"></text></g><g><title>main (4 samples, 0.16%)</title><rect x="87.1376%" y="645" width="0.1633%" height="15" fill="rgb(235,138,27)"/><text x="87.3876%" y="655.50"></text></g><g><title>std::rt::lang_start_internal (4 samples, 0.16%)</title><rect x="87.1376%" y="629" width="0.1633%" height="15" fill="rgb(236,97,51)"/><text x="87.3876%" y="639.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.16%)</title><rect x="87.1376%" y="613" width="0.1633%" height="15" fill="rgb(240,80,30)"/><text x="87.3876%" y="623.50"></text></g><g><title>std::panicking::try (4 samples, 0.16%)</title><rect x="87.1376%" y="597" width="0.1633%" height="15" fill="rgb(230,178,19)"/><text x="87.3876%" y="607.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.16%)</title><rect x="87.1376%" y="581" width="0.1633%" height="15" fill="rgb(210,190,27)"/><text x="87.3876%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4 samples, 0.16%)</title><rect x="87.1376%" y="565" width="0.1633%" height="15" fill="rgb(222,107,31)"/><text x="87.3876%" y="575.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (4 samples, 0.16%)</title><rect x="87.1376%" y="549" width="0.1633%" height="15" fill="rgb(216,127,34)"/><text x="87.3876%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 0.16%)</title><rect x="87.1376%" y="533" width="0.1633%" height="15" fill="rgb(234,116,52)"/><text x="87.3876%" y="543.50"></text></g><g><title>racer::main (4 samples, 0.16%)</title><rect x="87.1376%" y="517" width="0.1633%" height="15" fill="rgb(222,124,15)"/><text x="87.3876%" y="527.50"></text></g><g><title>racer (5 samples, 0.20%)</title><rect x="87.1376%" y="693" width="0.2042%" height="15" fill="rgb(231,179,28)"/><text x="87.3876%" y="703.50"></text></g><g><title>_start (5 samples, 0.20%)</title><rect x="87.1376%" y="677" width="0.2042%" height="15" fill="rgb(226,93,45)"/><text x="87.3876%" y="687.50"></text></g><g><title>[anon] (4 samples, 0.16%)</title><rect x="87.3418%" y="677" width="0.1633%" height="15" fill="rgb(215,8,51)"/><text x="87.5918%" y="687.50"></text></g><g><title>[rustup] (11 samples, 0.45%)</title><rect x="87.5051%" y="677" width="0.4492%" height="15" fill="rgb(223,106,5)"/><text x="87.7551%" y="687.50"></text></g><g><title>__libc_start_main (11 samples, 0.45%)</title><rect x="87.5051%" y="661" width="0.4492%" height="15" fill="rgb(250,191,5)"/><text x="87.7551%" y="671.50"></text></g><g><title>[rustup] (11 samples, 0.45%)</title><rect x="87.5051%" y="645" width="0.4492%" height="15" fill="rgb(242,132,44)"/><text x="87.7551%" y="655.50"></text></g><g><title>__pthread_getattr_np (10 samples, 0.41%)</title><rect x="87.5459%" y="629" width="0.4083%" height="15" fill="rgb(251,152,29)"/><text x="87.7959%" y="639.50"></text></g><g><title>__fopen_internal (8 samples, 0.33%)</title><rect x="87.6276%" y="613" width="0.3267%" height="15" fill="rgb(218,179,5)"/><text x="87.8776%" y="623.50"></text></g><g><title>malloc_hook_ini (8 samples, 0.33%)</title><rect x="87.6276%" y="597" width="0.3267%" height="15" fill="rgb(227,67,19)"/><text x="87.8776%" y="607.50"></text></g><g><title>ptmalloc_init.part.0 (8 samples, 0.33%)</title><rect x="87.6276%" y="581" width="0.3267%" height="15" fill="rgb(233,119,31)"/><text x="87.8776%" y="591.50"></text></g><g><title>__GI__dl_addr (8 samples, 0.33%)</title><rect x="87.6276%" y="565" width="0.3267%" height="15" fill="rgb(241,120,22)"/><text x="87.8776%" y="575.50"></text></g><g><title>[rustup] (3 samples, 0.12%)</title><rect x="88.1993%" y="549" width="0.1225%" height="15" fill="rgb(224,102,30)"/><text x="88.4493%" y="559.50"></text></g><g><title>[rustup] (3 samples, 0.12%)</title><rect x="88.1993%" y="533" width="0.1225%" height="15" fill="rgb(210,164,37)"/><text x="88.4493%" y="543.50"></text></g><g><title>[rustup] (6 samples, 0.24%)</title><rect x="88.1176%" y="613" width="0.2450%" height="15" fill="rgb(226,191,16)"/><text x="88.3676%" y="623.50"></text></g><g><title>[rustup] (6 samples, 0.24%)</title><rect x="88.1176%" y="597" width="0.2450%" height="15" fill="rgb(214,40,45)"/><text x="88.3676%" y="607.50"></text></g><g><title>[rustup] (5 samples, 0.20%)</title><rect x="88.1584%" y="581" width="0.2042%" height="15" fill="rgb(244,29,26)"/><text x="88.4084%" y="591.50"></text></g><g><title>[rustup] (4 samples, 0.16%)</title><rect x="88.1993%" y="565" width="0.1633%" height="15" fill="rgb(216,16,5)"/><text x="88.4493%" y="575.50"></text></g><g><title>[rustup] (13 samples, 0.53%)</title><rect x="87.9543%" y="661" width="0.5308%" height="15" fill="rgb(249,76,35)"/><text x="88.2043%" y="671.50"></text></g><g><title>[rustup] (12 samples, 0.49%)</title><rect x="87.9951%" y="645" width="0.4900%" height="15" fill="rgb(207,11,44)"/><text x="88.2451%" y="655.50"></text></g><g><title>[rustup] (12 samples, 0.49%)</title><rect x="87.9951%" y="629" width="0.4900%" height="15" fill="rgb(228,190,49)"/><text x="88.2451%" y="639.50"></text></g><g><title>rustc_driver::RunCompiler::run (7 samples, 0.29%)</title><rect x="88.5668%" y="661" width="0.2858%" height="15" fill="rgb(214,173,12)"/><text x="88.8168%" y="671.50"></text></g><g><title>rustc_interface::interface::run_compiler (7 samples, 0.29%)</title><rect x="88.5668%" y="645" width="0.2858%" height="15" fill="rgb(218,26,35)"/><text x="88.8168%" y="655.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (7 samples, 0.29%)</title><rect x="88.5668%" y="629" width="0.2858%" height="15" fill="rgb(220,200,19)"/><text x="88.8168%" y="639.50"></text></g><g><title>std::sys::unix::thread::Thread::join (7 samples, 0.29%)</title><rect x="88.5668%" y="613" width="0.2858%" height="15" fill="rgb(239,95,49)"/><text x="88.8168%" y="623.50"></text></g><g><title>__pthread_clockjoin_ex (7 samples, 0.29%)</title><rect x="88.5668%" y="597" width="0.2858%" height="15" fill="rgb(235,85,53)"/><text x="88.8168%" y="607.50"></text></g><g><title>rustc_expand::expand::MacroExpander::fully_expand_fragment (3 samples, 0.12%)</title><rect x="88.8934%" y="661" width="0.1225%" height="15" fill="rgb(233,133,31)"/><text x="89.1434%" y="671.50"></text></g><g><title>rustc_expand::expand::MacroExpander::collect_invocations (3 samples, 0.12%)</title><rect x="88.8934%" y="645" width="0.1225%" height="15" fill="rgb(218,25,20)"/><text x="89.1434%" y="655.50"></text></g><g><title>rustc_resolve::macros::&lt;impl rustc_expand::base::ResolverExpand for rustc_resolve::Resolver&gt;::visit_ast_fragment_with_placeholders (3 samples, 0.12%)</title><rect x="88.8934%" y="629" width="0.1225%" height="15" fill="rgb(252,210,38)"/><text x="89.1434%" y="639.50"></text></g><g><title>rustc_expand::expand::AstFragment::visit_with (3 samples, 0.12%)</title><rect x="88.8934%" y="613" width="0.1225%" height="15" fill="rgb(242,134,21)"/><text x="89.1434%" y="623.50"></text></g><g><title>&lt;rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor as rustc_ast::visit::Visitor&gt;::visit_item (3 samples, 0.12%)</title><rect x="88.8934%" y="597" width="0.1225%" height="15" fill="rgb(213,28,48)"/><text x="89.1434%" y="607.50"></text></g><g><title>rustc_ast::visit::walk_item (3 samples, 0.12%)</title><rect x="88.8934%" y="581" width="0.1225%" height="15" fill="rgb(250,196,2)"/><text x="89.1434%" y="591.50"></text></g><g><title>&lt;rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor as rustc_ast::visit::Visitor&gt;::visit_item (3 samples, 0.12%)</title><rect x="88.8934%" y="565" width="0.1225%" height="15" fill="rgb(227,5,17)"/><text x="89.1434%" y="575.50"></text></g><g><title>rustc_interface::queries::Queries::ongoing_codegen (4 samples, 0.16%)</title><rect x="89.3018%" y="645" width="0.1633%" height="15" fill="rgb(221,226,24)"/><text x="89.5518%" y="655.50"></text></g><g><title>rustc_interface::passes::QueryContext::enter (4 samples, 0.16%)</title><rect x="89.3018%" y="629" width="0.1633%" height="15" fill="rgb(211,5,48)"/><text x="89.5518%" y="639.50"></text></g><g><title>rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time (4 samples, 0.16%)</title><rect x="89.3018%" y="613" width="0.1633%" height="15" fill="rgb(219,150,6)"/><text x="89.5518%" y="623.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::codegen_crate (4 samples, 0.16%)</title><rect x="89.3018%" y="597" width="0.1633%" height="15" fill="rgb(251,46,16)"/><text x="89.5518%" y="607.50"></text></g><g><title>rustc_codegen_ssa::base::codegen_crate (4 samples, 0.16%)</title><rect x="89.3018%" y="581" width="0.1633%" height="15" fill="rgb(220,204,40)"/><text x="89.5518%" y="591.50"></text></g><g><title>rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter (9 samples, 0.37%)</title><rect x="89.1793%" y="661" width="0.3675%" height="15" fill="rgb(211,85,2)"/><text x="89.4293%" y="671.50"></text></g><g><title>LLVMInitializePasses (7 samples, 0.29%)</title><rect x="89.5468%" y="597" width="0.2858%" height="15" fill="rgb(229,17,7)"/><text x="89.7968%" y="607.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::init (13 samples, 0.53%)</title><rect x="89.5468%" y="645" width="0.5308%" height="15" fill="rgb(239,72,28)"/><text x="89.7968%" y="655.50"></text></g><g><title>std::sync::once::Once::call_inner (13 samples, 0.53%)</title><rect x="89.5468%" y="629" width="0.5308%" height="15" fill="rgb(230,47,54)"/><text x="89.7968%" y="639.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (13 samples, 0.53%)</title><rect x="89.5468%" y="613" width="0.5308%" height="15" fill="rgb(214,50,8)"/><text x="89.7968%" y="623.50"></text></g><g><title>rustc_llvm::initialize_available_targets (4 samples, 0.16%)</title><rect x="89.9143%" y="597" width="0.1633%" height="15" fill="rgb(216,198,43)"/><text x="90.1643%" y="607.50"></text></g><g><title>rustc_interface::util::create_session (14 samples, 0.57%)</title><rect x="89.5468%" y="661" width="0.5717%" height="15" fill="rgb(234,20,35)"/><text x="89.7968%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (5 samples, 0.20%)</title><rect x="90.3634%" y="645" width="0.2042%" height="15" fill="rgb(254,45,19)"/><text x="90.6134%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (4 samples, 0.16%)</title><rect x="90.8534%" y="597" width="0.1633%" height="15" fill="rgb(219,14,44)"/><text x="91.1034%" y="607.50"></text></g><g><title>rustc_middle::ty::context::TyCtxt::create_global_ctxt (22 samples, 0.90%)</title><rect x="90.2001%" y="661" width="0.8983%" height="15" fill="rgb(217,220,26)"/><text x="90.4501%" y="671.50"></text></g><g><title>rustc_metadata::rmeta::decoder::cstore_impl::&lt;impl rustc_middle::middle::cstore::CrateStore for rustc_metadata::creader::CStore&gt;::all_def_path_hashes_and_def_ids (13 samples, 0.53%)</title><rect x="90.5676%" y="645" width="0.5308%" height="15" fill="rgb(213,158,28)"/><text x="90.8176%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.53%)</title><rect x="90.5676%" y="629" width="0.5308%" height="15" fill="rgb(252,51,52)"/><text x="90.8176%" y="639.50"></text></g><g><title>rustc_metadata::rmeta::decoder::&lt;impl rustc_metadata::creader::CrateMetadataRef&gt;::def_path_hash_unlocked (12 samples, 0.49%)</title><rect x="90.6084%" y="613" width="0.4900%" height="15" fill="rgb(246,89,16)"/><text x="90.8584%" y="623.50"></text></g><g><title>__GI___fork (8 samples, 0.33%)</title><rect x="91.3026%" y="501" width="0.3267%" height="15" fill="rgb(216,158,49)"/><text x="91.5526%" y="511.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::link (9 samples, 0.37%)</title><rect x="91.3026%" y="613" width="0.3675%" height="15" fill="rgb(236,107,19)"/><text x="91.5526%" y="623.50"></text></g><g><title>rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time (9 samples, 0.37%)</title><rect x="91.3026%" y="597" width="0.3675%" height="15" fill="rgb(228,185,30)"/><text x="91.5526%" y="607.50"></text></g><g><title>rustc_codegen_ssa::back::link::link_binary (9 samples, 0.37%)</title><rect x="91.3026%" y="581" width="0.3675%" height="15" fill="rgb(246,134,8)"/><text x="91.5526%" y="591.50"></text></g><g><title>rustc_codegen_ssa::back::link::link_natively (9 samples, 0.37%)</title><rect x="91.3026%" y="565" width="0.3675%" height="15" fill="rgb(214,143,50)"/><text x="91.5526%" y="575.50"></text></g><g><title>rustc_codegen_ssa::back::link::exec_linker (9 samples, 0.37%)</title><rect x="91.3026%" y="549" width="0.3675%" height="15" fill="rgb(228,75,8)"/><text x="91.5526%" y="559.50"></text></g><g><title>std::process::Command::spawn (9 samples, 0.37%)</title><rect x="91.3026%" y="533" width="0.3675%" height="15" fill="rgb(207,175,4)"/><text x="91.5526%" y="543.50"></text></g><g><title>std::sys::unix::process::process_inner::&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (9 samples, 0.37%)</title><rect x="91.3026%" y="517" width="0.3675%" height="15" fill="rgb(205,108,24)"/><text x="91.5526%" y="527.50"></text></g><g><title>rustc_interface::queries::Linker::link (10 samples, 0.41%)</title><rect x="91.3026%" y="629" width="0.4083%" height="15" fill="rgb(244,120,49)"/><text x="91.5526%" y="639.50"></text></g><g><title>scoped_tls::ScopedKey&lt;T&gt;::set (11 samples, 0.45%)</title><rect x="91.3026%" y="661" width="0.4492%" height="15" fill="rgb(223,47,38)"/><text x="91.5526%" y="671.50"></text></g><g><title>rustc_span::with_source_map (11 samples, 0.45%)</title><rect x="91.3026%" y="645" width="0.4492%" height="15" fill="rgb(229,179,11)"/><text x="91.5526%" y="655.50"></text></g><g><title>[unknown] (96 samples, 3.92%)</title><rect x="87.9543%" y="677" width="3.9200%" height="15" fill="rgb(231,122,1)"/><text x="88.2043%" y="687.50">[unk..</text></g><g><title>std::sys::unix::thread::guard::current (3 samples, 0.12%)</title><rect x="93.7526%" y="581" width="0.1225%" height="15" fill="rgb(245,119,9)"/><text x="94.0026%" y="591.50"></text></g><g><title>__pthread_getattr_np (3 samples, 0.12%)</title><rect x="93.7526%" y="565" width="0.1225%" height="15" fill="rgb(241,163,25)"/><text x="94.0026%" y="575.50"></text></g><g><title>jobserver::imp::Client::acquire_allow_interrupts (6 samples, 0.24%)</title><rect x="93.9159%" y="549" width="0.2450%" height="15" fill="rgb(217,214,3)"/><text x="94.1659%" y="559.50"></text></g><g><title>__GI___poll (6 samples, 0.24%)</title><rect x="93.9159%" y="533" width="0.2450%" height="15" fill="rgb(240,86,28)"/><text x="94.1659%" y="543.50"></text></g><g><title>jobserver::HelperState::for_each_request (7 samples, 0.29%)</title><rect x="93.9159%" y="565" width="0.2858%" height="15" fill="rgb(215,47,9)"/><text x="94.1659%" y="575.50"></text></g><g><title>rustc_codegen_ssa::back::write::finish_intra_module_work (5 samples, 0.20%)</title><rect x="94.2017%" y="549" width="0.2042%" height="15" fill="rgb(252,25,45)"/><text x="94.4517%" y="559.50"></text></g><g><title>rustc_codegen_llvm::back::write::codegen (5 samples, 0.20%)</title><rect x="94.2017%" y="533" width="0.2042%" height="15" fill="rgb(251,164,9)"/><text x="94.4517%" y="543.50"></text></g><g><title>rustc_codegen_llvm::back::write::write_output_file (5 samples, 0.20%)</title><rect x="94.2017%" y="517" width="0.2042%" height="15" fill="rgb(233,194,0)"/><text x="94.4517%" y="527.50"></text></g><g><title>LLVMRustWriteOutputFile (5 samples, 0.20%)</title><rect x="94.2017%" y="501" width="0.2042%" height="15" fill="rgb(249,111,24)"/><text x="94.4517%" y="511.50"></text></g><g><title>llvm::legacy::PassManagerImpl::run (4 samples, 0.16%)</title><rect x="94.2425%" y="485" width="0.1633%" height="15" fill="rgb(250,223,3)"/><text x="94.4925%" y="495.50"></text></g><g><title>llvm::FPPassManager::runOnModule (3 samples, 0.12%)</title><rect x="94.2834%" y="469" width="0.1225%" height="15" fill="rgb(236,178,37)"/><text x="94.5334%" y="479.50"></text></g><g><title>llvm::FPPassManager::runOnFunction (3 samples, 0.12%)</title><rect x="94.2834%" y="453" width="0.1225%" height="15" fill="rgb(241,158,50)"/><text x="94.5334%" y="463.50"></text></g><g><title>rustc_codegen_ssa::back::write::execute_work_item (6 samples, 0.24%)</title><rect x="94.2017%" y="565" width="0.2450%" height="15" fill="rgb(213,121,41)"/><text x="94.4517%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (19 samples, 0.78%)</title><rect x="93.7526%" y="629" width="0.7758%" height="15" fill="rgb(240,92,3)"/><text x="94.0026%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (19 samples, 0.78%)</title><rect x="93.7526%" y="613" width="0.7758%" height="15" fill="rgb(205,123,3)"/><text x="94.0026%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (19 samples, 0.78%)</title><rect x="93.7526%" y="597" width="0.7758%" height="15" fill="rgb(205,97,47)"/><text x="94.0026%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16 samples, 0.65%)</title><rect x="93.8751%" y="581" width="0.6533%" height="15" fill="rgb(247,152,14)"/><text x="94.1251%" y="591.50"></text></g><g><title>__GI___clone (67 samples, 2.74%)</title><rect x="91.8742%" y="677" width="2.7358%" height="15" fill="rgb(248,195,53)"/><text x="92.1242%" y="687.50">__..</text></g><g><title>start_thread (24 samples, 0.98%)</title><rect x="93.6301%" y="661" width="0.9800%" height="15" fill="rgb(226,201,16)"/><text x="93.8801%" y="671.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (21 samples, 0.86%)</title><rect x="93.7526%" y="645" width="0.8575%" height="15" fill="rgb(205,98,0)"/><text x="94.0026%" y="655.50"></text></g><g><title>_dl_start_user (5 samples, 0.20%)</title><rect x="94.6100%" y="677" width="0.2042%" height="15" fill="rgb(214,191,48)"/><text x="94.8600%" y="687.50"></text></g><g><title>_dl_init (5 samples, 0.20%)</title><rect x="94.6100%" y="661" width="0.2042%" height="15" fill="rgb(237,112,39)"/><text x="94.8600%" y="671.50"></text></g><g><title>call_init.part.0 (5 samples, 0.20%)</title><rect x="94.6100%" y="645" width="0.2042%" height="15" fill="rgb(247,203,27)"/><text x="94.8600%" y="655.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.16%)</title><rect x="94.9367%" y="613" width="0.1633%" height="15" fill="rgb(235,124,28)"/><text x="95.1867%" y="623.50"></text></g><g><title>std::panicking::try (4 samples, 0.16%)</title><rect x="94.9367%" y="597" width="0.1633%" height="15" fill="rgb(208,207,46)"/><text x="95.1867%" y="607.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.16%)</title><rect x="94.9367%" y="581" width="0.1633%" height="15" fill="rgb(234,176,4)"/><text x="95.1867%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4 samples, 0.16%)</title><rect x="94.9367%" y="565" width="0.1633%" height="15" fill="rgb(230,133,28)"/><text x="95.1867%" y="575.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (4 samples, 0.16%)</title><rect x="94.9367%" y="549" width="0.1633%" height="15" fill="rgb(211,137,40)"/><text x="95.1867%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 0.16%)</title><rect x="94.9367%" y="533" width="0.1633%" height="15" fill="rgb(254,35,13)"/><text x="95.1867%" y="543.50"></text></g><g><title>rustc_main::main (4 samples, 0.16%)</title><rect x="94.9367%" y="517" width="0.1633%" height="15" fill="rgb(225,49,51)"/><text x="95.1867%" y="527.50"></text></g><g><title>rustc_driver::main (4 samples, 0.16%)</title><rect x="94.9367%" y="501" width="0.1633%" height="15" fill="rgb(251,10,15)"/><text x="95.1867%" y="511.50"></text></g><g><title>__libc_start_main (6 samples, 0.24%)</title><rect x="94.9367%" y="661" width="0.2450%" height="15" fill="rgb(228,207,15)"/><text x="95.1867%" y="671.50"></text></g><g><title>main (6 samples, 0.24%)</title><rect x="94.9367%" y="645" width="0.2450%" height="15" fill="rgb(241,99,19)"/><text x="95.1867%" y="655.50"></text></g><g><title>std::rt::lang_start_internal (6 samples, 0.24%)</title><rect x="94.9367%" y="629" width="0.2450%" height="15" fill="rgb(207,104,49)"/><text x="95.1867%" y="639.50"></text></g><g><title>__mmap (5 samples, 0.20%)</title><rect x="95.2225%" y="533" width="0.2042%" height="15" fill="rgb(234,99,18)"/><text x="95.4725%" y="543.50"></text></g><g><title>_dl_map_object_from_fd (8 samples, 0.33%)</title><rect x="95.1817%" y="549" width="0.3267%" height="15" fill="rgb(213,191,49)"/><text x="95.4317%" y="559.50"></text></g><g><title>_dl_map_object_deps (10 samples, 0.41%)</title><rect x="95.1817%" y="613" width="0.4083%" height="15" fill="rgb(210,226,19)"/><text x="95.4317%" y="623.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.41%)</title><rect x="95.1817%" y="597" width="0.4083%" height="15" fill="rgb(229,97,18)"/><text x="95.4317%" y="607.50"></text></g><g><title>openaux (10 samples, 0.41%)</title><rect x="95.1817%" y="581" width="0.4083%" height="15" fill="rgb(211,167,15)"/><text x="95.4317%" y="591.50"></text></g><g><title>_dl_map_object (10 samples, 0.41%)</title><rect x="95.1817%" y="565" width="0.4083%" height="15" fill="rgb(210,169,34)"/><text x="95.4317%" y="575.50"></text></g><g><title>_dl_relocate_object (45 samples, 1.84%)</title><rect x="95.5900%" y="613" width="1.8375%" height="15" fill="rgb(241,121,31)"/><text x="95.8400%" y="623.50">_..</text></g><g><title>_dl_lookup_symbol_x (20 samples, 0.82%)</title><rect x="96.6109%" y="597" width="0.8167%" height="15" fill="rgb(232,40,11)"/><text x="96.8609%" y="607.50"></text></g><g><title>do_lookup_x (12 samples, 0.49%)</title><rect x="96.9375%" y="581" width="0.4900%" height="15" fill="rgb(205,86,26)"/><text x="97.1875%" y="591.50"></text></g><g><title>rustc (248 samples, 10.13%)</title><rect x="87.3418%" y="693" width="10.1266%" height="15" fill="rgb(231,126,28)"/><text x="87.5918%" y="703.50">rustc</text></g><g><title>_start (65 samples, 2.65%)</title><rect x="94.8142%" y="677" width="2.6541%" height="15" fill="rgb(219,221,18)"/><text x="95.0642%" y="687.50">_s..</text></g><g><title>_dl_start (56 samples, 2.29%)</title><rect x="95.1817%" y="661" width="2.2866%" height="15" fill="rgb(211,40,0)"/><text x="95.4317%" y="671.50">_..</text></g><g><title>_dl_sysdep_start (56 samples, 2.29%)</title><rect x="95.1817%" y="645" width="2.2866%" height="15" fill="rgb(239,85,43)"/><text x="95.4317%" y="655.50">_..</text></g><g><title>dl_main (56 samples, 2.29%)</title><rect x="95.1817%" y="629" width="2.2866%" height="15" fill="rgb(231,55,21)"/><text x="95.4317%" y="639.50">d..</text></g><g><title>__GI___libc_sigaction (4 samples, 0.16%)</title><rect x="97.5092%" y="645" width="0.1633%" height="15" fill="rgb(225,184,43)"/><text x="97.7592%" y="655.50"></text></g><g><title>__spawni_child (5 samples, 0.20%)</title><rect x="97.5092%" y="661" width="0.2042%" height="15" fill="rgb(251,158,41)"/><text x="97.7592%" y="671.50"></text></g><g><title>racer::matchers::match_use (3 samples, 0.12%)</title><rect x="97.7542%" y="661" width="0.1225%" height="15" fill="rgb(234,159,37)"/><text x="98.0042%" y="671.50"></text></g><g><title>racer::nameres::resolve_name (3 samples, 0.12%)</title><rect x="97.8767%" y="661" width="0.1225%" height="15" fill="rgb(216,204,22)"/><text x="98.1267%" y="671.50"></text></g><g><title>racer::nameres::search_scope (3 samples, 0.12%)</title><rect x="97.8767%" y="645" width="0.1225%" height="15" fill="rgb(214,17,3)"/><text x="98.1267%" y="655.50"></text></g><g><title>racer::nameres::run_matchers_on_blob (3 samples, 0.12%)</title><rect x="97.8767%" y="629" width="0.1225%" height="15" fill="rgb(212,111,17)"/><text x="98.1267%" y="639.50"></text></g><g><title>racer::matchers::match_use (3 samples, 0.12%)</title><rect x="97.8767%" y="613" width="0.1225%" height="15" fill="rgb(221,157,24)"/><text x="98.1267%" y="623.50"></text></g><g><title>racer::nameres::resolve_path (3 samples, 0.12%)</title><rect x="97.8767%" y="597" width="0.1225%" height="15" fill="rgb(252,16,13)"/><text x="98.1267%" y="607.50"></text></g><g><title>racer::nameres::resolve_path (3 samples, 0.12%)</title><rect x="97.8767%" y="581" width="0.1225%" height="15" fill="rgb(221,62,2)"/><text x="98.1267%" y="591.50"></text></g><g><title>racer::nameres::resolve_path (3 samples, 0.12%)</title><rect x="97.8767%" y="565" width="0.1225%" height="15" fill="rgb(247,87,22)"/><text x="98.1267%" y="575.50"></text></g><g><title>racer::nameres::search_scope (3 samples, 0.12%)</title><rect x="98.0400%" y="661" width="0.1225%" height="15" fill="rgb(215,73,9)"/><text x="98.2900%" y="671.50"></text></g><g><title>racer::nameres::run_matchers_on_blob (3 samples, 0.12%)</title><rect x="98.0400%" y="645" width="0.1225%" height="15" fill="rgb(207,175,33)"/><text x="98.2900%" y="655.50"></text></g><g><title>racer::matchers::match_use (3 samples, 0.12%)</title><rect x="98.0400%" y="629" width="0.1225%" height="15" fill="rgb(243,129,54)"/><text x="98.2900%" y="639.50"></text></g><g><title>racer::nameres::resolve_path (3 samples, 0.12%)</title><rect x="98.0400%" y="613" width="0.1225%" height="15" fill="rgb(227,119,45)"/><text x="98.2900%" y="623.50"></text></g><g><title>[unknown] (17 samples, 0.69%)</title><rect x="97.5092%" y="677" width="0.6942%" height="15" fill="rgb(205,109,36)"/><text x="97.7592%" y="687.50"></text></g><g><title>std::sys::unix::cvt_r (13 samples, 0.53%)</title><rect x="99.2650%" y="357" width="0.5308%" height="15" fill="rgb(205,6,39)"/><text x="99.5150%" y="367.50"></text></g><g><title>std::sys::unix::pipe::read2::{{closure}} (13 samples, 0.53%)</title><rect x="99.2650%" y="341" width="0.5308%" height="15" fill="rgb(221,32,16)"/><text x="99.5150%" y="351.50"></text></g><g><title>__GI___poll (13 samples, 0.53%)</title><rect x="99.2650%" y="325" width="0.5308%" height="15" fill="rgb(228,144,50)"/><text x="99.5150%" y="335.50"></text></g><g><title>racer::fileres::search_crate_names (16 samples, 0.65%)</title><rect x="99.2242%" y="501" width="0.6533%" height="15" fill="rgb(229,201,53)"/><text x="99.4742%" y="511.50"></text></g><g><title>&lt;racer::metadata::MetadataCache as racer::project_model::ProjectModelProvider&gt;::discover_project_manifest (16 samples, 0.65%)</title><rect x="99.2242%" y="485" width="0.6533%" height="15" fill="rgb(249,153,27)"/><text x="99.4742%" y="495.50"></text></g><g><title>racer::metadata::MetadataCache::fill (16 samples, 0.65%)</title><rect x="99.2242%" y="469" width="0.6533%" height="15" fill="rgb(227,106,25)"/><text x="99.4742%" y="479.50"></text></g><g><title>racer_cargo_metadata::run (15 samples, 0.61%)</title><rect x="99.2650%" y="453" width="0.6125%" height="15" fill="rgb(230,65,29)"/><text x="99.5150%" y="463.50"></text></g><g><title>std::process::Command::output (15 samples, 0.61%)</title><rect x="99.2650%" y="437" width="0.6125%" height="15" fill="rgb(221,57,46)"/><text x="99.5150%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (15 samples, 0.61%)</title><rect x="99.2650%" y="421" width="0.6125%" height="15" fill="rgb(229,161,17)"/><text x="99.5150%" y="431.50"></text></g><g><title>std::process::Command::output::{{closure}} (15 samples, 0.61%)</title><rect x="99.2650%" y="405" width="0.6125%" height="15" fill="rgb(222,213,11)"/><text x="99.5150%" y="415.50"></text></g><g><title>std::process::Child::wait_with_output (15 samples, 0.61%)</title><rect x="99.2650%" y="389" width="0.6125%" height="15" fill="rgb(235,35,13)"/><text x="99.5150%" y="399.50"></text></g><g><title>std::sys::unix::pipe::read2 (15 samples, 0.61%)</title><rect x="99.2650%" y="373" width="0.6125%" height="15" fill="rgb(233,158,34)"/><text x="99.5150%" y="383.50"></text></g><g><title>all (2,449 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(215,151,48)"/><text x="0.2500%" y="719.50"></text></g><g><title>searcher (62 samples, 2.53%)</title><rect x="97.4684%" y="693" width="2.5316%" height="15" fill="rgb(229,84,14)"/><text x="97.7184%" y="703.50">se..</text></g><g><title>__GI___clone (44 samples, 1.80%)</title><rect x="98.2033%" y="677" width="1.7967%" height="15" fill="rgb(229,68,14)"/><text x="98.4533%" y="687.50">_..</text></g><g><title>start_thread (23 samples, 0.94%)</title><rect x="99.0608%" y="661" width="0.9392%" height="15" fill="rgb(243,106,26)"/><text x="99.3108%" y="671.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (22 samples, 0.90%)</title><rect x="99.1017%" y="645" width="0.8983%" height="15" fill="rgb(206,45,38)"/><text x="99.3517%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22 samples, 0.90%)</title><rect x="99.1017%" y="629" width="0.8983%" height="15" fill="rgb(226,6,15)"/><text x="99.3517%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22 samples, 0.90%)</title><rect x="99.1017%" y="613" width="0.8983%" height="15" fill="rgb(232,22,54)"/><text x="99.3517%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (22 samples, 0.90%)</title><rect x="99.1017%" y="597" width="0.8983%" height="15" fill="rgb(229,222,32)"/><text x="99.3517%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 0.90%)</title><rect x="99.1017%" y="581" width="0.8983%" height="15" fill="rgb(228,62,29)"/><text x="99.3517%" y="591.50"></text></g><g><title>racer::run_the_complete_fn (22 samples, 0.90%)</title><rect x="99.1017%" y="565" width="0.8983%" height="15" fill="rgb(251,103,34)"/><text x="99.3517%" y="575.50"></text></g><g><title>racer::core::complete_from_file_ (22 samples, 0.90%)</title><rect x="99.1017%" y="549" width="0.8983%" height="15" fill="rgb(233,12,30)"/><text x="99.3517%" y="559.50"></text></g><g><title>racer::nameres::resolve_path (22 samples, 0.90%)</title><rect x="99.1017%" y="533" width="0.8983%" height="15" fill="rgb(238,52,0)"/><text x="99.3517%" y="543.50"></text></g><g><title>racer::nameres::resolve_name (22 samples, 0.90%)</title><rect x="99.1017%" y="517" width="0.8983%" height="15" fill="rgb(223,98,5)"/><text x="99.3517%" y="527.50"></text></g><g><title>racer::nameres::search_scope (3 samples, 0.12%)</title><rect x="99.8775%" y="501" width="0.1225%" height="15" fill="rgb(228,75,37)"/><text x="100.1275%" y="511.50"></text></g><g><title>racer::nameres::run_matchers_on_blob (3 samples, 0.12%)</title><rect x="99.8775%" y="485" width="0.1225%" height="15" fill="rgb(205,115,49)"/><text x="100.1275%" y="495.50"></text></g><g><title>racer::matchers::match_use (3 samples, 0.12%)</title><rect x="99.8775%" y="469" width="0.1225%" height="15" fill="rgb(250,154,43)"/><text x="100.1275%" y="479.50"></text></g><g><title>racer::ast::parse_use (3 samples, 0.12%)</title><rect x="99.8775%" y="453" width="0.1225%" height="15" fill="rgb(226,43,29)"/><text x="100.1275%" y="463.50"></text></g><g><title>rustc_ap_rustc_span::SessionGlobals::new (3 samples, 0.12%)</title><rect x="99.8775%" y="437" width="0.1225%" height="15" fill="rgb(249,228,39)"/><text x="100.1275%" y="447.50"></text></g><g><title>rustc_ap_rustc_span::symbol::Interner::fresh (3 samples, 0.12%)</title><rect x="99.8775%" y="421" width="0.1225%" height="15" fill="rgb(216,79,43)"/><text x="100.1275%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (3 samples, 0.12%)</title><rect x="99.8775%" y="405" width="0.1225%" height="15" fill="rgb(228,95,12)"/><text x="100.1275%" y="415.50"></text></g></svg></svg>