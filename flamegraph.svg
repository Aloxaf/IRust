<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (5 samples, 0.18%)</title><rect x="0.0000%" y="789" width="0.1841%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="799.50"></text></g><g><title>[rustup] (5 samples, 0.18%)</title><rect x="0.1841%" y="773" width="0.1841%" height="15" fill="rgb(217,0,24)"/><text x="0.4341%" y="783.50"></text></g><g><title>[[stack]] (6 samples, 0.22%)</title><rect x="0.1841%" y="789" width="0.2209%" height="15" fill="rgb(221,193,54)"/><text x="0.4341%" y="799.50"></text></g><g><title>[rustup] (3 samples, 0.11%)</title><rect x="0.4050%" y="741" width="0.1105%" height="15" fill="rgb(248,212,6)"/><text x="0.6550%" y="751.50"></text></g><g><title>[rustup] (3 samples, 0.11%)</title><rect x="0.4050%" y="725" width="0.1105%" height="15" fill="rgb(208,68,35)"/><text x="0.6550%" y="735.50"></text></g><g><title>[rustup] (3 samples, 0.11%)</title><rect x="0.4050%" y="709" width="0.1105%" height="15" fill="rgb(232,128,0)"/><text x="0.6550%" y="719.50"></text></g><g><title>[rustup] (3 samples, 0.11%)</title><rect x="0.4050%" y="693" width="0.1105%" height="15" fill="rgb(207,160,47)"/><text x="0.6550%" y="703.50"></text></g><g><title>[rustup] (4 samples, 0.15%)</title><rect x="0.4050%" y="789" width="0.1473%" height="15" fill="rgb(228,23,34)"/><text x="0.6550%" y="799.50"></text></g><g><title>__libc_start_main (4 samples, 0.15%)</title><rect x="0.4050%" y="773" width="0.1473%" height="15" fill="rgb(218,30,26)"/><text x="0.6550%" y="783.50"></text></g><g><title>[rustup] (4 samples, 0.15%)</title><rect x="0.4050%" y="757" width="0.1473%" height="15" fill="rgb(220,122,19)"/><text x="0.6550%" y="767.50"></text></g><g><title>[rustup] (3 samples, 0.11%)</title><rect x="3.2032%" y="597" width="0.1105%" height="15" fill="rgb(250,228,42)"/><text x="3.4532%" y="607.50"></text></g><g><title>[rustup] (12 samples, 0.44%)</title><rect x="2.9087%" y="613" width="0.4418%" height="15" fill="rgb(240,193,28)"/><text x="3.1587%" y="623.50"></text></g><g><title>[rustup] (21 samples, 0.77%)</title><rect x="2.6878%" y="629" width="0.7732%" height="15" fill="rgb(216,20,37)"/><text x="2.9378%" y="639.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.11%)</title><rect x="3.4610%" y="629" width="0.1105%" height="15" fill="rgb(206,188,39)"/><text x="3.7110%" y="639.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="3.4610%" y="613" width="0.1105%" height="15" fill="rgb(217,207,13)"/><text x="3.7110%" y="623.50"></text></g><g><title>[rustup] (35 samples, 1.29%)</title><rect x="2.3564%" y="645" width="1.2887%" height="15" fill="rgb(231,73,38)"/><text x="2.6064%" y="655.50"></text></g><g><title>[rustup] (47 samples, 1.73%)</title><rect x="1.9514%" y="661" width="1.7305%" height="15" fill="rgb(225,20,46)"/><text x="2.2014%" y="671.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.11%)</title><rect x="3.7187%" y="661" width="0.1105%" height="15" fill="rgb(210,31,41)"/><text x="3.9687%" y="671.50"></text></g><g><title>_int_realloc (3 samples, 0.11%)</title><rect x="3.7187%" y="645" width="0.1105%" height="15" fill="rgb(221,200,47)"/><text x="3.9687%" y="655.50"></text></g><g><title>[rustup] (74 samples, 2.72%)</title><rect x="1.2518%" y="677" width="2.7246%" height="15" fill="rgb(226,26,5)"/><text x="1.5018%" y="687.50">[r..</text></g><g><title>[rustup] (82 samples, 3.02%)</title><rect x="0.9941%" y="693" width="3.0191%" height="15" fill="rgb(249,33,26)"/><text x="1.2441%" y="703.50">[ru..</text></g><g><title>[rustup] (83 samples, 3.06%)</title><rect x="0.9941%" y="709" width="3.0560%" height="15" fill="rgb(235,183,28)"/><text x="1.2441%" y="719.50">[ru..</text></g><g><title>[rustup] (84 samples, 3.09%)</title><rect x="0.9941%" y="725" width="3.0928%" height="15" fill="rgb(221,5,38)"/><text x="1.2441%" y="735.50">[ru..</text></g><g><title>[rustup] (95 samples, 3.50%)</title><rect x="0.6259%" y="773" width="3.4978%" height="15" fill="rgb(247,18,42)"/><text x="0.8759%" y="783.50">[ru..</text></g><g><title>[rustup] (87 samples, 3.20%)</title><rect x="0.9205%" y="757" width="3.2032%" height="15" fill="rgb(241,131,45)"/><text x="1.1705%" y="767.50">[ru..</text></g><g><title>[rustup] (86 samples, 3.17%)</title><rect x="0.9573%" y="741" width="3.1664%" height="15" fill="rgb(249,31,29)"/><text x="1.2073%" y="751.50">[ru..</text></g><g><title>cargo::core::compiler::job_queue::JobQueue::execute (8 samples, 0.29%)</title><rect x="4.4551%" y="773" width="0.2946%" height="15" fill="rgb(225,111,53)"/><text x="4.7051%" y="783.50"></text></g><g><title>crossbeam_utils::thread::scope (8 samples, 0.29%)</title><rect x="4.4551%" y="757" width="0.2946%" height="15" fill="rgb(238,160,17)"/><text x="4.7051%" y="767.50"></text></g><g><title>std::panic::catch_unwind (8 samples, 0.29%)</title><rect x="4.4551%" y="741" width="0.2946%" height="15" fill="rgb(214,148,48)"/><text x="4.7051%" y="751.50"></text></g><g><title>cargo::core::compiler::job_queue::DrainState::drain_the_queue (8 samples, 0.29%)</title><rect x="4.4551%" y="725" width="0.2946%" height="15" fill="rgb(232,36,49)"/><text x="4.7051%" y="735.50"></text></g><g><title>cargo::util::queue::Queue&lt;T&gt;::pop (8 samples, 0.29%)</title><rect x="4.4551%" y="709" width="0.2946%" height="15" fill="rgb(209,103,24)"/><text x="4.7051%" y="719.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout_while (8 samples, 0.29%)</title><rect x="4.4551%" y="693" width="0.2946%" height="15" fill="rgb(229,88,8)"/><text x="4.7051%" y="703.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait_timeout (8 samples, 0.29%)</title><rect x="4.4551%" y="677" width="0.2946%" height="15" fill="rgb(213,181,19)"/><text x="4.7051%" y="687.50"></text></g><g><title>__pthread_cond_timedwait (8 samples, 0.29%)</title><rect x="4.4551%" y="661" width="0.2946%" height="15" fill="rgb(254,191,54)"/><text x="4.7051%" y="671.50"></text></g><g><title>cargo::main (3 samples, 0.11%)</title><rect x="4.7865%" y="773" width="0.1105%" height="15" fill="rgb(241,83,37)"/><text x="5.0365%" y="783.50"></text></g><g><title>cargo::cli::main (3 samples, 0.11%)</title><rect x="4.7865%" y="757" width="0.1105%" height="15" fill="rgb(233,36,39)"/><text x="5.0365%" y="767.50"></text></g><g><title>[unknown] (125 samples, 4.60%)</title><rect x="0.5523%" y="789" width="4.6024%" height="15" fill="rgb(226,3,54)"/><text x="0.8023%" y="799.50">[unkn..</text></g><g><title>__libc_csu_init (3 samples, 0.11%)</title><rect x="5.5596%" y="757" width="0.1105%" height="15" fill="rgb(245,192,40)"/><text x="5.8096%" y="767.50"></text></g><g><title>curl::init::init_inner (3 samples, 0.11%)</title><rect x="5.5596%" y="741" width="0.1105%" height="15" fill="rgb(238,167,29)"/><text x="5.8096%" y="751.50"></text></g><g><title>std::sync::once::Once::call_inner (3 samples, 0.11%)</title><rect x="5.5596%" y="725" width="0.1105%" height="15" fill="rgb(232,182,51)"/><text x="5.8096%" y="735.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (3 samples, 0.11%)</title><rect x="5.5596%" y="709" width="0.1105%" height="15" fill="rgb(231,60,39)"/><text x="5.8096%" y="719.50"></text></g><g><title>curl_global_init (3 samples, 0.11%)</title><rect x="5.5596%" y="693" width="0.1105%" height="15" fill="rgb(208,69,12)"/><text x="5.8096%" y="703.50"></text></g><g><title>Curl_ossl_init (3 samples, 0.11%)</title><rect x="5.5596%" y="677" width="0.1105%" height="15" fill="rgb(235,93,37)"/><text x="5.8096%" y="687.50"></text></g><g><title>git_libgit2_init (11 samples, 0.41%)</title><rect x="5.6701%" y="501" width="0.4050%" height="15" fill="rgb(213,116,39)"/><text x="5.9201%" y="511.50"></text></g><g><title>__pthread_once_slow (11 samples, 0.41%)</title><rect x="5.6701%" y="485" width="0.4050%" height="15" fill="rgb(222,207,29)"/><text x="5.9201%" y="495.50"></text></g><g><title>init_once (11 samples, 0.41%)</title><rect x="5.6701%" y="469" width="0.4050%" height="15" fill="rgb(206,96,30)"/><text x="5.9201%" y="479.50"></text></g><g><title>git_openssl_stream_global_init (10 samples, 0.37%)</title><rect x="5.7069%" y="453" width="0.3682%" height="15" fill="rgb(218,138,4)"/><text x="5.9569%" y="463.50"></text></g><g><title>X509_STORE_set_default_paths (10 samples, 0.37%)</title><rect x="5.7069%" y="437" width="0.3682%" height="15" fill="rgb(250,191,14)"/><text x="5.9569%" y="447.50"></text></g><g><title>by_file_ctrl (10 samples, 0.37%)</title><rect x="5.7069%" y="421" width="0.3682%" height="15" fill="rgb(239,60,40)"/><text x="5.9569%" y="431.50"></text></g><g><title>X509_load_cert_crl_file (10 samples, 0.37%)</title><rect x="5.7069%" y="405" width="0.3682%" height="15" fill="rgb(206,27,48)"/><text x="5.9569%" y="415.50"></text></g><g><title>PEM_X509_INFO_read_bio (9 samples, 0.33%)</title><rect x="5.7437%" y="389" width="0.3314%" height="15" fill="rgb(225,35,8)"/><text x="5.9937%" y="399.50"></text></g><g><title>PEM_read_bio_ex (8 samples, 0.29%)</title><rect x="5.7806%" y="373" width="0.2946%" height="15" fill="rgb(250,213,24)"/><text x="6.0306%" y="383.50"></text></g><g><title>cargo::cli::main (12 samples, 0.44%)</title><rect x="5.6701%" y="613" width="0.4418%" height="15" fill="rgb(247,123,22)"/><text x="5.9201%" y="623.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (12 samples, 0.44%)</title><rect x="5.6701%" y="597" width="0.4418%" height="15" fill="rgb(231,138,38)"/><text x="5.9201%" y="607.50"></text></g><g><title>cargo::ops::registry::http_proxy (12 samples, 0.44%)</title><rect x="5.6701%" y="581" width="0.4418%" height="15" fill="rgb(231,145,46)"/><text x="5.9201%" y="591.50"></text></g><g><title>git2::config::Config::open_default (12 samples, 0.44%)</title><rect x="5.6701%" y="565" width="0.4418%" height="15" fill="rgb(251,118,11)"/><text x="5.9201%" y="575.50"></text></g><g><title>libgit2_sys::init (12 samples, 0.44%)</title><rect x="5.6701%" y="549" width="0.4418%" height="15" fill="rgb(217,147,25)"/><text x="5.9201%" y="559.50"></text></g><g><title>std::sync::once::Once::call_inner (12 samples, 0.44%)</title><rect x="5.6701%" y="533" width="0.4418%" height="15" fill="rgb(247,81,37)"/><text x="5.9201%" y="543.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (12 samples, 0.44%)</title><rect x="5.6701%" y="517" width="0.4418%" height="15" fill="rgb(209,12,38)"/><text x="5.9201%" y="527.50"></text></g><g><title>__libc_start_main (16 samples, 0.59%)</title><rect x="5.5596%" y="773" width="0.5891%" height="15" fill="rgb(227,1,9)"/><text x="5.8096%" y="783.50"></text></g><g><title>main (13 samples, 0.48%)</title><rect x="5.6701%" y="757" width="0.4786%" height="15" fill="rgb(248,47,43)"/><text x="5.9201%" y="767.50"></text></g><g><title>std::rt::lang_start_internal (13 samples, 0.48%)</title><rect x="5.6701%" y="741" width="0.4786%" height="15" fill="rgb(221,10,30)"/><text x="5.9201%" y="751.50"></text></g><g><title>std::panic::catch_unwind (13 samples, 0.48%)</title><rect x="5.6701%" y="725" width="0.4786%" height="15" fill="rgb(210,229,1)"/><text x="5.9201%" y="735.50"></text></g><g><title>std::panicking::try (13 samples, 0.48%)</title><rect x="5.6701%" y="709" width="0.4786%" height="15" fill="rgb(222,148,37)"/><text x="5.9201%" y="719.50"></text></g><g><title>std::panicking::try::do_call (13 samples, 0.48%)</title><rect x="5.6701%" y="693" width="0.4786%" height="15" fill="rgb(234,67,33)"/><text x="5.9201%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (13 samples, 0.48%)</title><rect x="5.6701%" y="677" width="0.4786%" height="15" fill="rgb(247,98,35)"/><text x="5.9201%" y="687.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (13 samples, 0.48%)</title><rect x="5.6701%" y="661" width="0.4786%" height="15" fill="rgb(247,138,52)"/><text x="5.9201%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 0.48%)</title><rect x="5.6701%" y="645" width="0.4786%" height="15" fill="rgb(213,79,30)"/><text x="5.9201%" y="655.50"></text></g><g><title>cargo::main (13 samples, 0.48%)</title><rect x="5.6701%" y="629" width="0.4786%" height="15" fill="rgb(246,177,23)"/><text x="5.9201%" y="639.50"></text></g><g><title>_dl_map_object_from_fd (4 samples, 0.15%)</title><rect x="6.1856%" y="661" width="0.1473%" height="15" fill="rgb(230,62,27)"/><text x="6.4356%" y="671.50"></text></g><g><title>_dl_map_object_deps (5 samples, 0.18%)</title><rect x="6.1856%" y="725" width="0.1841%" height="15" fill="rgb(216,154,8)"/><text x="6.4356%" y="735.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.18%)</title><rect x="6.1856%" y="709" width="0.1841%" height="15" fill="rgb(244,35,45)"/><text x="6.4356%" y="719.50"></text></g><g><title>openaux (5 samples, 0.18%)</title><rect x="6.1856%" y="693" width="0.1841%" height="15" fill="rgb(251,115,12)"/><text x="6.4356%" y="703.50"></text></g><g><title>_dl_map_object (5 samples, 0.18%)</title><rect x="6.1856%" y="677" width="0.1841%" height="15" fill="rgb(240,54,50)"/><text x="6.4356%" y="687.50"></text></g><g><title>_dl_lookup_symbol_x (5 samples, 0.18%)</title><rect x="6.5169%" y="709" width="0.1841%" height="15" fill="rgb(233,84,52)"/><text x="6.7669%" y="719.50"></text></g><g><title>do_lookup_x (4 samples, 0.15%)</title><rect x="6.5538%" y="693" width="0.1473%" height="15" fill="rgb(207,117,47)"/><text x="6.8038%" y="703.50"></text></g><g><title>_dl_relocate_object (10 samples, 0.37%)</title><rect x="6.3697%" y="725" width="0.3682%" height="15" fill="rgb(249,43,39)"/><text x="6.6197%" y="735.50"></text></g><g><title>cargo (184 samples, 6.77%)</title><rect x="0.0000%" y="805" width="6.7747%" height="15" fill="rgb(209,38,44)"/><text x="0.2500%" y="815.50">cargo</text></g><g><title>_start (42 samples, 1.55%)</title><rect x="5.2283%" y="789" width="1.5464%" height="15" fill="rgb(236,212,23)"/><text x="5.4783%" y="799.50"></text></g><g><title>_dl_start (17 samples, 0.63%)</title><rect x="6.1487%" y="773" width="0.6259%" height="15" fill="rgb(242,79,21)"/><text x="6.3987%" y="783.50"></text></g><g><title>_dl_sysdep_start (16 samples, 0.59%)</title><rect x="6.1856%" y="757" width="0.5891%" height="15" fill="rgb(211,96,35)"/><text x="6.4356%" y="767.50"></text></g><g><title>dl_main (16 samples, 0.59%)</title><rect x="6.1856%" y="741" width="0.5891%" height="15" fill="rgb(253,215,40)"/><text x="6.4356%" y="751.50"></text></g><g><title>[gcc] (3 samples, 0.11%)</title><rect x="6.7747%" y="789" width="0.1105%" height="15" fill="rgb(211,81,21)"/><text x="7.0247%" y="799.50"></text></g><g><title>__libc_start_main (3 samples, 0.11%)</title><rect x="6.7747%" y="773" width="0.1105%" height="15" fill="rgb(208,190,38)"/><text x="7.0247%" y="783.50"></text></g><g><title>[gcc] (3 samples, 0.11%)</title><rect x="6.7747%" y="757" width="0.1105%" height="15" fill="rgb(235,213,38)"/><text x="7.0247%" y="767.50"></text></g><g><title>[gcc] (3 samples, 0.11%)</title><rect x="6.7747%" y="741" width="0.1105%" height="15" fill="rgb(237,122,38)"/><text x="7.0247%" y="751.50"></text></g><g><title>[gcc] (3 samples, 0.11%)</title><rect x="6.7747%" y="725" width="0.1105%" height="15" fill="rgb(244,218,35)"/><text x="7.0247%" y="735.50"></text></g><g><title>[gcc] (3 samples, 0.11%)</title><rect x="6.7747%" y="709" width="0.1105%" height="15" fill="rgb(240,68,47)"/><text x="7.0247%" y="719.50"></text></g><g><title>cc (6 samples, 0.22%)</title><rect x="6.7747%" y="805" width="0.2209%" height="15" fill="rgb(210,16,53)"/><text x="7.0247%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (3 samples, 0.11%)</title><rect x="7.0692%" y="773" width="0.1105%" height="15" fill="rgb(235,124,12)"/><text x="7.3192%" y="783.50"></text></g><g><title>_int_free (4 samples, 0.15%)</title><rect x="7.3270%" y="773" width="0.1473%" height="15" fill="rgb(224,169,11)"/><text x="7.5770%" y="783.50"></text></g><g><title>irust::irust::highlight::catch_all (3 samples, 0.11%)</title><rect x="7.5110%" y="773" width="0.1105%" height="15" fill="rgb(250,166,2)"/><text x="7.7610%" y="783.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_char (3 samples, 0.11%)</title><rect x="7.6215%" y="773" width="0.1105%" height="15" fill="rgb(242,216,29)"/><text x="7.8715%" y="783.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char_with_color (11 samples, 0.41%)</title><rect x="7.7688%" y="773" width="0.4050%" height="15" fill="rgb(230,116,27)"/><text x="8.0188%" y="783.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg (3 samples, 0.11%)</title><rect x="8.0633%" y="757" width="0.1105%" height="15" fill="rgb(228,99,48)"/><text x="8.3133%" y="767.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.11%)</title><rect x="8.0633%" y="741" width="0.1105%" height="15" fill="rgb(253,11,6)"/><text x="8.3133%" y="751.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg::{{closure}} (3 samples, 0.11%)</title><rect x="8.0633%" y="725" width="0.1105%" height="15" fill="rgb(247,143,39)"/><text x="8.3133%" y="735.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (3 samples, 0.11%)</title><rect x="8.0633%" y="709" width="0.1105%" height="15" fill="rgb(236,97,10)"/><text x="8.3133%" y="719.50"></text></g><g><title>[[heap]] (31 samples, 1.14%)</title><rect x="7.0692%" y="789" width="1.1414%" height="15" fill="rgb(233,208,19)"/><text x="7.3192%" y="799.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (3 samples, 0.11%)</title><rect x="8.2106%" y="773" width="0.1105%" height="15" fill="rgb(216,164,2)"/><text x="8.4606%" y="783.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (19 samples, 0.70%)</title><rect x="8.3211%" y="773" width="0.6996%" height="15" fill="rgb(220,129,5)"/><text x="8.5711%" y="783.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (7 samples, 0.26%)</title><rect x="10.6038%" y="725" width="0.2577%" height="15" fill="rgb(242,17,10)"/><text x="10.8538%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (7 samples, 0.26%)</title><rect x="10.6038%" y="709" width="0.2577%" height="15" fill="rgb(242,107,0)"/><text x="10.8538%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.26%)</title><rect x="10.6038%" y="693" width="0.2577%" height="15" fill="rgb(251,28,31)"/><text x="10.8538%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (7 samples, 0.26%)</title><rect x="10.6038%" y="677" width="0.2577%" height="15" fill="rgb(233,223,10)"/><text x="10.8538%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.26%)</title><rect x="10.6038%" y="661" width="0.2577%" height="15" fill="rgb(215,21,27)"/><text x="10.8538%" y="671.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (54 samples, 1.99%)</title><rect x="9.0943%" y="773" width="1.9882%" height="15" fill="rgb(232,23,21)"/><text x="9.3443%" y="783.50">&lt;..</text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (13 samples, 0.48%)</title><rect x="10.6038%" y="757" width="0.4786%" height="15" fill="rgb(244,5,23)"/><text x="10.8538%" y="767.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (13 samples, 0.48%)</title><rect x="10.6038%" y="741" width="0.4786%" height="15" fill="rgb(226,81,46)"/><text x="10.8538%" y="751.50"></text></g><g><title>std::memchr::memrchr (6 samples, 0.22%)</title><rect x="10.8616%" y="725" width="0.2209%" height="15" fill="rgb(247,70,30)"/><text x="11.1116%" y="735.50"></text></g><g><title>std::sys::unix::memchr::memrchr (6 samples, 0.22%)</title><rect x="10.8616%" y="709" width="0.2209%" height="15" fill="rgb(212,68,19)"/><text x="11.1116%" y="719.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (6 samples, 0.22%)</title><rect x="10.8616%" y="693" width="0.2209%" height="15" fill="rgb(240,187,13)"/><text x="11.1116%" y="703.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="11.1929%" y="773" width="0.1105%" height="15" fill="rgb(223,113,26)"/><text x="11.4429%" y="783.50"></text></g><g><title>core::fmt::write (14 samples, 0.52%)</title><rect x="11.3034%" y="773" width="0.5155%" height="15" fill="rgb(206,192,2)"/><text x="11.5534%" y="783.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char_with_color (3 samples, 0.11%)</title><rect x="11.7084%" y="757" width="0.1105%" height="15" fill="rgb(241,108,4)"/><text x="11.9584%" y="767.50"></text></g><g><title>crossterm::command::write_command_ansi (11 samples, 0.41%)</title><rect x="11.8189%" y="773" width="0.4050%" height="15" fill="rgb(247,173,49)"/><text x="12.0689%" y="783.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char_with_color (5 samples, 0.18%)</title><rect x="12.3711%" y="773" width="0.1841%" height="15" fill="rgb(224,114,35)"/><text x="12.6211%" y="783.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.26%)</title><rect x="12.5552%" y="773" width="0.2577%" height="15" fill="rgb(245,159,27)"/><text x="12.8052%" y="783.50"></text></g><g><title>[[stack]] (127 samples, 4.68%)</title><rect x="8.2106%" y="789" width="4.6760%" height="15" fill="rgb(245,172,44)"/><text x="8.4606%" y="799.50">[[sta..</text></g><g><title>[irust] (18 samples, 0.66%)</title><rect x="12.8866%" y="789" width="0.6627%" height="15" fill="rgb(236,23,11)"/><text x="13.1366%" y="799.50"></text></g><g><title>std::io::Write::write_all (15 samples, 0.55%)</title><rect x="12.9971%" y="773" width="0.5523%" height="15" fill="rgb(205,117,38)"/><text x="13.2471%" y="783.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (10 samples, 0.37%)</title><rect x="13.5493%" y="773" width="0.3682%" height="15" fill="rgb(237,72,25)"/><text x="13.7993%" y="783.50"></text></g><g><title>core::fmt::Write::write_char (3 samples, 0.11%)</title><rect x="13.8071%" y="757" width="0.1105%" height="15" fill="rgb(244,70,9)"/><text x="14.0571%" y="767.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.11%)</title><rect x="13.8071%" y="741" width="0.1105%" height="15" fill="rgb(217,125,39)"/><text x="14.0571%" y="751.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.11%)</title><rect x="13.8071%" y="725" width="0.1105%" height="15" fill="rgb(235,36,10)"/><text x="14.0571%" y="735.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (35 samples, 1.29%)</title><rect x="13.9175%" y="773" width="1.2887%" height="15" fill="rgb(251,123,47)"/><text x="14.1675%" y="783.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.22%)</title><rect x="14.9853%" y="757" width="0.2209%" height="15" fill="rgb(221,13,13)"/><text x="15.2353%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (6 samples, 0.22%)</title><rect x="14.9853%" y="741" width="0.2209%" height="15" fill="rgb(238,131,9)"/><text x="15.2353%" y="751.50"></text></g><g><title>__memrchr_sse2 (4 samples, 0.15%)</title><rect x="15.4271%" y="773" width="0.1473%" height="15" fill="rgb(211,50,8)"/><text x="15.6771%" y="783.50"></text></g><g><title>core::fmt::write (16 samples, 0.59%)</title><rect x="15.7585%" y="773" width="0.5891%" height="15" fill="rgb(245,182,24)"/><text x="16.0085%" y="783.50"></text></g><g><title>crossterm::command::write_command_ansi (12 samples, 0.44%)</title><rect x="16.3476%" y="773" width="0.4418%" height="15" fill="rgb(242,14,37)"/><text x="16.5976%" y="783.50"></text></g><g><title>irust::irust::highlight::catch_all (6 samples, 0.22%)</title><rect x="16.8630%" y="773" width="0.2209%" height="15" fill="rgb(246,228,12)"/><text x="17.1130%" y="783.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (3 samples, 0.11%)</title><rect x="17.1944%" y="757" width="0.1105%" height="15" fill="rgb(213,55,15)"/><text x="17.4444%" y="767.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (3 samples, 0.11%)</title><rect x="17.1944%" y="741" width="0.1105%" height="15" fill="rgb(209,9,3)"/><text x="17.4444%" y="751.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (3 samples, 0.11%)</title><rect x="17.1944%" y="725" width="0.1105%" height="15" fill="rgb(230,59,30)"/><text x="17.4444%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (3 samples, 0.11%)</title><rect x="17.1944%" y="709" width="0.1105%" height="15" fill="rgb(209,121,21)"/><text x="17.4444%" y="719.50"></text></g><g><title>irust::irust::highlight::theme::theme_color_to_term_color (6 samples, 0.22%)</title><rect x="17.1576%" y="773" width="0.2209%" height="15" fill="rgb(220,109,13)"/><text x="17.4076%" y="783.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input (4 samples, 0.15%)</title><rect x="17.3785%" y="773" width="0.1473%" height="15" fill="rgb(232,18,1)"/><text x="17.6285%" y="783.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_inner (4 samples, 0.15%)</title><rect x="17.3785%" y="757" width="0.1473%" height="15" fill="rgb(215,41,42)"/><text x="17.6285%" y="767.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_char (12 samples, 0.44%)</title><rect x="17.5258%" y="773" width="0.4418%" height="15" fill="rgb(224,123,36)"/><text x="17.7758%" y="783.50"></text></g><g><title>std::io::Write::write_all (53 samples, 1.95%)</title><rect x="18.0781%" y="773" width="1.9514%" height="15" fill="rgb(240,125,3)"/><text x="18.3281%" y="783.50">s..</text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (6 samples, 0.22%)</title><rect x="19.8085%" y="757" width="0.2209%" height="15" fill="rgb(205,98,50)"/><text x="20.0585%" y="767.50"></text></g><g><title>[unknown] (177 samples, 6.52%)</title><rect x="13.5493%" y="789" width="6.5169%" height="15" fill="rgb(205,185,37)"/><text x="13.7993%" y="799.50">[unknown]</text></g><g><title>__GI___clone (7 samples, 0.26%)</title><rect x="20.0663%" y="789" width="0.2577%" height="15" fill="rgb(238,207,15)"/><text x="20.3163%" y="799.50"></text></g><g><title>irust::irust::history::History::save (4 samples, 0.15%)</title><rect x="20.6186%" y="549" width="0.1473%" height="15" fill="rgb(213,199,42)"/><text x="20.8686%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.18%)</title><rect x="20.6186%" y="597" width="0.1841%" height="15" fill="rgb(235,201,11)"/><text x="20.8686%" y="607.50"></text></g><g><title>&lt;irust::irust::IRust as core::ops::drop::Drop&gt;::drop (5 samples, 0.18%)</title><rect x="20.6186%" y="581" width="0.1841%" height="15" fill="rgb(207,46,11)"/><text x="20.8686%" y="591.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::exit (5 samples, 0.18%)</title><rect x="20.6186%" y="565" width="0.1841%" height="15" fill="rgb(241,35,35)"/><text x="20.8686%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="20.8763%" y="453" width="0.1105%" height="15" fill="rgb(243,32,47)"/><text x="21.1263%" y="463.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="20.8763%" y="437" width="0.1105%" height="15" fill="rgb(247,202,23)"/><text x="21.1263%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (3 samples, 0.11%)</title><rect x="20.8763%" y="421" width="0.1105%" height="15" fill="rgb(219,102,11)"/><text x="21.1263%" y="431.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="20.8763%" y="405" width="0.1105%" height="15" fill="rgb(243,110,44)"/><text x="21.1263%" y="415.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (3 samples, 0.11%)</title><rect x="20.8763%" y="389" width="0.1105%" height="15" fill="rgb(222,74,54)"/><text x="21.1263%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="20.8763%" y="469" width="0.1473%" height="15" fill="rgb(216,99,12)"/><text x="21.1263%" y="479.50"></text></g><g><title>irust::irust::history::History::new (5 samples, 0.18%)</title><rect x="20.8763%" y="581" width="0.1841%" height="15" fill="rgb(226,22,26)"/><text x="21.1263%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.18%)</title><rect x="20.8763%" y="565" width="0.1841%" height="15" fill="rgb(217,163,10)"/><text x="21.1263%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.18%)</title><rect x="20.8763%" y="549" width="0.1841%" height="15" fill="rgb(213,25,53)"/><text x="21.1263%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.18%)</title><rect x="20.8763%" y="533" width="0.1841%" height="15" fill="rgb(252,105,26)"/><text x="21.1263%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.18%)</title><rect x="20.8763%" y="517" width="0.1841%" height="15" fill="rgb(220,39,43)"/><text x="21.1263%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.18%)</title><rect x="20.8763%" y="501" width="0.1841%" height="15" fill="rgb(229,68,48)"/><text x="21.1263%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (5 samples, 0.18%)</title><rect x="20.8763%" y="485" width="0.1841%" height="15" fill="rgb(252,8,32)"/><text x="21.1263%" y="495.50"></text></g><g><title>irust::irust::IRust::new (6 samples, 0.22%)</title><rect x="20.8763%" y="597" width="0.2209%" height="15" fill="rgb(223,20,43)"/><text x="21.1263%" y="607.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (68 samples, 2.50%)</title><rect x="21.1340%" y="565" width="2.5037%" height="15" fill="rgb(229,81,49)"/><text x="21.3840%" y="575.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (68 samples, 2.50%)</title><rect x="21.1340%" y="549" width="2.5037%" height="15" fill="rgb(236,28,36)"/><text x="21.3840%" y="559.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (68 samples, 2.50%)</title><rect x="21.1340%" y="533" width="2.5037%" height="15" fill="rgb(249,185,26)"/><text x="21.3840%" y="543.50">&lt;s..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (68 samples, 2.50%)</title><rect x="21.1340%" y="517" width="2.5037%" height="15" fill="rgb(249,174,33)"/><text x="21.3840%" y="527.50">st..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (67 samples, 2.47%)</title><rect x="21.1708%" y="501" width="2.4669%" height="15" fill="rgb(233,201,37)"/><text x="21.4208%" y="511.50">&lt;s..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (67 samples, 2.47%)</title><rect x="21.1708%" y="485" width="2.4669%" height="15" fill="rgb(221,78,26)"/><text x="21.4208%" y="495.50">&lt;s..</text></g><g><title>std::sys::unix::fd::FileDesc::write (67 samples, 2.47%)</title><rect x="21.1708%" y="469" width="2.4669%" height="15" fill="rgb(250,127,30)"/><text x="21.4208%" y="479.50">st..</text></g><g><title>__GI___libc_write (67 samples, 2.47%)</title><rect x="21.1708%" y="453" width="2.4669%" height="15" fill="rgb(230,49,44)"/><text x="21.4208%" y="463.50">__..</text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::flush (71 samples, 2.61%)</title><rect x="21.1340%" y="581" width="2.6141%" height="15" fill="rgb(229,67,23)"/><text x="21.3840%" y="591.50">&lt;i..</text></g><g><title>&lt;crossterm::event::source::unix::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (4 samples, 0.15%)</title><rect x="23.9691%" y="517" width="0.1473%" height="15" fill="rgb(249,83,47)"/><text x="24.2191%" y="527.50"></text></g><g><title>crossterm::event::read::InternalEventReader::read (14 samples, 0.52%)</title><rect x="23.7482%" y="549" width="0.5155%" height="15" fill="rgb(215,43,3)"/><text x="23.9982%" y="559.50"></text></g><g><title>crossterm::event::read::InternalEventReader::poll (10 samples, 0.37%)</title><rect x="23.8954%" y="533" width="0.3682%" height="15" fill="rgb(238,154,13)"/><text x="24.1454%" y="543.50"></text></g><g><title>crossterm::event::timeout::PollTimeout::new (4 samples, 0.15%)</title><rect x="24.1163%" y="517" width="0.1473%" height="15" fill="rgb(219,56,2)"/><text x="24.3663%" y="527.50"></text></g><g><title>std::time::Instant::now (4 samples, 0.15%)</title><rect x="24.1163%" y="501" width="0.1473%" height="15" fill="rgb(233,0,4)"/><text x="24.3663%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (4 samples, 0.15%)</title><rect x="24.1163%" y="485" width="0.1473%" height="15" fill="rgb(235,30,7)"/><text x="24.3663%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::now (4 samples, 0.15%)</title><rect x="24.1163%" y="469" width="0.1473%" height="15" fill="rgb(250,79,13)"/><text x="24.3663%" y="479.50"></text></g><g><title>__clock_gettime_2 (4 samples, 0.15%)</title><rect x="24.1163%" y="453" width="0.1473%" height="15" fill="rgb(211,146,34)"/><text x="24.3663%" y="463.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.11%)</title><rect x="24.1532%" y="437" width="0.1105%" height="15" fill="rgb(228,22,38)"/><text x="24.4032%" y="447.50"></text></g><g><title>crossterm::event::read (15 samples, 0.55%)</title><rect x="23.7482%" y="581" width="0.5523%" height="15" fill="rgb(235,168,5)"/><text x="23.9982%" y="591.50"></text></g><g><title>crossterm::event::read_internal (15 samples, 0.55%)</title><rect x="23.7482%" y="565" width="0.5523%" height="15" fill="rgb(221,155,16)"/><text x="23.9982%" y="575.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.29%)</title><rect x="25.2946%" y="517" width="0.2946%" height="15" fill="rgb(215,215,53)"/><text x="25.5446%" y="527.50"></text></g><g><title>core::ptr::read (8 samples, 0.29%)</title><rect x="25.2946%" y="501" width="0.2946%" height="15" fill="rgb(223,4,10)"/><text x="25.5446%" y="511.50"></text></g><g><title>irust::irust::highlight::highlight (21 samples, 0.77%)</title><rect x="25.7364%" y="517" width="0.7732%" height="15" fill="rgb(234,103,6)"/><text x="25.9864%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,alloc::vec::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.11%)</title><rect x="27.2459%" y="485" width="0.1105%" height="15" fill="rgb(227,97,0)"/><text x="27.4959%" y="495.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.11%)</title><rect x="27.2459%" y="469" width="0.1105%" height="15" fill="rgb(234,150,53)"/><text x="27.4959%" y="479.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="27.2459%" y="453" width="0.1105%" height="15" fill="rgb(228,201,54)"/><text x="27.4959%" y="463.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.11%)</title><rect x="27.2459%" y="437" width="0.1105%" height="15" fill="rgb(222,22,37)"/><text x="27.4959%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="27.2459%" y="421" width="0.1105%" height="15" fill="rgb(237,53,32)"/><text x="27.4959%" y="431.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.11%)</title><rect x="27.2459%" y="405" width="0.1105%" height="15" fill="rgb(233,25,53)"/><text x="27.4959%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="27.2459%" y="389" width="0.1105%" height="15" fill="rgb(210,40,34)"/><text x="27.4959%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (3 samples, 0.11%)</title><rect x="27.2459%" y="373" width="0.1105%" height="15" fill="rgb(241,220,44)"/><text x="27.4959%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.11%)</title><rect x="27.2459%" y="357" width="0.1105%" height="15" fill="rgb(235,28,35)"/><text x="27.4959%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4 samples, 0.15%)</title><rect x="27.2459%" y="501" width="0.1473%" height="15" fill="rgb(210,56,17)"/><text x="27.4959%" y="511.50"></text></g><g><title>alloc::string::String::push (4 samples, 0.15%)</title><rect x="27.5773%" y="501" width="0.1473%" height="15" fill="rgb(224,130,29)"/><text x="27.8273%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (4 samples, 0.15%)</title><rect x="27.5773%" y="485" width="0.1473%" height="15" fill="rgb(235,212,8)"/><text x="27.8273%" y="495.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.15%)</title><rect x="27.9455%" y="325" width="0.1473%" height="15" fill="rgb(223,33,50)"/><text x="28.1955%" y="335.50"></text></g><g><title>_int_free (3 samples, 0.11%)</title><rect x="28.0928%" y="325" width="0.1105%" height="15" fill="rgb(219,149,13)"/><text x="28.3428%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.66%)</title><rect x="27.9455%" y="421" width="0.6627%" height="15" fill="rgb(250,156,29)"/><text x="28.1955%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (18 samples, 0.66%)</title><rect x="27.9455%" y="405" width="0.6627%" height="15" fill="rgb(216,193,19)"/><text x="28.1955%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (18 samples, 0.66%)</title><rect x="27.9455%" y="389" width="0.6627%" height="15" fill="rgb(216,135,14)"/><text x="28.1955%" y="399.50"></text></g><g><title>alloc::alloc::realloc (18 samples, 0.66%)</title><rect x="27.9455%" y="373" width="0.6627%" height="15" fill="rgb(241,47,5)"/><text x="28.1955%" y="383.50"></text></g><g><title>__GI___libc_realloc (18 samples, 0.66%)</title><rect x="27.9455%" y="357" width="0.6627%" height="15" fill="rgb(233,42,35)"/><text x="28.1955%" y="367.50"></text></g><g><title>_int_realloc (18 samples, 0.66%)</title><rect x="27.9455%" y="341" width="0.6627%" height="15" fill="rgb(231,13,6)"/><text x="28.1955%" y="351.50"></text></g><g><title>_int_malloc (11 samples, 0.41%)</title><rect x="28.2032%" y="325" width="0.4050%" height="15" fill="rgb(207,181,40)"/><text x="28.4532%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (21 samples, 0.77%)</title><rect x="27.8719%" y="437" width="0.7732%" height="15" fill="rgb(254,173,49)"/><text x="28.1219%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (23 samples, 0.85%)</title><rect x="27.8719%" y="485" width="0.8468%" height="15" fill="rgb(221,1,38)"/><text x="28.1219%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 0.85%)</title><rect x="27.8719%" y="469" width="0.8468%" height="15" fill="rgb(206,124,46)"/><text x="28.1219%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (23 samples, 0.85%)</title><rect x="27.8719%" y="453" width="0.8468%" height="15" fill="rgb(249,21,11)"/><text x="28.1219%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (30 samples, 1.10%)</title><rect x="27.7246%" y="501" width="1.1046%" height="15" fill="rgb(222,201,40)"/><text x="27.9746%" y="511.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="28.7187%" y="485" width="0.1105%" height="15" fill="rgb(235,61,29)"/><text x="28.9687%" y="495.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_alphanumeric (3 samples, 0.11%)</title><rect x="28.8292%" y="501" width="0.1105%" height="15" fill="rgb(219,207,3)"/><text x="29.0792%" y="511.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.37%)</title><rect x="29.0501%" y="357" width="0.3682%" height="15" fill="rgb(222,56,46)"/><text x="29.3001%" y="367.50"></text></g><g><title>_int_malloc (6 samples, 0.22%)</title><rect x="29.1973%" y="341" width="0.2209%" height="15" fill="rgb(239,76,54)"/><text x="29.4473%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.44%)</title><rect x="29.0133%" y="373" width="0.4418%" height="15" fill="rgb(231,124,27)"/><text x="29.2633%" y="383.50"></text></g><g><title>alloc::string::String::reserve (13 samples, 0.48%)</title><rect x="29.0133%" y="453" width="0.4786%" height="15" fill="rgb(249,195,6)"/><text x="29.2633%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (13 samples, 0.48%)</title><rect x="29.0133%" y="437" width="0.4786%" height="15" fill="rgb(237,174,47)"/><text x="29.2633%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.48%)</title><rect x="29.0133%" y="421" width="0.4786%" height="15" fill="rgb(206,201,31)"/><text x="29.2633%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (13 samples, 0.48%)</title><rect x="29.0133%" y="405" width="0.4786%" height="15" fill="rgb(231,57,52)"/><text x="29.2633%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.48%)</title><rect x="29.0133%" y="389" width="0.4786%" height="15" fill="rgb(248,177,22)"/><text x="29.2633%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.77%)</title><rect x="28.9396%" y="501" width="0.7732%" height="15" fill="rgb(215,211,37)"/><text x="29.1896%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (21 samples, 0.77%)</title><rect x="28.9396%" y="485" width="0.7732%" height="15" fill="rgb(241,128,51)"/><text x="29.1896%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (20 samples, 0.74%)</title><rect x="28.9764%" y="469" width="0.7364%" height="15" fill="rgb(227,165,31)"/><text x="29.2264%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.22%)</title><rect x="29.4919%" y="453" width="0.2209%" height="15" fill="rgb(228,167,24)"/><text x="29.7419%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.15%)</title><rect x="29.5655%" y="437" width="0.1473%" height="15" fill="rgb(228,143,12)"/><text x="29.8155%" y="447.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (4 samples, 0.15%)</title><rect x="30.2283%" y="453" width="0.1473%" height="15" fill="rgb(249,149,8)"/><text x="30.4783%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (4 samples, 0.15%)</title><rect x="30.2283%" y="437" width="0.1473%" height="15" fill="rgb(243,35,44)"/><text x="30.4783%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (18 samples, 0.66%)</title><rect x="29.7496%" y="501" width="0.6627%" height="15" fill="rgb(246,89,9)"/><text x="29.9996%" y="511.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (18 samples, 0.66%)</title><rect x="29.7496%" y="485" width="0.6627%" height="15" fill="rgb(233,213,13)"/><text x="29.9996%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (18 samples, 0.66%)</title><rect x="29.7496%" y="469" width="0.6627%" height="15" fill="rgb(233,141,41)"/><text x="29.9996%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.26%)</title><rect x="30.4124%" y="485" width="0.2577%" height="15" fill="rgb(239,167,4)"/><text x="30.6624%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.26%)</title><rect x="30.4124%" y="469" width="0.2577%" height="15" fill="rgb(209,217,16)"/><text x="30.6624%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.26%)</title><rect x="30.4124%" y="453" width="0.2577%" height="15" fill="rgb(219,88,35)"/><text x="30.6624%" y="463.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.26%)</title><rect x="30.4124%" y="437" width="0.2577%" height="15" fill="rgb(220,193,23)"/><text x="30.6624%" y="447.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.26%)</title><rect x="30.4124%" y="421" width="0.2577%" height="15" fill="rgb(230,90,52)"/><text x="30.6624%" y="431.50"></text></g><g><title>_int_malloc (4 samples, 0.15%)</title><rect x="30.5228%" y="405" width="0.1473%" height="15" fill="rgb(252,106,19)"/><text x="30.7728%" y="415.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.15%)</title><rect x="30.8910%" y="341" width="0.1473%" height="15" fill="rgb(206,74,20)"/><text x="31.1410%" y="351.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="30.9278%" y="325" width="0.1105%" height="15" fill="rgb(230,138,44)"/><text x="31.1778%" y="335.50"></text></g><g><title>alloc::string::String::reserve (6 samples, 0.22%)</title><rect x="30.8542%" y="437" width="0.2209%" height="15" fill="rgb(235,182,43)"/><text x="31.1042%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (6 samples, 0.22%)</title><rect x="30.8542%" y="421" width="0.2209%" height="15" fill="rgb(242,16,51)"/><text x="31.1042%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.22%)</title><rect x="30.8542%" y="405" width="0.2209%" height="15" fill="rgb(248,9,4)"/><text x="31.1042%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (5 samples, 0.18%)</title><rect x="30.8910%" y="389" width="0.1841%" height="15" fill="rgb(210,31,22)"/><text x="31.1410%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.18%)</title><rect x="30.8910%" y="373" width="0.1841%" height="15" fill="rgb(239,54,39)"/><text x="31.1410%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.18%)</title><rect x="30.8910%" y="357" width="0.1841%" height="15" fill="rgb(230,99,41)"/><text x="31.1410%" y="367.50"></text></g><g><title>&lt;alloc::string::Drain as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="31.0751%" y="405" width="0.1105%" height="15" fill="rgb(253,106,12)"/><text x="31.3251%" y="415.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="31.0751%" y="389" width="0.1105%" height="15" fill="rgb(213,46,41)"/><text x="31.3251%" y="399.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.11%)</title><rect x="31.0751%" y="373" width="0.1105%" height="15" fill="rgb(215,133,35)"/><text x="31.3251%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (16 samples, 0.59%)</title><rect x="30.7437%" y="453" width="0.5891%" height="15" fill="rgb(213,28,5)"/><text x="30.9937%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 0.26%)</title><rect x="31.0751%" y="437" width="0.2577%" height="15" fill="rgb(215,77,49)"/><text x="31.3251%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 0.26%)</title><rect x="31.0751%" y="421" width="0.2577%" height="15" fill="rgb(248,100,22)"/><text x="31.3251%" y="431.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.11%)</title><rect x="31.2224%" y="405" width="0.1105%" height="15" fill="rgb(208,67,9)"/><text x="31.4724%" y="415.50"></text></g><g><title>&lt;alloc::string::Drain as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="31.2224%" y="389" width="0.1105%" height="15" fill="rgb(219,133,21)"/><text x="31.4724%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (17 samples, 0.63%)</title><rect x="30.7437%" y="485" width="0.6259%" height="15" fill="rgb(246,46,29)"/><text x="30.9937%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (17 samples, 0.63%)</title><rect x="30.7437%" y="469" width="0.6259%" height="15" fill="rgb(246,185,52)"/><text x="30.9937%" y="479.50"></text></g><g><title>__GI___libc_free (3 samples, 0.11%)</title><rect x="31.4433%" y="341" width="0.1105%" height="15" fill="rgb(252,136,11)"/><text x="31.6933%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.15%)</title><rect x="31.4433%" y="469" width="0.1473%" height="15" fill="rgb(219,138,53)"/><text x="31.6933%" y="479.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="31.4433%" y="453" width="0.1473%" height="15" fill="rgb(211,51,23)"/><text x="31.6933%" y="463.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.15%)</title><rect x="31.4433%" y="437" width="0.1473%" height="15" fill="rgb(247,221,28)"/><text x="31.6933%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="31.4433%" y="421" width="0.1473%" height="15" fill="rgb(251,222,45)"/><text x="31.6933%" y="431.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.15%)</title><rect x="31.4433%" y="405" width="0.1473%" height="15" fill="rgb(217,162,53)"/><text x="31.6933%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="31.4433%" y="389" width="0.1473%" height="15" fill="rgb(229,93,14)"/><text x="31.6933%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (4 samples, 0.15%)</title><rect x="31.4433%" y="373" width="0.1473%" height="15" fill="rgb(209,67,49)"/><text x="31.6933%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.15%)</title><rect x="31.4433%" y="357" width="0.1473%" height="15" fill="rgb(213,87,29)"/><text x="31.6933%" y="367.50"></text></g><g><title>irust::irust::highlight::is_keyword (3 samples, 0.11%)</title><rect x="31.7378%" y="469" width="0.1105%" height="15" fill="rgb(205,151,52)"/><text x="31.9878%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (3 samples, 0.11%)</title><rect x="31.7378%" y="453" width="0.1105%" height="15" fill="rgb(253,215,39)"/><text x="31.9878%" y="463.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (3 samples, 0.11%)</title><rect x="31.7378%" y="437" width="0.1105%" height="15" fill="rgb(221,220,41)"/><text x="31.9878%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (3 samples, 0.11%)</title><rect x="31.7378%" y="421" width="0.1105%" height="15" fill="rgb(218,133,21)"/><text x="31.9878%" y="431.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (3 samples, 0.11%)</title><rect x="31.7378%" y="405" width="0.1105%" height="15" fill="rgb(221,193,43)"/><text x="31.9878%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.11%)</title><rect x="31.7378%" y="389" width="0.1105%" height="15" fill="rgb(240,128,52)"/><text x="31.9878%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 0.11%)</title><rect x="31.7378%" y="373" width="0.1105%" height="15" fill="rgb(253,114,12)"/><text x="31.9878%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.11%)</title><rect x="31.7378%" y="357" width="0.1105%" height="15" fill="rgb(215,223,47)"/><text x="31.9878%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.11%)</title><rect x="31.7378%" y="341" width="0.1105%" height="15" fill="rgb(248,225,23)"/><text x="31.9878%" y="351.50"></text></g><g><title>irust::irust::highlight::parse (146 samples, 5.38%)</title><rect x="26.5096%" y="517" width="5.3756%" height="15" fill="rgb(250,108,0)"/><text x="26.7596%" y="527.50">irust::..</text></g><g><title>irust::irust::highlight::catch_all (40 samples, 1.47%)</title><rect x="30.4124%" y="501" width="1.4728%" height="15" fill="rgb(228,208,7)"/><text x="30.6624%" y="511.50"></text></g><g><title>irust::irust::highlight::parse_as (14 samples, 0.52%)</title><rect x="31.3697%" y="485" width="0.5155%" height="15" fill="rgb(244,45,10)"/><text x="31.6197%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (4 samples, 0.15%)</title><rect x="32.4006%" y="453" width="0.1473%" height="15" fill="rgb(207,125,25)"/><text x="32.6506%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (8 samples, 0.29%)</title><rect x="32.4006%" y="501" width="0.2946%" height="15" fill="rgb(210,195,18)"/><text x="32.6506%" y="511.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (8 samples, 0.29%)</title><rect x="32.4006%" y="485" width="0.2946%" height="15" fill="rgb(249,80,12)"/><text x="32.6506%" y="495.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (8 samples, 0.29%)</title><rect x="32.4006%" y="469" width="0.2946%" height="15" fill="rgb(221,65,9)"/><text x="32.6506%" y="479.50"></text></g><g><title>irust::irust::highlight::theme::theme_color_to_term_color (4 samples, 0.15%)</title><rect x="32.5479%" y="453" width="0.1473%" height="15" fill="rgb(235,49,36)"/><text x="32.7979%" y="463.50"></text></g><g><title>__memcmp_sse4_1 (9 samples, 0.33%)</title><rect x="32.9529%" y="437" width="0.3314%" height="15" fill="rgb(225,32,20)"/><text x="33.2029%" y="447.50"></text></g><g><title>irust::irust::highlight::theme::theme_color_to_term_color (40 samples, 1.47%)</title><rect x="31.8851%" y="517" width="1.4728%" height="15" fill="rgb(215,141,46)"/><text x="32.1351%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (18 samples, 0.66%)</title><rect x="32.6951%" y="501" width="0.6627%" height="15" fill="rgb(250,160,47)"/><text x="32.9451%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.66%)</title><rect x="32.6951%" y="485" width="0.6627%" height="15" fill="rgb(216,222,40)"/><text x="32.9451%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (18 samples, 0.66%)</title><rect x="32.6951%" y="469" width="0.6627%" height="15" fill="rgb(234,217,39)"/><text x="32.9451%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (18 samples, 0.66%)</title><rect x="32.6951%" y="453" width="0.6627%" height="15" fill="rgb(207,178,40)"/><text x="32.9451%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (4 samples, 0.15%)</title><rect x="33.7261%" y="437" width="0.1473%" height="15" fill="rgb(221,136,13)"/><text x="33.9761%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.15%)</title><rect x="33.7261%" y="421" width="0.1473%" height="15" fill="rgb(249,199,10)"/><text x="33.9761%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (4 samples, 0.15%)</title><rect x="33.7261%" y="405" width="0.1473%" height="15" fill="rgb(249,222,13)"/><text x="33.9761%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.15%)</title><rect x="33.7261%" y="389" width="0.1473%" height="15" fill="rgb(244,185,38)"/><text x="33.9761%" y="399.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.15%)</title><rect x="33.7261%" y="373" width="0.1473%" height="15" fill="rgb(236,202,9)"/><text x="33.9761%" y="383.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.15%)</title><rect x="33.7261%" y="357" width="0.1473%" height="15" fill="rgb(250,229,37)"/><text x="33.9761%" y="367.50"></text></g><g><title>_int_realloc (4 samples, 0.15%)</title><rect x="33.7261%" y="341" width="0.1473%" height="15" fill="rgb(206,174,23)"/><text x="33.9761%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::grow (6 samples, 0.22%)</title><rect x="33.6892%" y="485" width="0.2209%" height="15" fill="rgb(211,33,43)"/><text x="33.9392%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (5 samples, 0.18%)</title><rect x="33.7261%" y="469" width="0.1841%" height="15" fill="rgb(245,58,50)"/><text x="33.9761%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (5 samples, 0.18%)</title><rect x="33.7261%" y="453" width="0.1841%" height="15" fill="rgb(244,68,36)"/><text x="33.9761%" y="463.50"></text></g><g><title>irust::irust::highlight::highlight (263 samples, 9.68%)</title><rect x="24.3373%" y="533" width="9.6834%" height="15" fill="rgb(232,229,15)"/><text x="24.5873%" y="543.50">irust::irust::..</text></g><g><title>irust::irust::printer::PrintQueue::push (18 samples, 0.66%)</title><rect x="33.3579%" y="517" width="0.6627%" height="15" fill="rgb(254,30,23)"/><text x="33.6079%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (14 samples, 0.52%)</title><rect x="33.5052%" y="501" width="0.5155%" height="15" fill="rgb(235,160,14)"/><text x="33.7552%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (3 samples, 0.11%)</title><rect x="33.9102%" y="485" width="0.1105%" height="15" fill="rgb(212,155,44)"/><text x="34.1602%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (3 samples, 0.11%)</title><rect x="33.9102%" y="469" width="0.1105%" height="15" fill="rgb(226,2,50)"/><text x="34.1602%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::count (3 samples, 0.11%)</title><rect x="33.9102%" y="453" width="0.1105%" height="15" fill="rgb(234,177,6)"/><text x="34.1602%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (7 samples, 0.26%)</title><rect x="34.3520%" y="341" width="0.2577%" height="15" fill="rgb(217,24,9)"/><text x="34.6020%" y="351.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::buffer_pos_to_cursor_pos::{{closure}} (7 samples, 0.26%)</title><rect x="34.3520%" y="325" width="0.2577%" height="15" fill="rgb(220,13,46)"/><text x="34.6020%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (11 samples, 0.41%)</title><rect x="34.2415%" y="389" width="0.4050%" height="15" fill="rgb(239,221,27)"/><text x="34.4915%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (8 samples, 0.29%)</title><rect x="34.3520%" y="373" width="0.2946%" height="15" fill="rgb(222,198,25)"/><text x="34.6020%" y="383.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8 samples, 0.29%)</title><rect x="34.3520%" y="357" width="0.2946%" height="15" fill="rgb(211,99,13)"/><text x="34.6020%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (14 samples, 0.52%)</title><rect x="34.2415%" y="501" width="0.5155%" height="15" fill="rgb(232,111,31)"/><text x="34.4915%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (14 samples, 0.52%)</title><rect x="34.2415%" y="485" width="0.5155%" height="15" fill="rgb(245,82,37)"/><text x="34.4915%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (14 samples, 0.52%)</title><rect x="34.2415%" y="469" width="0.5155%" height="15" fill="rgb(227,149,46)"/><text x="34.4915%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.52%)</title><rect x="34.2415%" y="453" width="0.5155%" height="15" fill="rgb(218,36,50)"/><text x="34.4915%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.52%)</title><rect x="34.2415%" y="437" width="0.5155%" height="15" fill="rgb(226,80,48)"/><text x="34.4915%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 0.52%)</title><rect x="34.2415%" y="421" width="0.5155%" height="15" fill="rgb(238,224,15)"/><text x="34.4915%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.52%)</title><rect x="34.2415%" y="405" width="0.5155%" height="15" fill="rgb(241,136,10)"/><text x="34.4915%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="34.6465%" y="389" width="0.1105%" height="15" fill="rgb(208,32,45)"/><text x="34.8965%" y="399.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::check_for_offscreen_render_hack (21 samples, 0.77%)</title><rect x="34.0206%" y="533" width="0.7732%" height="15" fill="rgb(207,135,9)"/><text x="34.2706%" y="543.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::buffer_pos_to_cursor_pos (21 samples, 0.77%)</title><rect x="34.0206%" y="517" width="0.7732%" height="15" fill="rgb(206,86,44)"/><text x="34.2706%" y="527.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input (8 samples, 0.29%)</title><rect x="34.7938%" y="533" width="0.2946%" height="15" fill="rgb(245,177,15)"/><text x="35.0438%" y="543.50"></text></g><g><title>core::ptr::read (4 samples, 0.15%)</title><rect x="35.3093%" y="469" width="0.1473%" height="15" fill="rgb(206,64,50)"/><text x="35.5593%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="35.3461%" y="453" width="0.1105%" height="15" fill="rgb(234,36,40)"/><text x="35.5961%" y="463.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (6 samples, 0.22%)</title><rect x="35.3093%" y="485" width="0.2209%" height="15" fill="rgb(213,64,8)"/><text x="35.5593%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (3 samples, 0.11%)</title><rect x="35.5302%" y="485" width="0.1105%" height="15" fill="rgb(210,75,36)"/><text x="35.7802%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (3 samples, 0.11%)</title><rect x="35.6406%" y="469" width="0.1105%" height="15" fill="rgb(229,88,21)"/><text x="35.8906%" y="479.50"></text></g><g><title>&lt;irust::irust::printer::PrintQueue as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.55%)</title><rect x="35.2356%" y="517" width="0.5523%" height="15" fill="rgb(252,204,47)"/><text x="35.4856%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (15 samples, 0.55%)</title><rect x="35.2356%" y="501" width="0.5523%" height="15" fill="rgb(208,77,27)"/><text x="35.4856%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (4 samples, 0.15%)</title><rect x="35.6406%" y="485" width="0.1473%" height="15" fill="rgb(221,76,26)"/><text x="35.8906%" y="495.50"></text></g><g><title>__GI___libc_free (7 samples, 0.26%)</title><rect x="35.8247%" y="421" width="0.2577%" height="15" fill="rgb(225,139,18)"/><text x="36.0747%" y="431.50"></text></g><g><title>__rust_dealloc (3 samples, 0.11%)</title><rect x="36.0825%" y="421" width="0.1105%" height="15" fill="rgb(230,137,11)"/><text x="36.3325%" y="431.50"></text></g><g><title>core::ptr::drop_in_place (28 samples, 1.03%)</title><rect x="35.7879%" y="517" width="1.0309%" height="15" fill="rgb(212,28,1)"/><text x="36.0379%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (28 samples, 1.03%)</title><rect x="35.7879%" y="501" width="1.0309%" height="15" fill="rgb(248,164,17)"/><text x="36.0379%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.99%)</title><rect x="35.8247%" y="485" width="0.9941%" height="15" fill="rgb(222,171,42)"/><text x="36.0747%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.99%)</title><rect x="35.8247%" y="469" width="0.9941%" height="15" fill="rgb(243,84,45)"/><text x="36.0747%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (27 samples, 0.99%)</title><rect x="35.8247%" y="453" width="0.9941%" height="15" fill="rgb(252,49,23)"/><text x="36.0747%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.99%)</title><rect x="35.8247%" y="437" width="0.9941%" height="15" fill="rgb(215,19,7)"/><text x="36.0747%" y="447.50"></text></g><g><title>_int_free (17 samples, 0.63%)</title><rect x="36.1929%" y="421" width="0.6259%" height="15" fill="rgb(238,81,41)"/><text x="36.4429%" y="431.50"></text></g><g><title>malloc_consolidate (4 samples, 0.15%)</title><rect x="36.6716%" y="405" width="0.1473%" height="15" fill="rgb(210,199,37)"/><text x="36.9216%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.11%)</title><rect x="37.2607%" y="501" width="0.1105%" height="15" fill="rgb(244,192,49)"/><text x="37.5107%" y="511.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::is_at_last_terminal_col (3 samples, 0.11%)</title><rect x="37.3711%" y="501" width="0.1105%" height="15" fill="rgb(226,211,11)"/><text x="37.6211%" y="511.50"></text></g><g><title>&lt;crossterm::style::types::color::Color as core::cmp::PartialEq&gt;::ne (3 samples, 0.11%)</title><rect x="37.7025%" y="469" width="0.1105%" height="15" fill="rgb(236,162,54)"/><text x="37.9525%" y="479.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (8 samples, 0.29%)</title><rect x="37.5920%" y="485" width="0.2946%" height="15" fill="rgb(220,229,9)"/><text x="37.8420%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.11%)</title><rect x="38.1443%" y="437" width="0.1105%" height="15" fill="rgb(250,87,22)"/><text x="38.3943%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.11%)</title><rect x="40.1694%" y="117" width="0.1105%" height="15" fill="rgb(239,43,17)"/><text x="40.4194%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.11%)</title><rect x="40.1694%" y="101" width="0.1105%" height="15" fill="rgb(231,177,25)"/><text x="40.4194%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.11%)</title><rect x="40.1694%" y="85" width="0.1105%" height="15" fill="rgb(219,179,1)"/><text x="40.4194%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (3 samples, 0.11%)</title><rect x="40.1694%" y="69" width="0.1105%" height="15" fill="rgb(238,219,53)"/><text x="40.4194%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.11%)</title><rect x="40.1694%" y="53" width="0.1105%" height="15" fill="rgb(232,167,36)"/><text x="40.4194%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.22%)</title><rect x="40.2798%" y="117" width="0.2209%" height="15" fill="rgb(244,19,51)"/><text x="40.5298%" y="127.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.18%)</title><rect x="40.3166%" y="101" width="0.1841%" height="15" fill="rgb(224,6,22)"/><text x="40.5666%" y="111.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (16 samples, 0.59%)</title><rect x="39.9853%" y="181" width="0.5891%" height="15" fill="rgb(224,145,5)"/><text x="40.2353%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (13 samples, 0.48%)</title><rect x="40.0957%" y="165" width="0.4786%" height="15" fill="rgb(234,130,49)"/><text x="40.3457%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (13 samples, 0.48%)</title><rect x="40.0957%" y="149" width="0.4786%" height="15" fill="rgb(254,6,2)"/><text x="40.3457%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (13 samples, 0.48%)</title><rect x="40.0957%" y="133" width="0.4786%" height="15" fill="rgb(208,96,46)"/><text x="40.3457%" y="143.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (5 samples, 0.18%)</title><rect x="40.5744%" y="181" width="0.1841%" height="15" fill="rgb(239,3,39)"/><text x="40.8244%" y="191.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (5 samples, 0.18%)</title><rect x="40.5744%" y="165" width="0.1841%" height="15" fill="rgb(233,210,1)"/><text x="40.8244%" y="175.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (5 samples, 0.18%)</title><rect x="40.5744%" y="149" width="0.1841%" height="15" fill="rgb(244,137,37)"/><text x="40.8244%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.18%)</title><rect x="40.5744%" y="133" width="0.1841%" height="15" fill="rgb(240,136,2)"/><text x="40.8244%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (5 samples, 0.18%)</title><rect x="40.5744%" y="117" width="0.1841%" height="15" fill="rgb(239,18,37)"/><text x="40.8244%" y="127.50"></text></g><g><title>__memrchr_sse2 (11 samples, 0.41%)</title><rect x="40.8321%" y="133" width="0.4050%" height="15" fill="rgb(218,185,22)"/><text x="41.0821%" y="143.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (35 samples, 1.29%)</title><rect x="39.9853%" y="197" width="1.2887%" height="15" fill="rgb(225,218,4)"/><text x="40.2353%" y="207.50"></text></g><g><title>std::memchr::memrchr (14 samples, 0.52%)</title><rect x="40.7585%" y="181" width="0.5155%" height="15" fill="rgb(230,182,32)"/><text x="41.0085%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr (14 samples, 0.52%)</title><rect x="40.7585%" y="165" width="0.5155%" height="15" fill="rgb(242,56,43)"/><text x="41.0085%" y="175.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (14 samples, 0.52%)</title><rect x="40.7585%" y="149" width="0.5155%" height="15" fill="rgb(233,99,24)"/><text x="41.0085%" y="159.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (36 samples, 1.33%)</title><rect x="39.9853%" y="213" width="1.3255%" height="15" fill="rgb(234,209,42)"/><text x="40.2353%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (40 samples, 1.47%)</title><rect x="39.9116%" y="229" width="1.4728%" height="15" fill="rgb(227,7,12)"/><text x="40.1616%" y="239.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (45 samples, 1.66%)</title><rect x="39.9116%" y="245" width="1.6568%" height="15" fill="rgb(245,203,43)"/><text x="40.1616%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.11%)</title><rect x="41.4580%" y="229" width="0.1105%" height="15" fill="rgb(238,205,33)"/><text x="41.7080%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.11%)</title><rect x="41.4580%" y="213" width="0.1105%" height="15" fill="rgb(231,56,7)"/><text x="41.7080%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="41.4580%" y="197" width="0.1105%" height="15" fill="rgb(244,186,29)"/><text x="41.7080%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.11%)</title><rect x="41.4580%" y="181" width="0.1105%" height="15" fill="rgb(234,111,31)"/><text x="41.7080%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.11%)</title><rect x="41.4580%" y="165" width="0.1105%" height="15" fill="rgb(241,149,10)"/><text x="41.7080%" y="175.50"></text></g><g><title>core::mem::replace (3 samples, 0.11%)</title><rect x="41.4580%" y="149" width="0.1105%" height="15" fill="rgb(249,206,44)"/><text x="41.7080%" y="159.50"></text></g><g><title>core::mem::swap (3 samples, 0.11%)</title><rect x="41.4580%" y="133" width="0.1105%" height="15" fill="rgb(251,153,30)"/><text x="41.7080%" y="143.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (3 samples, 0.11%)</title><rect x="41.4580%" y="117" width="0.1105%" height="15" fill="rgb(239,152,38)"/><text x="41.7080%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="41.4580%" y="101" width="0.1105%" height="15" fill="rgb(249,139,47)"/><text x="41.7080%" y="111.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (53 samples, 1.95%)</title><rect x="39.6907%" y="293" width="1.9514%" height="15" fill="rgb(244,64,35)"/><text x="39.9407%" y="303.50">&lt;..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (53 samples, 1.95%)</title><rect x="39.6907%" y="277" width="1.9514%" height="15" fill="rgb(216,46,15)"/><text x="39.9407%" y="287.50">s..</text></g><g><title>std::io::Write::write_all (53 samples, 1.95%)</title><rect x="39.6907%" y="261" width="1.9514%" height="15" fill="rgb(250,74,19)"/><text x="39.9407%" y="271.50">s..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (56 samples, 2.06%)</title><rect x="39.6171%" y="325" width="2.0619%" height="15" fill="rgb(249,42,33)"/><text x="39.8671%" y="335.50">&lt;..</text></g><g><title>core::fmt::Write::write_char (55 samples, 2.03%)</title><rect x="39.6539%" y="309" width="2.0250%" height="15" fill="rgb(242,149,17)"/><text x="39.9039%" y="319.50">c..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.15%)</title><rect x="41.6789%" y="309" width="0.1473%" height="15" fill="rgb(244,29,21)"/><text x="41.9289%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.33%)</title><rect x="41.6789%" y="325" width="0.3314%" height="15" fill="rgb(220,130,37)"/><text x="41.9289%" y="335.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.18%)</title><rect x="41.8262%" y="309" width="0.1841%" height="15" fill="rgb(211,67,2)"/><text x="42.0762%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 samples, 0.18%)</title><rect x="41.8262%" y="293" width="0.1841%" height="15" fill="rgb(235,68,52)"/><text x="42.0762%" y="303.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.18%)</title><rect x="41.8262%" y="277" width="0.1841%" height="15" fill="rgb(246,142,3)"/><text x="42.0762%" y="287.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (4 samples, 0.15%)</title><rect x="42.0103%" y="325" width="0.1473%" height="15" fill="rgb(241,25,7)"/><text x="42.2603%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="42.1576%" y="325" width="0.1105%" height="15" fill="rgb(242,119,39)"/><text x="42.4076%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (3 samples, 0.11%)</title><rect x="42.1576%" y="309" width="0.1105%" height="15" fill="rgb(241,98,45)"/><text x="42.4076%" y="319.50"></text></g><g><title>&lt;crossterm::style::Print&lt;T&gt; as crossterm::command::Command&gt;::write_ansi (109 samples, 4.01%)</title><rect x="38.3652%" y="373" width="4.0133%" height="15" fill="rgb(254,28,30)"/><text x="38.6152%" y="383.50">&lt;cro..</text></g><g><title>core::fmt::Write::write_fmt (104 samples, 3.83%)</title><rect x="38.5493%" y="357" width="3.8292%" height="15" fill="rgb(241,142,54)"/><text x="38.7993%" y="367.50">core..</text></g><g><title>core::fmt::write (96 samples, 3.53%)</title><rect x="38.8439%" y="341" width="3.5346%" height="15" fill="rgb(222,85,15)"/><text x="39.0939%" y="351.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::zip (3 samples, 0.11%)</title><rect x="42.2680%" y="325" width="0.1105%" height="15" fill="rgb(210,85,47)"/><text x="42.5180%" y="335.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (3 samples, 0.11%)</title><rect x="42.2680%" y="309" width="0.1105%" height="15" fill="rgb(224,206,25)"/><text x="42.5180%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (3 samples, 0.11%)</title><rect x="42.2680%" y="293" width="0.1105%" height="15" fill="rgb(243,201,19)"/><text x="42.5180%" y="303.50"></text></g><g><title>core::cmp::min (3 samples, 0.11%)</title><rect x="42.2680%" y="277" width="0.1105%" height="15" fill="rgb(236,59,4)"/><text x="42.5180%" y="287.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.11%)</title><rect x="42.2680%" y="261" width="0.1105%" height="15" fill="rgb(254,179,45)"/><text x="42.5180%" y="271.50"></text></g><g><title>core::fmt::write (3 samples, 0.11%)</title><rect x="42.2680%" y="245" width="0.1105%" height="15" fill="rgb(226,14,10)"/><text x="42.5180%" y="255.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char (127 samples, 4.68%)</title><rect x="37.8866%" y="485" width="4.6760%" height="15" fill="rgb(244,27,41)"/><text x="38.1366%" y="495.50">irust..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::write (120 samples, 4.42%)</title><rect x="38.1443%" y="469" width="4.4183%" height="15" fill="rgb(235,35,32)"/><text x="38.3943%" y="479.50">irust..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write (120 samples, 4.42%)</title><rect x="38.1443%" y="453" width="4.4183%" height="15" fill="rgb(218,68,31)"/><text x="38.3943%" y="463.50">irust..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (117 samples, 4.31%)</title><rect x="38.2548%" y="437" width="4.3078%" height="15" fill="rgb(207,120,37)"/><text x="38.5048%" y="447.50">core:..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write::{{closure}} (117 samples, 4.31%)</title><rect x="38.2548%" y="421" width="4.3078%" height="15" fill="rgb(227,98,0)"/><text x="38.5048%" y="431.50">irust..</text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (117 samples, 4.31%)</title><rect x="38.2548%" y="405" width="4.3078%" height="15" fill="rgb(207,7,3)"/><text x="38.5048%" y="415.50">&lt;T as..</text></g><g><title>crossterm::command::write_command_ansi (117 samples, 4.31%)</title><rect x="38.2548%" y="389" width="4.3078%" height="15" fill="rgb(206,98,19)"/><text x="38.5048%" y="399.50">cross..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5 samples, 0.18%)</title><rect x="42.3785%" y="373" width="0.1841%" height="15" fill="rgb(217,5,26)"/><text x="42.6285%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.15%)</title><rect x="42.4153%" y="357" width="0.1473%" height="15" fill="rgb(235,190,38)"/><text x="42.6653%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.15%)</title><rect x="42.4153%" y="341" width="0.1473%" height="15" fill="rgb(247,86,24)"/><text x="42.6653%" y="351.50"></text></g><g><title>crossterm::command::write_command_ansi (4 samples, 0.15%)</title><rect x="42.4153%" y="325" width="0.1473%" height="15" fill="rgb(205,101,16)"/><text x="42.6653%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.18%)</title><rect x="43.5199%" y="325" width="0.1841%" height="15" fill="rgb(246,168,33)"/><text x="43.7699%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.41%)</title><rect x="44.5508%" y="149" width="0.4050%" height="15" fill="rgb(231,114,1)"/><text x="44.8008%" y="159.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (8 samples, 0.29%)</title><rect x="44.6613%" y="133" width="0.2946%" height="15" fill="rgb(207,184,53)"/><text x="44.9113%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (16 samples, 0.59%)</title><rect x="44.4404%" y="197" width="0.5891%" height="15" fill="rgb(224,95,51)"/><text x="44.6904%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.59%)</title><rect x="44.4404%" y="181" width="0.5891%" height="15" fill="rgb(212,188,45)"/><text x="44.6904%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (16 samples, 0.59%)</title><rect x="44.4404%" y="165" width="0.5891%" height="15" fill="rgb(223,154,38)"/><text x="44.6904%" y="175.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (19 samples, 0.70%)</title><rect x="44.4035%" y="213" width="0.6996%" height="15" fill="rgb(251,22,52)"/><text x="44.6535%" y="223.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (6 samples, 0.22%)</title><rect x="45.1031%" y="213" width="0.2209%" height="15" fill="rgb(229,209,22)"/><text x="45.3531%" y="223.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (6 samples, 0.22%)</title><rect x="45.1031%" y="197" width="0.2209%" height="15" fill="rgb(234,138,34)"/><text x="45.3531%" y="207.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (6 samples, 0.22%)</title><rect x="45.1031%" y="181" width="0.2209%" height="15" fill="rgb(212,95,11)"/><text x="45.3531%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.22%)</title><rect x="45.1031%" y="165" width="0.2209%" height="15" fill="rgb(240,179,47)"/><text x="45.3531%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (5 samples, 0.18%)</title><rect x="45.1399%" y="149" width="0.1841%" height="15" fill="rgb(240,163,11)"/><text x="45.3899%" y="159.50"></text></g><g><title>__memrchr_sse2 (25 samples, 0.92%)</title><rect x="45.4345%" y="165" width="0.9205%" height="15" fill="rgb(236,37,12)"/><text x="45.6845%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (55 samples, 2.03%)</title><rect x="44.4035%" y="229" width="2.0250%" height="15" fill="rgb(232,164,16)"/><text x="44.6535%" y="239.50">&lt;..</text></g><g><title>std::memchr::memrchr (30 samples, 1.10%)</title><rect x="45.3240%" y="213" width="1.1046%" height="15" fill="rgb(244,205,15)"/><text x="45.5740%" y="223.50"></text></g><g><title>std::sys::unix::memchr::memrchr (30 samples, 1.10%)</title><rect x="45.3240%" y="197" width="1.1046%" height="15" fill="rgb(223,117,47)"/><text x="45.5740%" y="207.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (30 samples, 1.10%)</title><rect x="45.3240%" y="181" width="1.1046%" height="15" fill="rgb(244,107,35)"/><text x="45.5740%" y="191.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (56 samples, 2.06%)</title><rect x="44.4035%" y="245" width="2.0619%" height="15" fill="rgb(205,140,8)"/><text x="44.6535%" y="255.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (68 samples, 2.50%)</title><rect x="44.1826%" y="261" width="2.5037%" height="15" fill="rgb(228,84,46)"/><text x="44.4326%" y="271.50">&lt;s..</text></g><g><title>core::ptr::drop_in_place (4 samples, 0.15%)</title><rect x="46.5390%" y="245" width="0.1473%" height="15" fill="rgb(254,188,9)"/><text x="46.7890%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.15%)</title><rect x="46.5390%" y="229" width="0.1473%" height="15" fill="rgb(206,112,54)"/><text x="46.7890%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="46.5390%" y="213" width="0.1473%" height="15" fill="rgb(216,84,49)"/><text x="46.7890%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.15%)</title><rect x="46.5390%" y="197" width="0.1473%" height="15" fill="rgb(214,194,35)"/><text x="46.7890%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (4 samples, 0.15%)</title><rect x="46.5390%" y="181" width="0.1473%" height="15" fill="rgb(249,28,3)"/><text x="46.7890%" y="191.50"></text></g><g><title>core::mem::replace (4 samples, 0.15%)</title><rect x="46.5390%" y="165" width="0.1473%" height="15" fill="rgb(222,56,52)"/><text x="46.7890%" y="175.50"></text></g><g><title>core::mem::swap (4 samples, 0.15%)</title><rect x="46.5390%" y="149" width="0.1473%" height="15" fill="rgb(245,217,50)"/><text x="46.7890%" y="159.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (4 samples, 0.15%)</title><rect x="46.5390%" y="133" width="0.1473%" height="15" fill="rgb(213,201,24)"/><text x="46.7890%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.15%)</title><rect x="46.5390%" y="117" width="0.1473%" height="15" fill="rgb(248,116,28)"/><text x="46.7890%" y="127.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (7 samples, 0.26%)</title><rect x="46.6863%" y="261" width="0.2577%" height="15" fill="rgb(219,72,43)"/><text x="46.9363%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (7 samples, 0.26%)</title><rect x="46.6863%" y="245" width="0.2577%" height="15" fill="rgb(209,138,14)"/><text x="46.9363%" y="255.50"></text></g><g><title>core::cell::BorrowRefMut::new (7 samples, 0.26%)</title><rect x="46.6863%" y="229" width="0.2577%" height="15" fill="rgb(222,18,33)"/><text x="46.9363%" y="239.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (78 samples, 2.87%)</title><rect x="44.1458%" y="277" width="2.8719%" height="15" fill="rgb(213,199,7)"/><text x="44.3958%" y="287.50">&lt;i..</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (5 samples, 0.18%)</title><rect x="47.0177%" y="277" width="0.1841%" height="15" fill="rgb(250,110,10)"/><text x="47.2677%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (105 samples, 3.87%)</title><rect x="43.4462%" y="341" width="3.8660%" height="15" fill="rgb(248,123,6)"/><text x="43.6962%" y="351.50">&lt;&amp;mu..</text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (98 samples, 3.61%)</title><rect x="43.7040%" y="325" width="3.6082%" height="15" fill="rgb(206,91,31)"/><text x="43.9540%" y="335.50">&lt;cro..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (95 samples, 3.50%)</title><rect x="43.8144%" y="309" width="3.4978%" height="15" fill="rgb(211,154,13)"/><text x="44.0644%" y="319.50">std..</text></g><g><title>std::io::Write::write_all (95 samples, 3.50%)</title><rect x="43.8144%" y="293" width="3.4978%" height="15" fill="rgb(225,148,7)"/><text x="44.0644%" y="303.50">std..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.11%)</title><rect x="47.2018%" y="277" width="0.1105%" height="15" fill="rgb(220,160,43)"/><text x="47.4518%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.11%)</title><rect x="47.2018%" y="261" width="0.1105%" height="15" fill="rgb(213,52,39)"/><text x="47.4518%" y="271.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (7 samples, 0.26%)</title><rect x="48.0854%" y="197" width="0.2577%" height="15" fill="rgb(243,137,7)"/><text x="48.3354%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.18%)</title><rect x="48.1591%" y="181" width="0.1841%" height="15" fill="rgb(230,79,13)"/><text x="48.4091%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.18%)</title><rect x="48.1591%" y="165" width="0.1841%" height="15" fill="rgb(247,105,23)"/><text x="48.4091%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.18%)</title><rect x="48.1591%" y="149" width="0.1841%" height="15" fill="rgb(223,179,41)"/><text x="48.4091%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.15%)</title><rect x="48.1959%" y="133" width="0.1473%" height="15" fill="rgb(218,9,34)"/><text x="48.4459%" y="143.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.15%)</title><rect x="48.1959%" y="117" width="0.1473%" height="15" fill="rgb(222,106,8)"/><text x="48.4459%" y="127.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (17 samples, 0.63%)</title><rect x="48.0854%" y="229" width="0.6259%" height="15" fill="rgb(211,220,0)"/><text x="48.3354%" y="239.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (17 samples, 0.63%)</title><rect x="48.0854%" y="213" width="0.6259%" height="15" fill="rgb(229,52,16)"/><text x="48.3354%" y="223.50"></text></g><g><title>std::memchr::memrchr (8 samples, 0.29%)</title><rect x="48.4168%" y="197" width="0.2946%" height="15" fill="rgb(212,155,18)"/><text x="48.6668%" y="207.50"></text></g><g><title>std::sys::unix::memchr::memrchr (8 samples, 0.29%)</title><rect x="48.4168%" y="181" width="0.2946%" height="15" fill="rgb(242,21,14)"/><text x="48.6668%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (8 samples, 0.29%)</title><rect x="48.4168%" y="165" width="0.2946%" height="15" fill="rgb(222,19,48)"/><text x="48.6668%" y="175.50"></text></g><g><title>__memrchr_sse2 (5 samples, 0.18%)</title><rect x="48.5272%" y="149" width="0.1841%" height="15" fill="rgb(232,45,27)"/><text x="48.7772%" y="159.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (21 samples, 0.77%)</title><rect x="48.0118%" y="245" width="0.7732%" height="15" fill="rgb(249,103,42)"/><text x="48.2618%" y="255.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (22 samples, 0.81%)</title><rect x="48.0118%" y="261" width="0.8100%" height="15" fill="rgb(246,81,33)"/><text x="48.2618%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (32 samples, 1.18%)</title><rect x="47.7541%" y="325" width="1.1782%" height="15" fill="rgb(252,33,42)"/><text x="48.0041%" y="335.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (31 samples, 1.14%)</title><rect x="47.7909%" y="309" width="1.1414%" height="15" fill="rgb(209,212,41)"/><text x="48.0409%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (30 samples, 1.10%)</title><rect x="47.8277%" y="293" width="1.1046%" height="15" fill="rgb(207,154,6)"/><text x="48.0777%" y="303.50"></text></g><g><title>std::io::Write::write_all (30 samples, 1.10%)</title><rect x="47.8277%" y="277" width="1.1046%" height="15" fill="rgb(223,64,47)"/><text x="48.0777%" y="287.50"></text></g><g><title>&lt;crossterm::style::SetForegroundColor as crossterm::command::Command&gt;::write_ansi (172 samples, 6.33%)</title><rect x="42.6730%" y="405" width="6.3328%" height="15" fill="rgb(211,161,38)"/><text x="42.9230%" y="415.50">&lt;crosste..</text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (172 samples, 6.33%)</title><rect x="42.6730%" y="389" width="6.3328%" height="15" fill="rgb(219,138,40)"/><text x="42.9230%" y="399.50">crosster..</text></g><g><title>core::fmt::Write::write_fmt (170 samples, 6.26%)</title><rect x="42.7467%" y="373" width="6.2592%" height="15" fill="rgb(241,228,46)"/><text x="42.9967%" y="383.50">core::fm..</text></g><g><title>core::fmt::write (164 samples, 6.04%)</title><rect x="42.9676%" y="357" width="6.0383%" height="15" fill="rgb(223,209,38)"/><text x="43.2176%" y="367.50">core::fm..</text></g><g><title>crossterm::style::ansi::&lt;impl core::fmt::Display for crossterm::style::types::colored::Colored&gt;::fmt (41 samples, 1.51%)</title><rect x="47.4963%" y="341" width="1.5096%" height="15" fill="rgb(236,164,45)"/><text x="47.7463%" y="351.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_char (333 samples, 12.26%)</title><rect x="36.8925%" y="517" width="12.2607%" height="15" fill="rgb(231,15,5)"/><text x="37.1425%" y="527.50">irust::irust::prin..</text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char_with_color (317 samples, 11.67%)</title><rect x="37.4816%" y="501" width="11.6716%" height="15" fill="rgb(252,35,15)"/><text x="37.7316%" y="511.50">irust::irust::pri..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg (179 samples, 6.59%)</title><rect x="42.5626%" y="485" width="6.5906%" height="15" fill="rgb(248,181,18)"/><text x="42.8126%" y="495.50">irust::ir..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (177 samples, 6.52%)</title><rect x="42.6362%" y="469" width="6.5169%" height="15" fill="rgb(233,39,42)"/><text x="42.8862%" y="479.50">core::res..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg::{{closure}} (177 samples, 6.52%)</title><rect x="42.6362%" y="453" width="6.5169%" height="15" fill="rgb(238,110,33)"/><text x="42.8862%" y="463.50">irust::ir..</text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (177 samples, 6.52%)</title><rect x="42.6362%" y="437" width="6.5169%" height="15" fill="rgb(233,195,10)"/><text x="42.8862%" y="447.50">&lt;T as cro..</text></g><g><title>crossterm::command::write_command_ansi (176 samples, 6.48%)</title><rect x="42.6730%" y="421" width="6.4801%" height="15" fill="rgb(254,105,3)"/><text x="42.9230%" y="431.50">crosster..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.15%)</title><rect x="49.0059%" y="405" width="0.1473%" height="15" fill="rgb(221,225,9)"/><text x="49.2559%" y="415.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.29%)</title><rect x="49.5582%" y="501" width="0.2946%" height="15" fill="rgb(224,227,45)"/><text x="49.8082%" y="511.50"></text></g><g><title>core::str::validations::next_code_point (8 samples, 0.29%)</title><rect x="49.5582%" y="485" width="0.2946%" height="15" fill="rgb(229,198,43)"/><text x="49.8082%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="49.7054%" y="469" width="0.1473%" height="15" fill="rgb(206,209,35)"/><text x="49.9554%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (4 samples, 0.15%)</title><rect x="50.2577%" y="485" width="0.1473%" height="15" fill="rgb(245,195,53)"/><text x="50.5077%" y="495.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::is_at_col (3 samples, 0.11%)</title><rect x="50.4050%" y="485" width="0.1105%" height="15" fill="rgb(240,92,26)"/><text x="50.6550%" y="495.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::is_at_last_terminal_col (3 samples, 0.11%)</title><rect x="50.5155%" y="485" width="0.1105%" height="15" fill="rgb(207,40,23)"/><text x="50.7655%" y="495.50"></text></g><g><title>&lt;crossterm::style::types::color::Color as core::cmp::PartialEq&gt;::ne (3 samples, 0.11%)</title><rect x="50.9941%" y="453" width="0.1105%" height="15" fill="rgb(223,111,35)"/><text x="51.2441%" y="463.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (11 samples, 0.41%)</title><rect x="50.7364%" y="469" width="0.4050%" height="15" fill="rgb(229,147,28)"/><text x="50.9864%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.11%)</title><rect x="51.2150%" y="421" width="0.1105%" height="15" fill="rgb(211,29,28)"/><text x="51.4650%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (8 samples, 0.29%)</title><rect x="52.8719%" y="277" width="0.2946%" height="15" fill="rgb(228,72,33)"/><text x="53.1219%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.11%)</title><rect x="53.7555%" y="101" width="0.1105%" height="15" fill="rgb(205,214,31)"/><text x="54.0055%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.11%)</title><rect x="53.7555%" y="85" width="0.1105%" height="15" fill="rgb(224,111,15)"/><text x="54.0055%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.11%)</title><rect x="53.7555%" y="69" width="0.1105%" height="15" fill="rgb(253,21,26)"/><text x="54.0055%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (3 samples, 0.11%)</title><rect x="53.7555%" y="53" width="0.1105%" height="15" fill="rgb(245,139,43)"/><text x="54.0055%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.11%)</title><rect x="53.7555%" y="37" width="0.1105%" height="15" fill="rgb(252,170,7)"/><text x="54.0055%" y="47.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (11 samples, 0.41%)</title><rect x="53.6082%" y="165" width="0.4050%" height="15" fill="rgb(231,118,14)"/><text x="53.8582%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.33%)</title><rect x="53.6819%" y="149" width="0.3314%" height="15" fill="rgb(238,83,0)"/><text x="53.9319%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.33%)</title><rect x="53.6819%" y="133" width="0.3314%" height="15" fill="rgb(221,39,39)"/><text x="53.9319%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (9 samples, 0.33%)</title><rect x="53.6819%" y="117" width="0.3314%" height="15" fill="rgb(222,119,46)"/><text x="53.9319%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.15%)</title><rect x="53.8660%" y="101" width="0.1473%" height="15" fill="rgb(222,165,49)"/><text x="54.1160%" y="111.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.15%)</title><rect x="53.8660%" y="85" width="0.1473%" height="15" fill="rgb(219,113,52)"/><text x="54.1160%" y="95.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::flush_if_completed_line (6 samples, 0.22%)</title><rect x="54.0133%" y="165" width="0.2209%" height="15" fill="rgb(214,7,15)"/><text x="54.2633%" y="175.50"></text></g><g><title>std::io::buffered::LineWriterShim&lt;W&gt;::buffered (5 samples, 0.18%)</title><rect x="54.0501%" y="149" width="0.1841%" height="15" fill="rgb(235,32,4)"/><text x="54.3001%" y="159.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::buffer (5 samples, 0.18%)</title><rect x="54.0501%" y="133" width="0.1841%" height="15" fill="rgb(238,90,54)"/><text x="54.3001%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.18%)</title><rect x="54.0501%" y="117" width="0.1841%" height="15" fill="rgb(213,208,19)"/><text x="54.3001%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (5 samples, 0.18%)</title><rect x="54.0501%" y="101" width="0.1841%" height="15" fill="rgb(233,156,4)"/><text x="54.3001%" y="111.50"></text></g><g><title>__memrchr_sse2 (12 samples, 0.44%)</title><rect x="54.2342%" y="117" width="0.4418%" height="15" fill="rgb(207,194,5)"/><text x="54.4842%" y="127.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (31 samples, 1.14%)</title><rect x="53.6082%" y="181" width="1.1414%" height="15" fill="rgb(206,111,30)"/><text x="53.8582%" y="191.50"></text></g><g><title>std::memchr::memrchr (14 samples, 0.52%)</title><rect x="54.2342%" y="165" width="0.5155%" height="15" fill="rgb(243,70,54)"/><text x="54.4842%" y="175.50"></text></g><g><title>std::sys::unix::memchr::memrchr (14 samples, 0.52%)</title><rect x="54.2342%" y="149" width="0.5155%" height="15" fill="rgb(242,28,8)"/><text x="54.4842%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (14 samples, 0.52%)</title><rect x="54.2342%" y="133" width="0.5155%" height="15" fill="rgb(219,106,18)"/><text x="54.4842%" y="143.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (33 samples, 1.22%)</title><rect x="53.6082%" y="197" width="1.2150%" height="15" fill="rgb(244,222,10)"/><text x="53.8582%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (5 samples, 0.18%)</title><rect x="54.8233%" y="197" width="0.1841%" height="15" fill="rgb(236,179,52)"/><text x="55.0733%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (5 samples, 0.18%)</title><rect x="54.8233%" y="181" width="0.1841%" height="15" fill="rgb(213,23,39)"/><text x="55.0733%" y="191.50"></text></g><g><title>core::cell::BorrowRefMut::new (5 samples, 0.18%)</title><rect x="54.8233%" y="165" width="0.1841%" height="15" fill="rgb(238,48,10)"/><text x="55.0733%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.15%)</title><rect x="54.8601%" y="149" width="0.1473%" height="15" fill="rgb(251,196,23)"/><text x="55.1101%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (4 samples, 0.15%)</title><rect x="54.8601%" y="133" width="0.1473%" height="15" fill="rgb(250,152,24)"/><text x="55.1101%" y="143.50"></text></g><g><title>core::mem::replace (4 samples, 0.15%)</title><rect x="54.8601%" y="117" width="0.1473%" height="15" fill="rgb(209,150,17)"/><text x="55.1101%" y="127.50"></text></g><g><title>core::mem::swap (4 samples, 0.15%)</title><rect x="54.8601%" y="101" width="0.1473%" height="15" fill="rgb(234,202,34)"/><text x="55.1101%" y="111.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (4 samples, 0.15%)</title><rect x="54.8601%" y="85" width="0.1473%" height="15" fill="rgb(253,148,53)"/><text x="55.1101%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.15%)</title><rect x="54.8601%" y="69" width="0.1473%" height="15" fill="rgb(218,129,16)"/><text x="55.1101%" y="79.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (44 samples, 1.62%)</title><rect x="53.4242%" y="213" width="1.6200%" height="15" fill="rgb(216,85,19)"/><text x="53.6742%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.15%)</title><rect x="55.0442%" y="213" width="0.1473%" height="15" fill="rgb(235,228,7)"/><text x="55.2942%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.15%)</title><rect x="55.0442%" y="197" width="0.1473%" height="15" fill="rgb(245,175,0)"/><text x="55.2942%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (3 samples, 0.11%)</title><rect x="55.0810%" y="181" width="0.1105%" height="15" fill="rgb(208,168,36)"/><text x="55.3310%" y="191.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (51 samples, 1.88%)</title><rect x="53.3873%" y="229" width="1.8778%" height="15" fill="rgb(246,171,24)"/><text x="53.6373%" y="239.50">&lt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (5 samples, 0.18%)</title><rect x="55.2651%" y="229" width="0.1841%" height="15" fill="rgb(215,142,24)"/><text x="55.5151%" y="239.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (66 samples, 2.43%)</title><rect x="53.1664%" y="277" width="2.4300%" height="15" fill="rgb(250,187,7)"/><text x="53.4164%" y="287.50">&lt;c..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (66 samples, 2.43%)</title><rect x="53.1664%" y="261" width="2.4300%" height="15" fill="rgb(228,66,33)"/><text x="53.4164%" y="271.50">st..</text></g><g><title>std::io::Write::write_all (66 samples, 2.43%)</title><rect x="53.1664%" y="245" width="2.4300%" height="15" fill="rgb(234,215,21)"/><text x="53.4164%" y="255.50">st..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.15%)</title><rect x="55.4492%" y="229" width="0.1473%" height="15" fill="rgb(222,191,20)"/><text x="55.6992%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.15%)</title><rect x="55.4492%" y="213" width="0.1473%" height="15" fill="rgb(245,79,54)"/><text x="55.6992%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.11%)</title><rect x="55.4860%" y="197" width="0.1105%" height="15" fill="rgb(240,10,37)"/><text x="55.7360%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.11%)</title><rect x="55.4860%" y="181" width="0.1105%" height="15" fill="rgb(214,192,32)"/><text x="55.7360%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.11%)</title><rect x="55.4860%" y="165" width="0.1105%" height="15" fill="rgb(209,36,54)"/><text x="55.7360%" y="175.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (79 samples, 2.91%)</title><rect x="52.7982%" y="309" width="2.9087%" height="15" fill="rgb(220,10,11)"/><text x="53.0482%" y="319.50">&lt;&amp;..</text></g><g><title>core::fmt::Write::write_char (79 samples, 2.91%)</title><rect x="52.7982%" y="293" width="2.9087%" height="15" fill="rgb(221,106,17)"/><text x="53.0482%" y="303.50">co..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (3 samples, 0.11%)</title><rect x="55.5965%" y="277" width="0.1105%" height="15" fill="rgb(251,142,44)"/><text x="55.8465%" y="287.50"></text></g><g><title>core::char::methods::encode_utf8_raw (3 samples, 0.11%)</title><rect x="55.5965%" y="261" width="0.1105%" height="15" fill="rgb(238,13,15)"/><text x="55.8465%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.33%)</title><rect x="55.7069%" y="309" width="0.3314%" height="15" fill="rgb(208,107,27)"/><text x="55.9569%" y="319.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.26%)</title><rect x="55.7806%" y="293" width="0.2577%" height="15" fill="rgb(205,136,37)"/><text x="56.0306%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (7 samples, 0.26%)</title><rect x="55.7806%" y="277" width="0.2577%" height="15" fill="rgb(250,205,27)"/><text x="56.0306%" y="287.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.26%)</title><rect x="55.7806%" y="261" width="0.2577%" height="15" fill="rgb(210,80,43)"/><text x="56.0306%" y="271.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (5 samples, 0.18%)</title><rect x="56.0383%" y="293" width="0.1841%" height="15" fill="rgb(247,160,36)"/><text x="56.2883%" y="303.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (8 samples, 0.29%)</title><rect x="56.0383%" y="309" width="0.2946%" height="15" fill="rgb(234,13,49)"/><text x="56.2883%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (3 samples, 0.11%)</title><rect x="56.2224%" y="293" width="0.1105%" height="15" fill="rgb(234,122,0)"/><text x="56.4724%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.11%)</title><rect x="56.2224%" y="277" width="0.1105%" height="15" fill="rgb(207,146,38)"/><text x="56.4724%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="56.3328%" y="309" width="0.1105%" height="15" fill="rgb(207,177,25)"/><text x="56.5828%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (3 samples, 0.11%)</title><rect x="56.3328%" y="293" width="0.1105%" height="15" fill="rgb(211,178,42)"/><text x="56.5828%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (4 samples, 0.15%)</title><rect x="56.4433%" y="309" width="0.1473%" height="15" fill="rgb(230,69,54)"/><text x="56.6933%" y="319.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (4 samples, 0.15%)</title><rect x="56.4433%" y="293" width="0.1473%" height="15" fill="rgb(214,135,41)"/><text x="56.6933%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (4 samples, 0.15%)</title><rect x="56.4433%" y="277" width="0.1473%" height="15" fill="rgb(237,67,25)"/><text x="56.6933%" y="287.50"></text></g><g><title>core::cmp::min (4 samples, 0.15%)</title><rect x="56.4433%" y="261" width="0.1473%" height="15" fill="rgb(222,189,50)"/><text x="56.6933%" y="271.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.15%)</title><rect x="56.4433%" y="245" width="0.1473%" height="15" fill="rgb(245,148,34)"/><text x="56.6933%" y="255.50"></text></g><g><title>core::fmt::write (3 samples, 0.11%)</title><rect x="56.4801%" y="229" width="0.1105%" height="15" fill="rgb(222,29,6)"/><text x="56.7301%" y="239.50"></text></g><g><title>&lt;crossterm::style::Print&lt;T&gt; as crossterm::command::Command&gt;::write_ansi (140 samples, 5.15%)</title><rect x="51.4728%" y="357" width="5.1546%" height="15" fill="rgb(221,189,43)"/><text x="51.7228%" y="367.50">&lt;cross..</text></g><g><title>core::fmt::Write::write_fmt (137 samples, 5.04%)</title><rect x="51.5832%" y="341" width="5.0442%" height="15" fill="rgb(207,36,27)"/><text x="51.8332%" y="351.50">core::..</text></g><g><title>core::fmt::write (133 samples, 4.90%)</title><rect x="51.7305%" y="325" width="4.8969%" height="15" fill="rgb(217,90,24)"/><text x="51.9805%" y="335.50">core::..</text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char (150 samples, 5.52%)</title><rect x="51.1414%" y="469" width="5.5228%" height="15" fill="rgb(224,66,35)"/><text x="51.3914%" y="479.50">irust::..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::write (148 samples, 5.45%)</title><rect x="51.2150%" y="453" width="5.4492%" height="15" fill="rgb(221,13,50)"/><text x="51.4650%" y="463.50">irust::..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write (148 samples, 5.45%)</title><rect x="51.2150%" y="437" width="5.4492%" height="15" fill="rgb(236,68,49)"/><text x="51.4650%" y="447.50">irust::..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (145 samples, 5.34%)</title><rect x="51.3255%" y="421" width="5.3387%" height="15" fill="rgb(229,146,28)"/><text x="51.5755%" y="431.50">core::r..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write::{{closure}} (145 samples, 5.34%)</title><rect x="51.3255%" y="405" width="5.3387%" height="15" fill="rgb(225,31,38)"/><text x="51.5755%" y="415.50">irust::..</text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (145 samples, 5.34%)</title><rect x="51.3255%" y="389" width="5.3387%" height="15" fill="rgb(250,208,3)"/><text x="51.5755%" y="399.50">&lt;T as c..</text></g><g><title>crossterm::command::write_command_ansi (145 samples, 5.34%)</title><rect x="51.3255%" y="373" width="5.3387%" height="15" fill="rgb(246,54,23)"/><text x="51.5755%" y="383.50">crosste..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.22%)</title><rect x="57.5847%" y="133" width="0.2209%" height="15" fill="rgb(243,76,11)"/><text x="57.8347%" y="143.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.18%)</title><rect x="57.6215%" y="117" width="0.1841%" height="15" fill="rgb(245,21,50)"/><text x="57.8715%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.29%)</title><rect x="57.5479%" y="181" width="0.2946%" height="15" fill="rgb(228,9,43)"/><text x="57.7979%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.29%)</title><rect x="57.5479%" y="165" width="0.2946%" height="15" fill="rgb(208,100,47)"/><text x="57.7979%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.29%)</title><rect x="57.5479%" y="149" width="0.2946%" height="15" fill="rgb(232,26,8)"/><text x="57.7979%" y="159.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (79 samples, 2.91%)</title><rect x="57.5479%" y="197" width="2.9087%" height="15" fill="rgb(216,166,38)"/><text x="57.7979%" y="207.50">&lt;s..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (71 samples, 2.61%)</title><rect x="57.8424%" y="181" width="2.6141%" height="15" fill="rgb(251,202,51)"/><text x="58.0924%" y="191.50">st..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (71 samples, 2.61%)</title><rect x="57.8424%" y="165" width="2.6141%" height="15" fill="rgb(254,216,34)"/><text x="58.0924%" y="175.50">&lt;s..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (71 samples, 2.61%)</title><rect x="57.8424%" y="149" width="2.6141%" height="15" fill="rgb(251,32,27)"/><text x="58.0924%" y="159.50">&lt;s..</text></g><g><title>std::sys::unix::fd::FileDesc::write (71 samples, 2.61%)</title><rect x="57.8424%" y="133" width="2.6141%" height="15" fill="rgb(208,127,28)"/><text x="58.0924%" y="143.50">st..</text></g><g><title>__GI___libc_write (71 samples, 2.61%)</title><rect x="57.8424%" y="117" width="2.6141%" height="15" fill="rgb(224,137,22)"/><text x="58.0924%" y="127.50">__..</text></g><g><title>__memrchr_sse2 (6 samples, 0.22%)</title><rect x="60.5302%" y="149" width="0.2209%" height="15" fill="rgb(254,70,32)"/><text x="60.7802%" y="159.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (89 samples, 3.28%)</title><rect x="57.5479%" y="229" width="3.2769%" height="15" fill="rgb(229,75,37)"/><text x="57.7979%" y="239.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (89 samples, 3.28%)</title><rect x="57.5479%" y="213" width="3.2769%" height="15" fill="rgb(252,64,23)"/><text x="57.7979%" y="223.50">&lt;st..</text></g><g><title>std::memchr::memrchr (10 samples, 0.37%)</title><rect x="60.4566%" y="197" width="0.3682%" height="15" fill="rgb(232,162,48)"/><text x="60.7066%" y="207.50"></text></g><g><title>std::sys::unix::memchr::memrchr (10 samples, 0.37%)</title><rect x="60.4566%" y="181" width="0.3682%" height="15" fill="rgb(246,160,12)"/><text x="60.7066%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (10 samples, 0.37%)</title><rect x="60.4566%" y="165" width="0.3682%" height="15" fill="rgb(247,166,0)"/><text x="60.7066%" y="175.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (100 samples, 3.68%)</title><rect x="57.2165%" y="245" width="3.6819%" height="15" fill="rgb(249,219,21)"/><text x="57.4665%" y="255.50">&lt;std..</text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (105 samples, 3.87%)</title><rect x="57.1797%" y="261" width="3.8660%" height="15" fill="rgb(205,209,3)"/><text x="57.4297%" y="271.50">&lt;iru..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.15%)</title><rect x="60.8984%" y="245" width="0.1473%" height="15" fill="rgb(243,44,1)"/><text x="61.1484%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.15%)</title><rect x="60.8984%" y="229" width="0.1473%" height="15" fill="rgb(206,159,16)"/><text x="61.1484%" y="239.50"></text></g><g><title>core::cell::BorrowRefMut::new (4 samples, 0.15%)</title><rect x="60.8984%" y="213" width="0.1473%" height="15" fill="rgb(244,77,30)"/><text x="61.1484%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (3 samples, 0.11%)</title><rect x="61.0457%" y="261" width="0.1105%" height="15" fill="rgb(218,69,12)"/><text x="61.2957%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (120 samples, 4.42%)</title><rect x="56.8483%" y="325" width="4.4183%" height="15" fill="rgb(212,87,7)"/><text x="57.0983%" y="335.50">&lt;&amp;mut..</text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (118 samples, 4.34%)</title><rect x="56.9219%" y="309" width="4.3446%" height="15" fill="rgb(245,114,25)"/><text x="57.1719%" y="319.50">&lt;cros..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (117 samples, 4.31%)</title><rect x="56.9588%" y="293" width="4.3078%" height="15" fill="rgb(210,61,42)"/><text x="57.2088%" y="303.50">std::..</text></g><g><title>std::io::Write::write_all (117 samples, 4.31%)</title><rect x="56.9588%" y="277" width="4.3078%" height="15" fill="rgb(211,52,33)"/><text x="57.2088%" y="287.50">std::..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.11%)</title><rect x="61.1561%" y="261" width="0.1105%" height="15" fill="rgb(234,58,33)"/><text x="61.4061%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.11%)</title><rect x="61.1561%" y="245" width="0.1105%" height="15" fill="rgb(220,115,36)"/><text x="61.4061%" y="255.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="61.5611%" y="181" width="0.1105%" height="15" fill="rgb(243,153,54)"/><text x="61.8111%" y="191.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (7 samples, 0.26%)</title><rect x="61.5611%" y="213" width="0.2577%" height="15" fill="rgb(251,47,18)"/><text x="61.8111%" y="223.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (7 samples, 0.26%)</title><rect x="61.5611%" y="197" width="0.2577%" height="15" fill="rgb(242,102,42)"/><text x="61.8111%" y="207.50"></text></g><g><title>std::memchr::memrchr (3 samples, 0.11%)</title><rect x="61.7084%" y="181" width="0.1105%" height="15" fill="rgb(234,31,38)"/><text x="61.9584%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr (3 samples, 0.11%)</title><rect x="61.7084%" y="165" width="0.1105%" height="15" fill="rgb(221,117,51)"/><text x="61.9584%" y="175.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (3 samples, 0.11%)</title><rect x="61.7084%" y="149" width="0.1105%" height="15" fill="rgb(212,20,18)"/><text x="61.9584%" y="159.50"></text></g><g><title>__memrchr_sse2 (3 samples, 0.11%)</title><rect x="61.7084%" y="133" width="0.1105%" height="15" fill="rgb(245,133,36)"/><text x="61.9584%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (10 samples, 0.37%)</title><rect x="61.5611%" y="229" width="0.3682%" height="15" fill="rgb(212,6,19)"/><text x="61.8111%" y="239.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (12 samples, 0.44%)</title><rect x="61.5243%" y="245" width="0.4418%" height="15" fill="rgb(218,1,36)"/><text x="61.7743%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (16 samples, 0.59%)</title><rect x="61.4507%" y="309" width="0.5891%" height="15" fill="rgb(246,84,54)"/><text x="61.7007%" y="319.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (16 samples, 0.59%)</title><rect x="61.4507%" y="293" width="0.5891%" height="15" fill="rgb(242,110,6)"/><text x="61.7007%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (16 samples, 0.59%)</title><rect x="61.4507%" y="277" width="0.5891%" height="15" fill="rgb(214,47,5)"/><text x="61.7007%" y="287.50"></text></g><g><title>std::io::Write::write_all (16 samples, 0.59%)</title><rect x="61.4507%" y="261" width="0.5891%" height="15" fill="rgb(218,159,25)"/><text x="61.7007%" y="271.50"></text></g><g><title>&lt;crossterm::style::SetForegroundColor as crossterm::command::Command&gt;::write_ansi (146 samples, 5.38%)</title><rect x="56.7010%" y="389" width="5.3756%" height="15" fill="rgb(215,211,28)"/><text x="56.9510%" y="399.50">&lt;crosst..</text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (146 samples, 5.38%)</title><rect x="56.7010%" y="373" width="5.3756%" height="15" fill="rgb(238,59,32)"/><text x="56.9510%" y="383.50">crosste..</text></g><g><title>core::fmt::Write::write_fmt (144 samples, 5.30%)</title><rect x="56.7747%" y="357" width="5.3019%" height="15" fill="rgb(226,82,3)"/><text x="57.0247%" y="367.50">core::..</text></g><g><title>core::fmt::write (144 samples, 5.30%)</title><rect x="56.7747%" y="341" width="5.3019%" height="15" fill="rgb(240,164,32)"/><text x="57.0247%" y="351.50">core::..</text></g><g><title>crossterm::style::ansi::&lt;impl core::fmt::Display for crossterm::style::types::colored::Colored&gt;::fmt (19 samples, 0.70%)</title><rect x="61.3770%" y="325" width="0.6996%" height="15" fill="rgb(232,46,7)"/><text x="61.6270%" y="335.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_str (353 samples, 13.00%)</title><rect x="49.1532%" y="517" width="12.9971%" height="15" fill="rgb(229,129,53)"/><text x="49.4032%" y="527.50">irust::irust::printe..</text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_char (334 samples, 12.30%)</title><rect x="49.8527%" y="501" width="12.2975%" height="15" fill="rgb(234,188,29)"/><text x="50.1027%" y="511.50">irust::irust::prin..</text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char_with_color (313 samples, 11.52%)</title><rect x="50.6259%" y="485" width="11.5243%" height="15" fill="rgb(246,141,4)"/><text x="50.8759%" y="495.50">irust::irust::pri..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg (149 samples, 5.49%)</title><rect x="56.6642%" y="469" width="5.4860%" height="15" fill="rgb(229,23,39)"/><text x="56.9142%" y="479.50">irust::..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (149 samples, 5.49%)</title><rect x="56.6642%" y="453" width="5.4860%" height="15" fill="rgb(206,12,3)"/><text x="56.9142%" y="463.50">core::r..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg::{{closure}} (149 samples, 5.49%)</title><rect x="56.6642%" y="437" width="5.4860%" height="15" fill="rgb(252,226,20)"/><text x="56.9142%" y="447.50">irust::..</text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (149 samples, 5.49%)</title><rect x="56.6642%" y="421" width="5.4860%" height="15" fill="rgb(216,123,35)"/><text x="56.9142%" y="431.50">&lt;T as c..</text></g><g><title>crossterm::command::write_command_ansi (149 samples, 5.49%)</title><rect x="56.6642%" y="405" width="5.4860%" height="15" fill="rgb(212,68,40)"/><text x="56.9142%" y="415.50">crosste..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (22 samples, 0.81%)</title><rect x="62.7025%" y="197" width="0.8100%" height="15" fill="rgb(254,125,32)"/><text x="62.9525%" y="207.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (19 samples, 0.70%)</title><rect x="62.8130%" y="181" width="0.6996%" height="15" fill="rgb(253,97,22)"/><text x="63.0630%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (19 samples, 0.70%)</title><rect x="62.8130%" y="165" width="0.6996%" height="15" fill="rgb(241,101,14)"/><text x="63.0630%" y="175.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (19 samples, 0.70%)</title><rect x="62.8130%" y="149" width="0.6996%" height="15" fill="rgb(238,103,29)"/><text x="63.0630%" y="159.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (19 samples, 0.70%)</title><rect x="62.8130%" y="133" width="0.6996%" height="15" fill="rgb(233,195,47)"/><text x="63.0630%" y="143.50"></text></g><g><title>__GI___libc_write (19 samples, 0.70%)</title><rect x="62.8130%" y="117" width="0.6996%" height="15" fill="rgb(246,218,30)"/><text x="63.0630%" y="127.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (30 samples, 1.10%)</title><rect x="62.7025%" y="229" width="1.1046%" height="15" fill="rgb(219,145,47)"/><text x="62.9525%" y="239.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (30 samples, 1.10%)</title><rect x="62.7025%" y="213" width="1.1046%" height="15" fill="rgb(243,12,26)"/><text x="62.9525%" y="223.50"></text></g><g><title>std::memchr::memrchr (7 samples, 0.26%)</title><rect x="63.5493%" y="197" width="0.2577%" height="15" fill="rgb(214,87,16)"/><text x="63.7993%" y="207.50"></text></g><g><title>std::sys::unix::memchr::memrchr (7 samples, 0.26%)</title><rect x="63.5493%" y="181" width="0.2577%" height="15" fill="rgb(208,99,42)"/><text x="63.7993%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (7 samples, 0.26%)</title><rect x="63.5493%" y="165" width="0.2577%" height="15" fill="rgb(253,99,2)"/><text x="63.7993%" y="175.50"></text></g><g><title>__memrchr_sse2 (6 samples, 0.22%)</title><rect x="63.5862%" y="149" width="0.2209%" height="15" fill="rgb(220,168,23)"/><text x="63.8362%" y="159.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (35 samples, 1.29%)</title><rect x="62.5552%" y="325" width="1.2887%" height="15" fill="rgb(242,38,24)"/><text x="62.8052%" y="335.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (34 samples, 1.25%)</title><rect x="62.5920%" y="309" width="1.2518%" height="15" fill="rgb(225,182,9)"/><text x="62.8420%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (34 samples, 1.25%)</title><rect x="62.5920%" y="293" width="1.2518%" height="15" fill="rgb(243,178,37)"/><text x="62.8420%" y="303.50"></text></g><g><title>std::io::Write::write_all (34 samples, 1.25%)</title><rect x="62.5920%" y="277" width="1.2518%" height="15" fill="rgb(232,139,19)"/><text x="62.8420%" y="287.50"></text></g><g><title>&lt;irust::irust::printer::cursor::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (32 samples, 1.18%)</title><rect x="62.6657%" y="261" width="1.1782%" height="15" fill="rgb(225,201,24)"/><text x="62.9157%" y="271.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (32 samples, 1.18%)</title><rect x="62.6657%" y="245" width="1.1782%" height="15" fill="rgb(221,47,46)"/><text x="62.9157%" y="255.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (4 samples, 0.15%)</title><rect x="63.9912%" y="165" width="0.1473%" height="15" fill="rgb(249,23,13)"/><text x="64.2412%" y="175.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (7 samples, 0.26%)</title><rect x="63.9912%" y="197" width="0.2577%" height="15" fill="rgb(219,9,5)"/><text x="64.2412%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (7 samples, 0.26%)</title><rect x="63.9912%" y="181" width="0.2577%" height="15" fill="rgb(254,171,16)"/><text x="64.2412%" y="191.50"></text></g><g><title>&lt;irust::irust::printer::cursor::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (8 samples, 0.29%)</title><rect x="63.9912%" y="229" width="0.2946%" height="15" fill="rgb(230,171,20)"/><text x="64.2412%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (8 samples, 0.29%)</title><rect x="63.9912%" y="213" width="0.2946%" height="15" fill="rgb(210,71,41)"/><text x="64.2412%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.37%)</title><rect x="63.9543%" y="293" width="0.3682%" height="15" fill="rgb(206,173,20)"/><text x="64.2043%" y="303.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (9 samples, 0.33%)</title><rect x="63.9912%" y="277" width="0.3314%" height="15" fill="rgb(233,88,34)"/><text x="64.2412%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (9 samples, 0.33%)</title><rect x="63.9912%" y="261" width="0.3314%" height="15" fill="rgb(223,209,46)"/><text x="64.2412%" y="271.50"></text></g><g><title>std::io::Write::write_all (9 samples, 0.33%)</title><rect x="63.9912%" y="245" width="0.3314%" height="15" fill="rgb(250,43,18)"/><text x="64.2412%" y="255.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto_next_row_terminal_start (60 samples, 2.21%)</title><rect x="62.1502%" y="517" width="2.2091%" height="15" fill="rgb(208,13,10)"/><text x="62.4002%" y="527.50">i..</text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto (60 samples, 2.21%)</title><rect x="62.1502%" y="501" width="2.2091%" height="15" fill="rgb(212,200,36)"/><text x="62.4002%" y="511.50">i..</text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto_internal_pos (60 samples, 2.21%)</title><rect x="62.1502%" y="485" width="2.2091%" height="15" fill="rgb(225,90,30)"/><text x="62.4002%" y="495.50">i..</text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto (60 samples, 2.21%)</title><rect x="62.1502%" y="469" width="2.2091%" height="15" fill="rgb(236,182,39)"/><text x="62.4002%" y="479.50">i..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (60 samples, 2.21%)</title><rect x="62.1502%" y="453" width="2.2091%" height="15" fill="rgb(212,144,35)"/><text x="62.4002%" y="463.50">c..</text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto::{{closure}} (60 samples, 2.21%)</title><rect x="62.1502%" y="437" width="2.2091%" height="15" fill="rgb(228,63,44)"/><text x="62.4002%" y="447.50">i..</text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (60 samples, 2.21%)</title><rect x="62.1502%" y="421" width="2.2091%" height="15" fill="rgb(228,109,6)"/><text x="62.4002%" y="431.50">&lt;..</text></g><g><title>crossterm::command::write_command_ansi (60 samples, 2.21%)</title><rect x="62.1502%" y="405" width="2.2091%" height="15" fill="rgb(238,117,24)"/><text x="62.4002%" y="415.50">c..</text></g><g><title>&lt;crossterm::cursor::MoveTo as crossterm::command::Command&gt;::write_ansi (59 samples, 2.17%)</title><rect x="62.1870%" y="389" width="2.1723%" height="15" fill="rgb(242,26,26)"/><text x="62.4370%" y="399.50">&lt;..</text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (59 samples, 2.17%)</title><rect x="62.1870%" y="373" width="2.1723%" height="15" fill="rgb(221,92,48)"/><text x="62.4370%" y="383.50">c..</text></g><g><title>core::fmt::Write::write_fmt (56 samples, 2.06%)</title><rect x="62.2975%" y="357" width="2.0619%" height="15" fill="rgb(209,209,32)"/><text x="62.5475%" y="367.50">c..</text></g><g><title>core::fmt::write (54 samples, 1.99%)</title><rect x="62.3711%" y="341" width="1.9882%" height="15" fill="rgb(221,70,22)"/><text x="62.6211%" y="351.50">c..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (14 samples, 0.52%)</title><rect x="63.8439%" y="325" width="0.5155%" height="15" fill="rgb(248,145,5)"/><text x="64.0939%" y="335.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (13 samples, 0.48%)</title><rect x="63.8807%" y="309" width="0.4786%" height="15" fill="rgb(226,116,26)"/><text x="64.1307%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (9 samples, 0.33%)</title><rect x="65.1325%" y="245" width="0.3314%" height="15" fill="rgb(244,5,17)"/><text x="65.3825%" y="255.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (8 samples, 0.29%)</title><rect x="65.1694%" y="229" width="0.2946%" height="15" fill="rgb(252,159,33)"/><text x="65.4194%" y="239.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (8 samples, 0.29%)</title><rect x="65.1694%" y="213" width="0.2946%" height="15" fill="rgb(206,71,0)"/><text x="65.4194%" y="223.50"></text></g><g><title>std::memchr::memrchr (6 samples, 0.22%)</title><rect x="65.2430%" y="197" width="0.2209%" height="15" fill="rgb(233,118,54)"/><text x="65.4930%" y="207.50"></text></g><g><title>std::sys::unix::memchr::memrchr (6 samples, 0.22%)</title><rect x="65.2430%" y="181" width="0.2209%" height="15" fill="rgb(234,83,48)"/><text x="65.4930%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (6 samples, 0.22%)</title><rect x="65.2430%" y="165" width="0.2209%" height="15" fill="rgb(228,3,54)"/><text x="65.4930%" y="175.50"></text></g><g><title>__memrchr_sse2 (6 samples, 0.22%)</title><rect x="65.2430%" y="149" width="0.2209%" height="15" fill="rgb(226,155,13)"/><text x="65.4930%" y="159.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (15 samples, 0.55%)</title><rect x="64.9853%" y="341" width="0.5523%" height="15" fill="rgb(241,28,37)"/><text x="65.2353%" y="351.50"></text></g><g><title>core::fmt::Write::write_char (15 samples, 0.55%)</title><rect x="64.9853%" y="325" width="0.5523%" height="15" fill="rgb(233,93,10)"/><text x="65.2353%" y="335.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (13 samples, 0.48%)</title><rect x="65.0589%" y="309" width="0.4786%" height="15" fill="rgb(225,113,19)"/><text x="65.3089%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (13 samples, 0.48%)</title><rect x="65.0589%" y="293" width="0.4786%" height="15" fill="rgb(241,2,18)"/><text x="65.3089%" y="303.50"></text></g><g><title>std::io::Write::write_all (13 samples, 0.48%)</title><rect x="65.0589%" y="277" width="0.4786%" height="15" fill="rgb(228,207,21)"/><text x="65.3089%" y="287.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (12 samples, 0.44%)</title><rect x="65.0957%" y="261" width="0.4418%" height="15" fill="rgb(213,211,35)"/><text x="65.3457%" y="271.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (4 samples, 0.15%)</title><rect x="65.5376%" y="341" width="0.1473%" height="15" fill="rgb(209,83,10)"/><text x="65.7876%" y="351.50"></text></g><g><title>&lt;crossterm::style::Print&lt;T&gt; as crossterm::command::Command&gt;::write_ansi (28 samples, 1.03%)</title><rect x="64.8012%" y="389" width="1.0309%" height="15" fill="rgb(209,164,1)"/><text x="65.0512%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (28 samples, 1.03%)</title><rect x="64.8012%" y="373" width="1.0309%" height="15" fill="rgb(213,184,43)"/><text x="65.0512%" y="383.50"></text></g><g><title>core::fmt::write (28 samples, 1.03%)</title><rect x="64.8012%" y="357" width="1.0309%" height="15" fill="rgb(231,61,34)"/><text x="65.0512%" y="367.50"></text></g><g><title>crossterm::command::write_command_ansi (31 samples, 1.14%)</title><rect x="64.7644%" y="405" width="1.1414%" height="15" fill="rgb(235,75,3)"/><text x="65.0144%" y="415.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char (38 samples, 1.40%)</title><rect x="64.5434%" y="501" width="1.3991%" height="15" fill="rgb(220,106,47)"/><text x="64.7934%" y="511.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::write (35 samples, 1.29%)</title><rect x="64.6539%" y="485" width="1.2887%" height="15" fill="rgb(210,196,33)"/><text x="64.9039%" y="495.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write (35 samples, 1.29%)</title><rect x="64.6539%" y="469" width="1.2887%" height="15" fill="rgb(229,154,42)"/><text x="64.9039%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (33 samples, 1.22%)</title><rect x="64.7275%" y="453" width="1.2150%" height="15" fill="rgb(228,114,26)"/><text x="64.9775%" y="463.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write::{{closure}} (33 samples, 1.22%)</title><rect x="64.7275%" y="437" width="1.2150%" height="15" fill="rgb(208,144,1)"/><text x="64.9775%" y="447.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (33 samples, 1.22%)</title><rect x="64.7275%" y="421" width="1.2150%" height="15" fill="rgb(239,112,37)"/><text x="64.9775%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.11%)</title><rect x="66.2371%" y="213" width="0.1105%" height="15" fill="rgb(210,96,50)"/><text x="66.4871%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.11%)</title><rect x="66.2371%" y="197" width="0.1105%" height="15" fill="rgb(222,178,2)"/><text x="66.4871%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.11%)</title><rect x="66.2371%" y="181" width="0.1105%" height="15" fill="rgb(226,74,18)"/><text x="66.4871%" y="191.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (4 samples, 0.15%)</title><rect x="66.2371%" y="229" width="0.1473%" height="15" fill="rgb(225,67,54)"/><text x="66.4871%" y="239.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (6 samples, 0.22%)</title><rect x="66.2371%" y="261" width="0.2209%" height="15" fill="rgb(251,92,32)"/><text x="66.4871%" y="271.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (6 samples, 0.22%)</title><rect x="66.2371%" y="245" width="0.2209%" height="15" fill="rgb(228,149,22)"/><text x="66.4871%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (10 samples, 0.37%)</title><rect x="66.1635%" y="277" width="0.3682%" height="15" fill="rgb(243,54,13)"/><text x="66.4135%" y="287.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (11 samples, 0.41%)</title><rect x="66.1635%" y="293" width="0.4050%" height="15" fill="rgb(243,180,28)"/><text x="66.4135%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (17 samples, 0.63%)</title><rect x="66.0162%" y="357" width="0.6259%" height="15" fill="rgb(208,167,24)"/><text x="66.2662%" y="367.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (17 samples, 0.63%)</title><rect x="66.0162%" y="341" width="0.6259%" height="15" fill="rgb(245,73,45)"/><text x="66.2662%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (17 samples, 0.63%)</title><rect x="66.0162%" y="325" width="0.6259%" height="15" fill="rgb(237,203,48)"/><text x="66.2662%" y="335.50"></text></g><g><title>std::io::Write::write_all (17 samples, 0.63%)</title><rect x="66.0162%" y="309" width="0.6259%" height="15" fill="rgb(211,197,16)"/><text x="66.2662%" y="319.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_inner (863 samples, 31.77%)</title><rect x="35.0884%" y="533" width="31.7747%" height="15" fill="rgb(243,99,51)"/><text x="35.3384%" y="543.50">irust::irust::printer::Printer&lt;W&gt;::print_input_inner</text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write (68 samples, 2.50%)</title><rect x="64.3594%" y="517" width="2.5037%" height="15" fill="rgb(215,123,29)"/><text x="64.6094%" y="527.50">ir..</text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg (25 samples, 0.92%)</title><rect x="65.9426%" y="501" width="0.9205%" height="15" fill="rgb(239,186,37)"/><text x="66.1926%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (25 samples, 0.92%)</title><rect x="65.9426%" y="485" width="0.9205%" height="15" fill="rgb(252,136,39)"/><text x="66.1926%" y="495.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg::{{closure}} (25 samples, 0.92%)</title><rect x="65.9426%" y="469" width="0.9205%" height="15" fill="rgb(223,213,32)"/><text x="66.1926%" y="479.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (25 samples, 0.92%)</title><rect x="65.9426%" y="453" width="0.9205%" height="15" fill="rgb(233,115,5)"/><text x="66.1926%" y="463.50"></text></g><g><title>crossterm::command::write_command_ansi (25 samples, 0.92%)</title><rect x="65.9426%" y="437" width="0.9205%" height="15" fill="rgb(207,226,44)"/><text x="66.1926%" y="447.50"></text></g><g><title>&lt;crossterm::style::SetForegroundColor as crossterm::command::Command&gt;::write_ansi (25 samples, 0.92%)</title><rect x="65.9426%" y="421" width="0.9205%" height="15" fill="rgb(208,126,0)"/><text x="66.1926%" y="431.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (25 samples, 0.92%)</title><rect x="65.9426%" y="405" width="0.9205%" height="15" fill="rgb(244,66,21)"/><text x="66.1926%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (25 samples, 0.92%)</title><rect x="65.9426%" y="389" width="0.9205%" height="15" fill="rgb(222,97,12)"/><text x="66.1926%" y="399.50"></text></g><g><title>core::fmt::write (24 samples, 0.88%)</title><rect x="65.9794%" y="373" width="0.8837%" height="15" fill="rgb(219,213,19)"/><text x="66.2294%" y="383.50"></text></g><g><title>crossterm::style::ansi::&lt;impl core::fmt::Display for crossterm::style::types::colored::Colored&gt;::fmt (4 samples, 0.15%)</title><rect x="66.7158%" y="357" width="0.1473%" height="15" fill="rgb(252,169,30)"/><text x="66.9658%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (8 samples, 0.29%)</title><rect x="67.4153%" y="373" width="0.2946%" height="15" fill="rgb(206,32,51)"/><text x="67.6653%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (6 samples, 0.22%)</title><rect x="67.4890%" y="357" width="0.2209%" height="15" fill="rgb(250,172,42)"/><text x="67.7390%" y="367.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (6 samples, 0.22%)</title><rect x="67.4890%" y="341" width="0.2209%" height="15" fill="rgb(209,34,43)"/><text x="67.7390%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (4 samples, 0.15%)</title><rect x="67.5626%" y="325" width="0.1473%" height="15" fill="rgb(223,11,35)"/><text x="67.8126%" y="335.50"></text></g><g><title>&lt;usize as core::ops::arith::Add&gt;::add (4 samples, 0.15%)</title><rect x="67.5626%" y="309" width="0.1473%" height="15" fill="rgb(251,219,26)"/><text x="67.8126%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (15 samples, 0.55%)</title><rect x="67.4153%" y="485" width="0.5523%" height="15" fill="rgb(231,119,3)"/><text x="67.6653%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (15 samples, 0.55%)</title><rect x="67.4153%" y="469" width="0.5523%" height="15" fill="rgb(216,97,11)"/><text x="67.6653%" y="479.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (15 samples, 0.55%)</title><rect x="67.4153%" y="453" width="0.5523%" height="15" fill="rgb(223,59,9)"/><text x="67.6653%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.55%)</title><rect x="67.4153%" y="437" width="0.5523%" height="15" fill="rgb(233,93,31)"/><text x="67.6653%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.55%)</title><rect x="67.4153%" y="421" width="0.5523%" height="15" fill="rgb(239,81,33)"/><text x="67.6653%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 0.55%)</title><rect x="67.4153%" y="405" width="0.5523%" height="15" fill="rgb(213,120,34)"/><text x="67.6653%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (15 samples, 0.55%)</title><rect x="67.4153%" y="389" width="0.5523%" height="15" fill="rgb(243,49,53)"/><text x="67.6653%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.26%)</title><rect x="67.7099%" y="373" width="0.2577%" height="15" fill="rgb(247,216,33)"/><text x="67.9599%" y="383.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::scroll_if_needed_for_input (32 samples, 1.18%)</title><rect x="66.8630%" y="533" width="1.1782%" height="15" fill="rgb(226,26,14)"/><text x="67.1130%" y="543.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::input_last_pos (32 samples, 1.18%)</title><rect x="66.8630%" y="517" width="1.1782%" height="15" fill="rgb(215,49,53)"/><text x="67.1130%" y="527.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::buffer_pos_to_cursor_pos (31 samples, 1.14%)</title><rect x="66.8999%" y="501" width="1.1414%" height="15" fill="rgb(245,162,40)"/><text x="67.1499%" y="511.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto_start (4 samples, 0.15%)</title><rect x="68.0412%" y="533" width="0.1473%" height="15" fill="rgb(229,68,17)"/><text x="68.2912%" y="543.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto_internal_pos (4 samples, 0.15%)</title><rect x="68.0412%" y="517" width="0.1473%" height="15" fill="rgb(213,182,10)"/><text x="68.2912%" y="527.50"></text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto (4 samples, 0.15%)</title><rect x="68.0412%" y="501" width="0.1473%" height="15" fill="rgb(245,125,30)"/><text x="68.2912%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.15%)</title><rect x="68.0412%" y="485" width="0.1473%" height="15" fill="rgb(232,202,2)"/><text x="68.2912%" y="495.50"></text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto::{{closure}} (4 samples, 0.15%)</title><rect x="68.0412%" y="469" width="0.1473%" height="15" fill="rgb(237,140,51)"/><text x="68.2912%" y="479.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (4 samples, 0.15%)</title><rect x="68.0412%" y="453" width="0.1473%" height="15" fill="rgb(236,157,25)"/><text x="68.2912%" y="463.50"></text></g><g><title>crossterm::command::write_command_ansi (4 samples, 0.15%)</title><rect x="68.0412%" y="437" width="0.1473%" height="15" fill="rgb(219,209,0)"/><text x="68.2912%" y="447.50"></text></g><g><title>&lt;crossterm::cursor::MoveTo as crossterm::command::Command&gt;::write_ansi (4 samples, 0.15%)</title><rect x="68.0412%" y="421" width="0.1473%" height="15" fill="rgb(240,116,54)"/><text x="68.2912%" y="431.50"></text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (4 samples, 0.15%)</title><rect x="68.0412%" y="405" width="0.1473%" height="15" fill="rgb(216,10,36)"/><text x="68.2912%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.11%)</title><rect x="68.0781%" y="389" width="0.1105%" height="15" fill="rgb(222,72,44)"/><text x="68.3281%" y="399.50"></text></g><g><title>core::fmt::write (3 samples, 0.11%)</title><rect x="68.0781%" y="373" width="0.1105%" height="15" fill="rgb(232,159,9)"/><text x="68.3281%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.11%)</title><rect x="68.2622%" y="341" width="0.1105%" height="15" fill="rgb(210,39,32)"/><text x="68.5122%" y="351.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.11%)</title><rect x="68.2622%" y="325" width="0.1105%" height="15" fill="rgb(216,194,45)"/><text x="68.5122%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.11%)</title><rect x="68.2622%" y="309" width="0.1105%" height="15" fill="rgb(218,18,35)"/><text x="68.5122%" y="319.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.11%)</title><rect x="68.2622%" y="293" width="0.1105%" height="15" fill="rgb(207,83,51)"/><text x="68.5122%" y="303.50"></text></g><g><title>&lt;irust::irust::printer::cursor::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="68.2622%" y="277" width="0.1105%" height="15" fill="rgb(225,63,43)"/><text x="68.5122%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="68.2622%" y="261" width="0.1105%" height="15" fill="rgb(207,57,36)"/><text x="68.5122%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.11%)</title><rect x="68.3726%" y="309" width="0.1105%" height="15" fill="rgb(216,99,33)"/><text x="68.6226%" y="319.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.11%)</title><rect x="68.3726%" y="293" width="0.1105%" height="15" fill="rgb(225,42,16)"/><text x="68.6226%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.11%)</title><rect x="68.3726%" y="277" width="0.1105%" height="15" fill="rgb(220,201,45)"/><text x="68.6226%" y="287.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.11%)</title><rect x="68.3726%" y="261" width="0.1105%" height="15" fill="rgb(225,33,4)"/><text x="68.6226%" y="271.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto (7 samples, 0.26%)</title><rect x="68.2622%" y="517" width="0.2577%" height="15" fill="rgb(224,33,50)"/><text x="68.5122%" y="527.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto_internal_pos (7 samples, 0.26%)</title><rect x="68.2622%" y="501" width="0.2577%" height="15" fill="rgb(246,198,51)"/><text x="68.5122%" y="511.50"></text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto (7 samples, 0.26%)</title><rect x="68.2622%" y="485" width="0.2577%" height="15" fill="rgb(205,22,4)"/><text x="68.5122%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (7 samples, 0.26%)</title><rect x="68.2622%" y="469" width="0.2577%" height="15" fill="rgb(206,3,8)"/><text x="68.5122%" y="479.50"></text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto::{{closure}} (7 samples, 0.26%)</title><rect x="68.2622%" y="453" width="0.2577%" height="15" fill="rgb(251,23,15)"/><text x="68.5122%" y="463.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (7 samples, 0.26%)</title><rect x="68.2622%" y="437" width="0.2577%" height="15" fill="rgb(252,88,28)"/><text x="68.5122%" y="447.50"></text></g><g><title>crossterm::command::write_command_ansi (7 samples, 0.26%)</title><rect x="68.2622%" y="421" width="0.2577%" height="15" fill="rgb(212,127,14)"/><text x="68.5122%" y="431.50"></text></g><g><title>&lt;crossterm::cursor::MoveTo as crossterm::command::Command&gt;::write_ansi (7 samples, 0.26%)</title><rect x="68.2622%" y="405" width="0.2577%" height="15" fill="rgb(247,145,37)"/><text x="68.5122%" y="415.50"></text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (7 samples, 0.26%)</title><rect x="68.2622%" y="389" width="0.2577%" height="15" fill="rgb(209,117,53)"/><text x="68.5122%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.26%)</title><rect x="68.2622%" y="373" width="0.2577%" height="15" fill="rgb(212,90,42)"/><text x="68.5122%" y="383.50"></text></g><g><title>core::fmt::write (7 samples, 0.26%)</title><rect x="68.2622%" y="357" width="0.2577%" height="15" fill="rgb(218,164,37)"/><text x="68.5122%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (4 samples, 0.15%)</title><rect x="68.3726%" y="341" width="0.1473%" height="15" fill="rgb(246,65,34)"/><text x="68.6226%" y="351.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (4 samples, 0.15%)</title><rect x="68.3726%" y="325" width="0.1473%" height="15" fill="rgb(231,100,33)"/><text x="68.6226%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (3 samples, 0.11%)</title><rect x="68.6303%" y="341" width="0.1105%" height="15" fill="rgb(228,126,14)"/><text x="68.8803%" y="351.50"></text></g><g><title>core::fmt::Write::write_char (3 samples, 0.11%)</title><rect x="68.6303%" y="325" width="0.1105%" height="15" fill="rgb(215,173,21)"/><text x="68.8803%" y="335.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char (7 samples, 0.26%)</title><rect x="68.5199%" y="501" width="0.2577%" height="15" fill="rgb(210,6,40)"/><text x="68.7699%" y="511.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::write (7 samples, 0.26%)</title><rect x="68.5199%" y="485" width="0.2577%" height="15" fill="rgb(212,48,18)"/><text x="68.7699%" y="495.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write (7 samples, 0.26%)</title><rect x="68.5199%" y="469" width="0.2577%" height="15" fill="rgb(230,214,11)"/><text x="68.7699%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (7 samples, 0.26%)</title><rect x="68.5199%" y="453" width="0.2577%" height="15" fill="rgb(254,105,39)"/><text x="68.7699%" y="463.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write::{{closure}} (7 samples, 0.26%)</title><rect x="68.5199%" y="437" width="0.2577%" height="15" fill="rgb(245,158,5)"/><text x="68.7699%" y="447.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (7 samples, 0.26%)</title><rect x="68.5199%" y="421" width="0.2577%" height="15" fill="rgb(249,208,11)"/><text x="68.7699%" y="431.50"></text></g><g><title>crossterm::command::write_command_ansi (7 samples, 0.26%)</title><rect x="68.5199%" y="405" width="0.2577%" height="15" fill="rgb(210,39,28)"/><text x="68.7699%" y="415.50"></text></g><g><title>&lt;crossterm::style::Print&lt;T&gt; as crossterm::command::Command&gt;::write_ansi (6 samples, 0.22%)</title><rect x="68.5567%" y="389" width="0.2209%" height="15" fill="rgb(211,56,53)"/><text x="68.8067%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (6 samples, 0.22%)</title><rect x="68.5567%" y="373" width="0.2209%" height="15" fill="rgb(226,201,30)"/><text x="68.8067%" y="383.50"></text></g><g><title>core::fmt::write (5 samples, 0.18%)</title><rect x="68.5935%" y="357" width="0.1841%" height="15" fill="rgb(239,101,34)"/><text x="68.8435%" y="367.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_from_terminal_start (19 samples, 0.70%)</title><rect x="68.2622%" y="533" width="0.6996%" height="15" fill="rgb(226,209,5)"/><text x="68.5122%" y="543.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write (12 samples, 0.44%)</title><rect x="68.5199%" y="517" width="0.4418%" height="15" fill="rgb(250,105,47)"/><text x="68.7699%" y="527.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg (5 samples, 0.18%)</title><rect x="68.7776%" y="501" width="0.1841%" height="15" fill="rgb(230,72,3)"/><text x="69.0276%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.18%)</title><rect x="68.7776%" y="485" width="0.1841%" height="15" fill="rgb(232,218,39)"/><text x="69.0276%" y="495.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg::{{closure}} (5 samples, 0.18%)</title><rect x="68.7776%" y="469" width="0.1841%" height="15" fill="rgb(248,166,6)"/><text x="69.0276%" y="479.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (5 samples, 0.18%)</title><rect x="68.7776%" y="453" width="0.1841%" height="15" fill="rgb(247,89,20)"/><text x="69.0276%" y="463.50"></text></g><g><title>crossterm::command::write_command_ansi (4 samples, 0.15%)</title><rect x="68.8144%" y="437" width="0.1473%" height="15" fill="rgb(248,130,54)"/><text x="69.0644%" y="447.50"></text></g><g><title>&lt;crossterm::style::SetForegroundColor as crossterm::command::Command&gt;::write_ansi (4 samples, 0.15%)</title><rect x="68.8144%" y="421" width="0.1473%" height="15" fill="rgb(234,196,4)"/><text x="69.0644%" y="431.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (4 samples, 0.15%)</title><rect x="68.8144%" y="405" width="0.1473%" height="15" fill="rgb(250,143,31)"/><text x="69.0644%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.15%)</title><rect x="68.8144%" y="389" width="0.1473%" height="15" fill="rgb(211,110,34)"/><text x="69.0644%" y="399.50"></text></g><g><title>core::fmt::write (3 samples, 0.11%)</title><rect x="68.8513%" y="373" width="0.1105%" height="15" fill="rgb(215,124,48)"/><text x="69.1013%" y="383.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input (1,214 samples, 44.70%)</title><rect x="24.3004%" y="549" width="44.6981%" height="15" fill="rgb(216,46,13)"/><text x="24.5504%" y="559.50">irust::irust::printer::Printer&lt;W&gt;::print_input</text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_character (1,219 samples, 44.88%)</title><rect x="24.3004%" y="565" width="44.8822%" height="15" fill="rgb(205,184,25)"/><text x="24.5504%" y="575.50">irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_character</text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::move_right_unbounded (5 samples, 0.18%)</title><rect x="68.9985%" y="549" width="0.1841%" height="15" fill="rgb(228,1,10)"/><text x="69.2485%" y="559.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::move_right_inner (5 samples, 0.18%)</title><rect x="68.9985%" y="533" width="0.1841%" height="15" fill="rgb(213,116,27)"/><text x="69.2485%" y="543.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto_internal_pos (5 samples, 0.18%)</title><rect x="68.9985%" y="517" width="0.1841%" height="15" fill="rgb(241,95,50)"/><text x="69.2485%" y="527.50"></text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto (5 samples, 0.18%)</title><rect x="68.9985%" y="501" width="0.1841%" height="15" fill="rgb(238,48,32)"/><text x="69.2485%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.18%)</title><rect x="68.9985%" y="485" width="0.1841%" height="15" fill="rgb(235,113,49)"/><text x="69.2485%" y="495.50"></text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto::{{closure}} (5 samples, 0.18%)</title><rect x="68.9985%" y="469" width="0.1841%" height="15" fill="rgb(205,127,43)"/><text x="69.2485%" y="479.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (5 samples, 0.18%)</title><rect x="68.9985%" y="453" width="0.1841%" height="15" fill="rgb(250,162,2)"/><text x="69.2485%" y="463.50"></text></g><g><title>crossterm::command::write_command_ansi (5 samples, 0.18%)</title><rect x="68.9985%" y="437" width="0.1841%" height="15" fill="rgb(220,13,41)"/><text x="69.2485%" y="447.50"></text></g><g><title>&lt;crossterm::cursor::MoveTo as crossterm::command::Command&gt;::write_ansi (4 samples, 0.15%)</title><rect x="69.0353%" y="421" width="0.1473%" height="15" fill="rgb(249,221,25)"/><text x="69.2853%" y="431.50"></text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (4 samples, 0.15%)</title><rect x="69.0353%" y="405" width="0.1473%" height="15" fill="rgb(215,208,19)"/><text x="69.2853%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.15%)</title><rect x="69.0353%" y="389" width="0.1473%" height="15" fill="rgb(236,175,2)"/><text x="69.2853%" y="399.50"></text></g><g><title>core::fmt::write (4 samples, 0.15%)</title><rect x="69.0353%" y="373" width="0.1473%" height="15" fill="rgb(241,52,2)"/><text x="69.2853%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.15%)</title><rect x="69.0353%" y="357" width="0.1473%" height="15" fill="rgb(248,140,14)"/><text x="69.2853%" y="367.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.15%)</title><rect x="69.0353%" y="341" width="0.1473%" height="15" fill="rgb(253,22,42)"/><text x="69.2853%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (4 samples, 0.15%)</title><rect x="69.0353%" y="325" width="0.1473%" height="15" fill="rgb(234,61,47)"/><text x="69.2853%" y="335.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.15%)</title><rect x="69.0353%" y="309" width="0.1473%" height="15" fill="rgb(208,226,15)"/><text x="69.2853%" y="319.50"></text></g><g><title>&lt;irust::irust::printer::cursor::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="69.0722%" y="293" width="0.1105%" height="15" fill="rgb(217,221,4)"/><text x="69.3222%" y="303.50"></text></g><g><title>&lt;irust::irust::buffer::Buffer as alloc::string::ToString&gt;::to_string (3 samples, 0.11%)</title><rect x="69.1826%" y="549" width="0.1105%" height="15" fill="rgb(212,174,34)"/><text x="69.4326%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.11%)</title><rect x="69.1826%" y="533" width="0.1105%" height="15" fill="rgb(253,83,4)"/><text x="69.4326%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (3 samples, 0.11%)</title><rect x="69.1826%" y="517" width="0.1105%" height="15" fill="rgb(250,195,49)"/><text x="69.4326%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (3 samples, 0.11%)</title><rect x="69.1826%" y="501" width="0.1105%" height="15" fill="rgb(241,192,25)"/><text x="69.4326%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (3 samples, 0.11%)</title><rect x="69.1826%" y="485" width="0.1105%" height="15" fill="rgb(208,124,10)"/><text x="69.4326%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.11%)</title><rect x="69.1826%" y="469" width="0.1105%" height="15" fill="rgb(222,33,0)"/><text x="69.4326%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.11%)</title><rect x="69.1826%" y="453" width="0.1105%" height="15" fill="rgb(234,209,28)"/><text x="69.4326%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.11%)</title><rect x="69.1826%" y="437" width="0.1105%" height="15" fill="rgb(224,11,23)"/><text x="69.4326%" y="447.50"></text></g><g><title>irust::utils::remove_comments (3 samples, 0.11%)</title><rect x="69.3299%" y="517" width="0.1105%" height="15" fill="rgb(232,99,1)"/><text x="69.5799%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.11%)</title><rect x="69.3299%" y="501" width="0.1105%" height="15" fill="rgb(237,95,45)"/><text x="69.5799%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (3 samples, 0.11%)</title><rect x="69.3299%" y="485" width="0.1105%" height="15" fill="rgb(208,109,11)"/><text x="69.5799%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (3 samples, 0.11%)</title><rect x="69.3299%" y="469" width="0.1105%" height="15" fill="rgb(216,190,48)"/><text x="69.5799%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.11%)</title><rect x="69.3299%" y="453" width="0.1105%" height="15" fill="rgb(251,171,36)"/><text x="69.5799%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.11%)</title><rect x="69.3299%" y="437" width="0.1105%" height="15" fill="rgb(230,62,22)"/><text x="69.5799%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.11%)</title><rect x="69.3299%" y="421" width="0.1105%" height="15" fill="rgb(225,114,35)"/><text x="69.5799%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.11%)</title><rect x="69.3299%" y="405" width="0.1105%" height="15" fill="rgb(215,118,42)"/><text x="69.5799%" y="415.50"></text></g><g><title>core::iter::adapters::filter_fold::{{closure}} (3 samples, 0.11%)</title><rect x="69.3299%" y="389" width="0.1105%" height="15" fill="rgb(243,119,21)"/><text x="69.5799%" y="399.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (3 samples, 0.11%)</title><rect x="69.3299%" y="373" width="0.1105%" height="15" fill="rgb(252,177,53)"/><text x="69.5799%" y="383.50"></text></g><g><title>irust::utils::remove_comments::{{closure}} (3 samples, 0.11%)</title><rect x="69.3299%" y="357" width="0.1105%" height="15" fill="rgb(237,209,29)"/><text x="69.5799%" y="367.50"></text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::incomplete_input (5 samples, 0.18%)</title><rect x="69.2931%" y="549" width="0.1841%" height="15" fill="rgb(212,65,23)"/><text x="69.5431%" y="559.50"></text></g><g><title>irust::utils::StringTools::unmatched_brackets (5 samples, 0.18%)</title><rect x="69.2931%" y="533" width="0.1841%" height="15" fill="rgb(230,222,46)"/><text x="69.5431%" y="543.50"></text></g><g><title>irust::irust::highlight::parse (5 samples, 0.18%)</title><rect x="69.5140%" y="517" width="0.1841%" height="15" fill="rgb(215,135,32)"/><text x="69.7640%" y="527.50"></text></g><g><title>irust::irust::highlight::highlight (9 samples, 0.33%)</title><rect x="69.4772%" y="533" width="0.3314%" height="15" fill="rgb(246,101,22)"/><text x="69.7272%" y="543.50"></text></g><g><title>irust::irust::highlight::theme::theme_color_to_term_color (3 samples, 0.11%)</title><rect x="69.6981%" y="517" width="0.1105%" height="15" fill="rgb(206,107,13)"/><text x="69.9481%" y="527.50"></text></g><g><title>&lt;crossterm::style::Print&lt;T&gt; as crossterm::command::Command&gt;::write_ansi (3 samples, 0.11%)</title><rect x="70.0663%" y="373" width="0.1105%" height="15" fill="rgb(250,100,44)"/><text x="70.3163%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.11%)</title><rect x="70.0663%" y="357" width="0.1105%" height="15" fill="rgb(231,147,38)"/><text x="70.3163%" y="367.50"></text></g><g><title>core::fmt::write (3 samples, 0.11%)</title><rect x="70.0663%" y="341" width="0.1105%" height="15" fill="rgb(229,8,40)"/><text x="70.3163%" y="351.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char (6 samples, 0.22%)</title><rect x="69.9926%" y="485" width="0.2209%" height="15" fill="rgb(221,135,30)"/><text x="70.2426%" y="495.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::write (5 samples, 0.18%)</title><rect x="70.0295%" y="469" width="0.1841%" height="15" fill="rgb(249,193,18)"/><text x="70.2795%" y="479.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write (5 samples, 0.18%)</title><rect x="70.0295%" y="453" width="0.1841%" height="15" fill="rgb(209,133,39)"/><text x="70.2795%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.18%)</title><rect x="70.0295%" y="437" width="0.1841%" height="15" fill="rgb(232,100,14)"/><text x="70.2795%" y="447.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write::{{closure}} (5 samples, 0.18%)</title><rect x="70.0295%" y="421" width="0.1841%" height="15" fill="rgb(224,185,1)"/><text x="70.2795%" y="431.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (5 samples, 0.18%)</title><rect x="70.0295%" y="405" width="0.1841%" height="15" fill="rgb(223,139,8)"/><text x="70.2795%" y="415.50"></text></g><g><title>crossterm::command::write_command_ansi (4 samples, 0.15%)</title><rect x="70.0663%" y="389" width="0.1473%" height="15" fill="rgb(232,213,38)"/><text x="70.3163%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="70.2872%" y="261" width="0.1105%" height="15" fill="rgb(207,94,22)"/><text x="70.5372%" y="271.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="70.2872%" y="245" width="0.1105%" height="15" fill="rgb(219,183,54)"/><text x="70.5372%" y="255.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="70.2872%" y="229" width="0.1105%" height="15" fill="rgb(216,185,54)"/><text x="70.5372%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.15%)</title><rect x="70.2872%" y="341" width="0.1473%" height="15" fill="rgb(254,217,39)"/><text x="70.5372%" y="351.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.15%)</title><rect x="70.2872%" y="325" width="0.1473%" height="15" fill="rgb(240,178,23)"/><text x="70.5372%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (4 samples, 0.15%)</title><rect x="70.2872%" y="309" width="0.1473%" height="15" fill="rgb(218,11,47)"/><text x="70.5372%" y="319.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.15%)</title><rect x="70.2872%" y="293" width="0.1473%" height="15" fill="rgb(218,51,51)"/><text x="70.5372%" y="303.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (4 samples, 0.15%)</title><rect x="70.2872%" y="277" width="0.1473%" height="15" fill="rgb(238,126,27)"/><text x="70.5372%" y="287.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_char (16 samples, 0.59%)</title><rect x="69.9190%" y="517" width="0.5891%" height="15" fill="rgb(249,202,22)"/><text x="70.1690%" y="527.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char_with_color (15 samples, 0.55%)</title><rect x="69.9558%" y="501" width="0.5523%" height="15" fill="rgb(254,195,49)"/><text x="70.2058%" y="511.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg (8 samples, 0.29%)</title><rect x="70.2135%" y="485" width="0.2946%" height="15" fill="rgb(208,123,14)"/><text x="70.4635%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (8 samples, 0.29%)</title><rect x="70.2135%" y="469" width="0.2946%" height="15" fill="rgb(224,200,8)"/><text x="70.4635%" y="479.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg::{{closure}} (8 samples, 0.29%)</title><rect x="70.2135%" y="453" width="0.2946%" height="15" fill="rgb(217,61,36)"/><text x="70.4635%" y="463.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (8 samples, 0.29%)</title><rect x="70.2135%" y="437" width="0.2946%" height="15" fill="rgb(206,35,45)"/><text x="70.4635%" y="447.50"></text></g><g><title>crossterm::command::write_command_ansi (8 samples, 0.29%)</title><rect x="70.2135%" y="421" width="0.2946%" height="15" fill="rgb(217,65,33)"/><text x="70.4635%" y="431.50"></text></g><g><title>&lt;crossterm::style::SetForegroundColor as crossterm::command::Command&gt;::write_ansi (8 samples, 0.29%)</title><rect x="70.2135%" y="405" width="0.2946%" height="15" fill="rgb(222,158,48)"/><text x="70.4635%" y="415.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (8 samples, 0.29%)</title><rect x="70.2135%" y="389" width="0.2946%" height="15" fill="rgb(254,2,54)"/><text x="70.4635%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (8 samples, 0.29%)</title><rect x="70.2135%" y="373" width="0.2946%" height="15" fill="rgb(250,143,38)"/><text x="70.4635%" y="383.50"></text></g><g><title>core::fmt::write (8 samples, 0.29%)</title><rect x="70.2135%" y="357" width="0.2946%" height="15" fill="rgb(248,25,0)"/><text x="70.4635%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (4 samples, 0.15%)</title><rect x="70.6554%" y="309" width="0.1473%" height="15" fill="rgb(206,152,27)"/><text x="70.9054%" y="319.50"></text></g><g><title>core::fmt::Write::write_char (4 samples, 0.15%)</title><rect x="70.6554%" y="293" width="0.1473%" height="15" fill="rgb(240,77,30)"/><text x="70.9054%" y="303.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.15%)</title><rect x="70.6554%" y="277" width="0.1473%" height="15" fill="rgb(231,5,3)"/><text x="70.9054%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (4 samples, 0.15%)</title><rect x="70.6554%" y="261" width="0.1473%" height="15" fill="rgb(207,226,32)"/><text x="70.9054%" y="271.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.15%)</title><rect x="70.6554%" y="245" width="0.1473%" height="15" fill="rgb(222,207,47)"/><text x="70.9054%" y="255.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="70.6922%" y="229" width="0.1105%" height="15" fill="rgb(229,115,45)"/><text x="70.9422%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="70.6922%" y="213" width="0.1105%" height="15" fill="rgb(224,191,6)"/><text x="70.9422%" y="223.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="70.6922%" y="197" width="0.1105%" height="15" fill="rgb(230,227,24)"/><text x="70.9422%" y="207.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="70.6922%" y="181" width="0.1105%" height="15" fill="rgb(228,80,19)"/><text x="70.9422%" y="191.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char (7 samples, 0.26%)</title><rect x="70.5817%" y="469" width="0.2577%" height="15" fill="rgb(247,229,0)"/><text x="70.8317%" y="479.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::write (7 samples, 0.26%)</title><rect x="70.5817%" y="453" width="0.2577%" height="15" fill="rgb(237,194,15)"/><text x="70.8317%" y="463.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write (7 samples, 0.26%)</title><rect x="70.5817%" y="437" width="0.2577%" height="15" fill="rgb(219,203,20)"/><text x="70.8317%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (6 samples, 0.22%)</title><rect x="70.6186%" y="421" width="0.2209%" height="15" fill="rgb(234,128,8)"/><text x="70.8686%" y="431.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write::{{closure}} (6 samples, 0.22%)</title><rect x="70.6186%" y="405" width="0.2209%" height="15" fill="rgb(248,202,8)"/><text x="70.8686%" y="415.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (6 samples, 0.22%)</title><rect x="70.6186%" y="389" width="0.2209%" height="15" fill="rgb(206,104,37)"/><text x="70.8686%" y="399.50"></text></g><g><title>crossterm::command::write_command_ansi (6 samples, 0.22%)</title><rect x="70.6186%" y="373" width="0.2209%" height="15" fill="rgb(223,8,27)"/><text x="70.8686%" y="383.50"></text></g><g><title>&lt;crossterm::style::Print&lt;T&gt; as crossterm::command::Command&gt;::write_ansi (6 samples, 0.22%)</title><rect x="70.6186%" y="357" width="0.2209%" height="15" fill="rgb(216,217,28)"/><text x="70.8686%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (6 samples, 0.22%)</title><rect x="70.6186%" y="341" width="0.2209%" height="15" fill="rgb(249,199,1)"/><text x="70.8686%" y="351.50"></text></g><g><title>core::fmt::write (6 samples, 0.22%)</title><rect x="70.6186%" y="325" width="0.2209%" height="15" fill="rgb(240,85,17)"/><text x="70.8686%" y="335.50"></text></g><g><title>&lt;irust::irust::printer::writer::raw::Raw&lt;W&gt; as std::io::Write&gt;::write (4 samples, 0.15%)</title><rect x="70.8763%" y="261" width="0.1473%" height="15" fill="rgb(206,108,45)"/><text x="71.1263%" y="271.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (4 samples, 0.15%)</title><rect x="70.8763%" y="245" width="0.1473%" height="15" fill="rgb(245,210,41)"/><text x="71.1263%" y="255.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (4 samples, 0.15%)</title><rect x="70.8763%" y="229" width="0.1473%" height="15" fill="rgb(206,13,37)"/><text x="71.1263%" y="239.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (4 samples, 0.15%)</title><rect x="70.8763%" y="213" width="0.1473%" height="15" fill="rgb(250,61,18)"/><text x="71.1263%" y="223.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (4 samples, 0.15%)</title><rect x="70.8763%" y="197" width="0.1473%" height="15" fill="rgb(235,172,48)"/><text x="71.1263%" y="207.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.11%)</title><rect x="70.9131%" y="181" width="0.1105%" height="15" fill="rgb(249,201,17)"/><text x="71.1631%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="70.9131%" y="165" width="0.1105%" height="15" fill="rgb(219,208,6)"/><text x="71.1631%" y="175.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (3 samples, 0.11%)</title><rect x="70.9131%" y="149" width="0.1105%" height="15" fill="rgb(248,31,23)"/><text x="71.1631%" y="159.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 0.11%)</title><rect x="70.9131%" y="133" width="0.1105%" height="15" fill="rgb(245,15,42)"/><text x="71.1631%" y="143.50"></text></g><g><title>__GI___libc_write (3 samples, 0.11%)</title><rect x="70.9131%" y="117" width="0.1105%" height="15" fill="rgb(222,217,39)"/><text x="71.1631%" y="127.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.22%)</title><rect x="70.8395%" y="325" width="0.2209%" height="15" fill="rgb(210,219,27)"/><text x="71.0895%" y="335.50"></text></g><g><title>&lt;crossterm::command::write_command_ansi::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.18%)</title><rect x="70.8763%" y="309" width="0.1841%" height="15" fill="rgb(252,166,36)"/><text x="71.1263%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 samples, 0.18%)</title><rect x="70.8763%" y="293" width="0.1841%" height="15" fill="rgb(245,132,34)"/><text x="71.1263%" y="303.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.18%)</title><rect x="70.8763%" y="277" width="0.1841%" height="15" fill="rgb(236,54,3)"/><text x="71.1263%" y="287.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_str (16 samples, 0.59%)</title><rect x="70.5081%" y="517" width="0.5891%" height="15" fill="rgb(241,173,43)"/><text x="70.7581%" y="527.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_char (15 samples, 0.55%)</title><rect x="70.5449%" y="501" width="0.5523%" height="15" fill="rgb(215,190,9)"/><text x="70.7949%" y="511.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char_with_color (14 samples, 0.52%)</title><rect x="70.5817%" y="485" width="0.5155%" height="15" fill="rgb(242,101,16)"/><text x="70.8317%" y="495.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg (7 samples, 0.26%)</title><rect x="70.8395%" y="469" width="0.2577%" height="15" fill="rgb(223,190,21)"/><text x="71.0895%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (7 samples, 0.26%)</title><rect x="70.8395%" y="453" width="0.2577%" height="15" fill="rgb(215,228,25)"/><text x="71.0895%" y="463.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::set_fg::{{closure}} (7 samples, 0.26%)</title><rect x="70.8395%" y="437" width="0.2577%" height="15" fill="rgb(225,36,22)"/><text x="71.0895%" y="447.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (7 samples, 0.26%)</title><rect x="70.8395%" y="421" width="0.2577%" height="15" fill="rgb(251,106,46)"/><text x="71.0895%" y="431.50"></text></g><g><title>crossterm::command::write_command_ansi (7 samples, 0.26%)</title><rect x="70.8395%" y="405" width="0.2577%" height="15" fill="rgb(208,90,1)"/><text x="71.0895%" y="415.50"></text></g><g><title>&lt;crossterm::style::SetForegroundColor as crossterm::command::Command&gt;::write_ansi (7 samples, 0.26%)</title><rect x="70.8395%" y="389" width="0.2577%" height="15" fill="rgb(243,10,4)"/><text x="71.0895%" y="399.50"></text></g><g><title>crossterm::style::ansi::set_fg_csi_sequence (7 samples, 0.26%)</title><rect x="70.8395%" y="373" width="0.2577%" height="15" fill="rgb(212,137,27)"/><text x="71.0895%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.26%)</title><rect x="70.8395%" y="357" width="0.2577%" height="15" fill="rgb(231,220,49)"/><text x="71.0895%" y="367.50"></text></g><g><title>core::fmt::write (7 samples, 0.26%)</title><rect x="70.8395%" y="341" width="0.2577%" height="15" fill="rgb(237,96,20)"/><text x="71.0895%" y="351.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto_next_row_terminal_start (3 samples, 0.11%)</title><rect x="71.0972%" y="517" width="0.1105%" height="15" fill="rgb(239,229,30)"/><text x="71.3472%" y="527.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto (3 samples, 0.11%)</title><rect x="71.0972%" y="501" width="0.1105%" height="15" fill="rgb(219,65,33)"/><text x="71.3472%" y="511.50"></text></g><g><title>irust::irust::printer::cursor::Cursor&lt;W&gt;::goto_internal_pos (3 samples, 0.11%)</title><rect x="71.0972%" y="485" width="0.1105%" height="15" fill="rgb(243,134,7)"/><text x="71.3472%" y="495.50"></text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto (3 samples, 0.11%)</title><rect x="71.0972%" y="469" width="0.1105%" height="15" fill="rgb(216,177,54)"/><text x="71.3472%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.11%)</title><rect x="71.0972%" y="453" width="0.1105%" height="15" fill="rgb(211,160,20)"/><text x="71.3472%" y="463.50"></text></g><g><title>irust::irust::printer::cursor::raw::Raw&lt;W&gt;::goto::{{closure}} (3 samples, 0.11%)</title><rect x="71.0972%" y="437" width="0.1105%" height="15" fill="rgb(239,85,39)"/><text x="71.3472%" y="447.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (3 samples, 0.11%)</title><rect x="71.0972%" y="421" width="0.1105%" height="15" fill="rgb(232,125,22)"/><text x="71.3472%" y="431.50"></text></g><g><title>crossterm::command::write_command_ansi (3 samples, 0.11%)</title><rect x="71.0972%" y="405" width="0.1105%" height="15" fill="rgb(244,57,34)"/><text x="71.3472%" y="415.50"></text></g><g><title>&lt;crossterm::cursor::MoveTo as crossterm::command::Command&gt;::write_ansi (3 samples, 0.11%)</title><rect x="71.0972%" y="389" width="0.1105%" height="15" fill="rgb(214,203,32)"/><text x="71.3472%" y="399.50"></text></g><g><title>crossterm::cursor::ansi::move_to_csi_sequence (3 samples, 0.11%)</title><rect x="71.0972%" y="373" width="0.1105%" height="15" fill="rgb(207,58,43)"/><text x="71.3472%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.11%)</title><rect x="71.0972%" y="357" width="0.1105%" height="15" fill="rgb(215,193,15)"/><text x="71.3472%" y="367.50"></text></g><g><title>core::fmt::write (3 samples, 0.11%)</title><rect x="71.0972%" y="341" width="0.1105%" height="15" fill="rgb(232,15,44)"/><text x="71.3472%" y="351.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input_inner (40 samples, 1.47%)</title><rect x="69.8454%" y="533" width="1.4728%" height="15" fill="rgb(212,3,48)"/><text x="70.0954%" y="543.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write (3 samples, 0.11%)</title><rect x="71.2077%" y="517" width="0.1105%" height="15" fill="rgb(218,128,7)"/><text x="71.4577%" y="527.50"></text></g><g><title>irust::irust::printer::writer::Writer&lt;W&gt;::write_char (3 samples, 0.11%)</title><rect x="71.2077%" y="501" width="0.1105%" height="15" fill="rgb(226,216,39)"/><text x="71.4577%" y="511.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::write (3 samples, 0.11%)</title><rect x="71.2077%" y="485" width="0.1105%" height="15" fill="rgb(243,47,51)"/><text x="71.4577%" y="495.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write (3 samples, 0.11%)</title><rect x="71.2077%" y="469" width="0.1105%" height="15" fill="rgb(241,183,40)"/><text x="71.4577%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.11%)</title><rect x="71.2077%" y="453" width="0.1105%" height="15" fill="rgb(231,217,32)"/><text x="71.4577%" y="463.50"></text></g><g><title>irust::irust::printer::writer::raw::Raw&lt;W&gt;::_write::{{closure}} (3 samples, 0.11%)</title><rect x="71.2077%" y="437" width="0.1105%" height="15" fill="rgb(229,61,38)"/><text x="71.4577%" y="447.50"></text></g><g><title>&lt;T as crossterm::command::QueueableCommand&gt;::queue (3 samples, 0.11%)</title><rect x="71.2077%" y="421" width="0.1105%" height="15" fill="rgb(225,210,5)"/><text x="71.4577%" y="431.50"></text></g><g><title>crossterm::command::write_command_ansi (3 samples, 0.11%)</title><rect x="71.2077%" y="405" width="0.1105%" height="15" fill="rgb(231,79,45)"/><text x="71.4577%" y="415.50"></text></g><g><title>&lt;crossterm::style::Print&lt;T&gt; as crossterm::command::Command&gt;::write_ansi (3 samples, 0.11%)</title><rect x="71.2077%" y="389" width="0.1105%" height="15" fill="rgb(224,100,7)"/><text x="71.4577%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.11%)</title><rect x="71.2077%" y="373" width="0.1105%" height="15" fill="rgb(241,198,18)"/><text x="71.4577%" y="383.50"></text></g><g><title>core::fmt::write (3 samples, 0.11%)</title><rect x="71.2077%" y="357" width="0.1105%" height="15" fill="rgb(252,97,53)"/><text x="71.4577%" y="367.50"></text></g><g><title>irust::irust::printer::Printer&lt;W&gt;::print_input (52 samples, 1.91%)</title><rect x="69.4772%" y="549" width="1.9146%" height="15" fill="rgb(220,88,7)"/><text x="69.7272%" y="559.50">i..</text></g><g><title>irust::irust::IRust::handle_input_event (1,280 samples, 47.13%)</title><rect x="24.3004%" y="581" width="47.1281%" height="15" fill="rgb(213,176,14)"/><text x="24.5504%" y="591.50">irust::irust::IRust::handle_input_event</text></g><g><title>irust::irust::events::&lt;impl irust::irust::IRust&gt;::handle_enter (61 samples, 2.25%)</title><rect x="69.1826%" y="565" width="2.2459%" height="15" fill="rgb(246,73,7)"/><text x="69.4326%" y="575.50">i..</text></g><g><title>irust::irust::IRust::prepare (3 samples, 0.11%)</title><rect x="71.4286%" y="581" width="0.1105%" height="15" fill="rgb(245,64,36)"/><text x="71.6786%" y="591.50"></text></g><g><title>irust::irust::repl::Repl::prepare_ground (3 samples, 0.11%)</title><rect x="71.4286%" y="565" width="0.1105%" height="15" fill="rgb(245,80,10)"/><text x="71.6786%" y="575.50"></text></g><g><title>irust::irust::cargo_cmds::cargo_new (3 samples, 0.11%)</title><rect x="71.4286%" y="549" width="0.1105%" height="15" fill="rgb(232,107,50)"/><text x="71.6786%" y="559.50"></text></g><g><title>irust::irust::IRust::run (1,371 samples, 50.48%)</title><rect x="21.0972%" y="597" width="50.4786%" height="15" fill="rgb(253,3,0)"/><text x="21.3472%" y="607.50">irust::irust::IRust::run</text></g><g><title>std::io::Read::read_to_string (11 samples, 0.41%)</title><rect x="71.5758%" y="581" width="0.4050%" height="15" fill="rgb(212,99,53)"/><text x="71.8258%" y="591.50"></text></g><g><title>std::io::append_to_string (11 samples, 0.41%)</title><rect x="71.5758%" y="565" width="0.4050%" height="15" fill="rgb(249,111,54)"/><text x="71.8258%" y="575.50"></text></g><g><title>std::io::Read::read_to_string::{{closure}} (11 samples, 0.41%)</title><rect x="71.5758%" y="549" width="0.4050%" height="15" fill="rgb(249,55,30)"/><text x="71.8258%" y="559.50"></text></g><g><title>std::io::read_to_end (11 samples, 0.41%)</title><rect x="71.5758%" y="533" width="0.4050%" height="15" fill="rgb(237,47,42)"/><text x="71.8258%" y="543.50"></text></g><g><title>std::io::read_to_end_with_reservation (11 samples, 0.41%)</title><rect x="71.5758%" y="517" width="0.4050%" height="15" fill="rgb(211,20,18)"/><text x="71.8258%" y="527.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (11 samples, 0.41%)</title><rect x="71.5758%" y="501" width="0.4050%" height="15" fill="rgb(231,203,46)"/><text x="71.8258%" y="511.50"></text></g><g><title>std::sys::unix::fs::File::read (11 samples, 0.41%)</title><rect x="71.5758%" y="485" width="0.4050%" height="15" fill="rgb(237,142,3)"/><text x="71.8258%" y="495.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (11 samples, 0.41%)</title><rect x="71.5758%" y="469" width="0.4050%" height="15" fill="rgb(241,107,1)"/><text x="71.8258%" y="479.50"></text></g><g><title>__GI___read (11 samples, 0.41%)</title><rect x="71.5758%" y="453" width="0.4050%" height="15" fill="rgb(229,83,13)"/><text x="71.8258%" y="463.50"></text></g><g><title>std::panic::catch_unwind (1,397 samples, 51.44%)</title><rect x="20.6186%" y="725" width="51.4359%" height="15" fill="rgb(241,91,40)"/><text x="20.8686%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,397 samples, 51.44%)</title><rect x="20.6186%" y="709" width="51.4359%" height="15" fill="rgb(225,3,45)"/><text x="20.8686%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,397 samples, 51.44%)</title><rect x="20.6186%" y="693" width="51.4359%" height="15" fill="rgb(244,223,14)"/><text x="20.8686%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,397 samples, 51.44%)</title><rect x="20.6186%" y="677" width="51.4359%" height="15" fill="rgb(224,124,37)"/><text x="20.8686%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,397 samples, 51.44%)</title><rect x="20.6186%" y="661" width="51.4359%" height="15" fill="rgb(251,171,30)"/><text x="20.8686%" y="671.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,397 samples, 51.44%)</title><rect x="20.6186%" y="645" width="51.4359%" height="15" fill="rgb(236,46,54)"/><text x="20.8686%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,397 samples, 51.44%)</title><rect x="20.6186%" y="629" width="51.4359%" height="15" fill="rgb(245,213,5)"/><text x="20.8686%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>irust::main (1,397 samples, 51.44%)</title><rect x="20.6186%" y="613" width="51.4359%" height="15" fill="rgb(230,144,27)"/><text x="20.8686%" y="623.50">irust::main</text></g><g><title>irust::irust::options::Options::new (13 samples, 0.48%)</title><rect x="71.5758%" y="597" width="0.4786%" height="15" fill="rgb(220,86,6)"/><text x="71.8258%" y="607.50"></text></g><g><title>__libc_start_main (1,398 samples, 51.47%)</title><rect x="20.6186%" y="773" width="51.4728%" height="15" fill="rgb(240,20,13)"/><text x="20.8686%" y="783.50">__libc_start_main</text></g><g><title>main (1,398 samples, 51.47%)</title><rect x="20.6186%" y="757" width="51.4728%" height="15" fill="rgb(217,89,34)"/><text x="20.8686%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (1,398 samples, 51.47%)</title><rect x="20.6186%" y="741" width="51.4728%" height="15" fill="rgb(229,13,5)"/><text x="20.8686%" y="751.50">std::rt::lang_start_internal</text></g><g><title>_start (1,409 samples, 51.88%)</title><rect x="20.3240%" y="789" width="51.8778%" height="15" fill="rgb(244,67,35)"/><text x="20.5740%" y="799.50">_start</text></g><g><title>_dl_start (3 samples, 0.11%)</title><rect x="72.0913%" y="773" width="0.1105%" height="15" fill="rgb(221,40,2)"/><text x="72.3413%" y="783.50"></text></g><g><title>_dl_sysdep_start (3 samples, 0.11%)</title><rect x="72.0913%" y="757" width="0.1105%" height="15" fill="rgb(237,157,21)"/><text x="72.3413%" y="767.50"></text></g><g><title>anon.770a8cb082b6842cb73cdf5703ac67f1.38.llvm.12529869493206368621 (4 samples, 0.15%)</title><rect x="72.2018%" y="789" width="0.1473%" height="15" fill="rgb(222,94,11)"/><text x="72.4518%" y="799.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.15%)</title><rect x="72.2018%" y="773" width="0.1473%" height="15" fill="rgb(249,113,6)"/><text x="72.4518%" y="783.50"></text></g><g><title>anon.ff96c911f0c0159b9f235f51a770bdae.7.llvm.4603820615464676591 (5 samples, 0.18%)</title><rect x="72.4227%" y="789" width="0.1841%" height="15" fill="rgb(238,137,36)"/><text x="72.6727%" y="799.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.18%)</title><rect x="72.4227%" y="773" width="0.1841%" height="15" fill="rgb(210,102,26)"/><text x="72.6727%" y="783.50"></text></g><g><title>irust (1,781 samples, 65.57%)</title><rect x="7.0692%" y="805" width="65.5744%" height="15" fill="rgb(218,30,30)"/><text x="7.3192%" y="815.50">irust</text></g><g><title>[[heap]] (4 samples, 0.15%)</title><rect x="72.6436%" y="789" width="0.1473%" height="15" fill="rgb(214,67,26)"/><text x="72.8936%" y="799.50"></text></g><g><title>[ld] (8 samples, 0.29%)</title><rect x="73.2695%" y="661" width="0.2946%" height="15" fill="rgb(251,9,53)"/><text x="73.5195%" y="671.50"></text></g><g><title>__GI_fnmatch (3 samples, 0.11%)</title><rect x="73.6009%" y="661" width="0.1105%" height="15" fill="rgb(228,204,25)"/><text x="73.8509%" y="671.50"></text></g><g><title>_bfd_elf_make_section_from_shdr (5 samples, 0.18%)</title><rect x="74.0059%" y="613" width="0.1841%" height="15" fill="rgb(207,153,8)"/><text x="74.2559%" y="623.50"></text></g><g><title>bfd_make_section_anyway_with_flags (3 samples, 0.11%)</title><rect x="74.0795%" y="597" width="0.1105%" height="15" fill="rgb(242,9,16)"/><text x="74.3295%" y="607.50"></text></g><g><title>bfd_elf64_object_p (11 samples, 0.41%)</title><rect x="73.8586%" y="645" width="0.4050%" height="15" fill="rgb(217,211,10)"/><text x="74.1086%" y="655.50"></text></g><g><title>bfd_section_from_shdr (9 samples, 0.33%)</title><rect x="73.9323%" y="629" width="0.3314%" height="15" fill="rgb(219,228,52)"/><text x="74.1823%" y="639.50"></text></g><g><title>[ld] (38 samples, 1.40%)</title><rect x="72.9013%" y="677" width="1.3991%" height="15" fill="rgb(231,92,29)"/><text x="73.1513%" y="687.50"></text></g><g><title>bfd_check_format_matches (14 samples, 0.52%)</title><rect x="73.7850%" y="661" width="0.5155%" height="15" fill="rgb(232,8,23)"/><text x="74.0350%" y="671.50"></text></g><g><title>bfd_hash_insert (3 samples, 0.11%)</title><rect x="74.4845%" y="629" width="0.1105%" height="15" fill="rgb(216,211,34)"/><text x="74.7345%" y="639.50"></text></g><g><title>[libbfd-2.35.1.so] (7 samples, 0.26%)</title><rect x="74.4477%" y="661" width="0.2577%" height="15" fill="rgb(236,151,0)"/><text x="74.6977%" y="671.50"></text></g><g><title>bfd_link_hash_lookup (6 samples, 0.22%)</title><rect x="74.4845%" y="645" width="0.2209%" height="15" fill="rgb(209,168,3)"/><text x="74.7345%" y="655.50"></text></g><g><title>bfd_hash_lookup (3 samples, 0.11%)</title><rect x="74.5950%" y="629" width="0.1105%" height="15" fill="rgb(208,129,28)"/><text x="74.8450%" y="639.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.18%)</title><rect x="74.7054%" y="661" width="0.1841%" height="15" fill="rgb(229,78,22)"/><text x="74.9554%" y="671.50"></text></g><g><title>[ld] (61 samples, 2.25%)</title><rect x="72.9013%" y="693" width="2.2459%" height="15" fill="rgb(228,187,13)"/><text x="73.1513%" y="703.50">[..</text></g><g><title>bfd_elf_link_add_symbols (22 samples, 0.81%)</title><rect x="74.3373%" y="677" width="0.8100%" height="15" fill="rgb(240,119,24)"/><text x="74.5873%" y="687.50"></text></g><g><title>bfd_elf_link_add_symbols (5 samples, 0.18%)</title><rect x="74.9632%" y="661" width="0.1841%" height="15" fill="rgb(209,194,42)"/><text x="75.2132%" y="671.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.18%)</title><rect x="75.4050%" y="677" width="0.1841%" height="15" fill="rgb(247,200,46)"/><text x="75.6550%" y="687.50"></text></g><g><title>[ld] (74 samples, 2.72%)</title><rect x="72.9013%" y="709" width="2.7246%" height="15" fill="rgb(218,76,16)"/><text x="73.1513%" y="719.50">[l..</text></g><g><title>bfd_elf_link_add_symbols (12 samples, 0.44%)</title><rect x="75.1841%" y="693" width="0.4418%" height="15" fill="rgb(225,21,48)"/><text x="75.4341%" y="703.50"></text></g><g><title>bfd_elf_size_dynamic_sections (5 samples, 0.18%)</title><rect x="75.6996%" y="709" width="0.1841%" height="15" fill="rgb(239,223,50)"/><text x="75.9496%" y="719.50"></text></g><g><title>bfd_link_hash_traverse (3 samples, 0.11%)</title><rect x="75.7732%" y="693" width="0.1105%" height="15" fill="rgb(244,45,21)"/><text x="76.0232%" y="703.50"></text></g><g><title>[ld] (84 samples, 3.09%)</title><rect x="72.8277%" y="725" width="3.0928%" height="15" fill="rgb(232,33,43)"/><text x="73.0777%" y="735.50">[ld]</text></g><g><title>bfd_get_full_section_contents (3 samples, 0.11%)</title><rect x="75.9573%" y="693" width="0.1105%" height="15" fill="rgb(209,8,3)"/><text x="76.2073%" y="703.50"></text></g><g><title>_bfd_elf_link_check_relocs (5 samples, 0.18%)</title><rect x="75.9205%" y="725" width="0.1841%" height="15" fill="rgb(214,25,53)"/><text x="76.1705%" y="735.50"></text></g><g><title>[libbfd-2.35.1.so] (4 samples, 0.15%)</title><rect x="75.9573%" y="709" width="0.1473%" height="15" fill="rgb(254,186,54)"/><text x="76.2073%" y="719.50"></text></g><g><title>[libbfd-2.35.1.so] (3 samples, 0.11%)</title><rect x="76.1414%" y="693" width="0.1105%" height="15" fill="rgb(208,174,49)"/><text x="76.3914%" y="703.50"></text></g><g><title>_bfd_elf_merge_sections (8 samples, 0.29%)</title><rect x="76.1046%" y="725" width="0.2946%" height="15" fill="rgb(233,191,51)"/><text x="76.3546%" y="735.50"></text></g><g><title>[libbfd-2.35.1.so] (7 samples, 0.26%)</title><rect x="76.1414%" y="709" width="0.2577%" height="15" fill="rgb(222,134,10)"/><text x="76.3914%" y="719.50"></text></g><g><title>__GI___qsort_r (4 samples, 0.15%)</title><rect x="76.2518%" y="693" width="0.1473%" height="15" fill="rgb(230,226,20)"/><text x="76.5018%" y="703.50"></text></g><g><title>msort_with_tmp.part.0 (4 samples, 0.15%)</title><rect x="76.2518%" y="677" width="0.1473%" height="15" fill="rgb(251,111,25)"/><text x="76.5018%" y="687.50"></text></g><g><title>msort_with_tmp.part.0 (3 samples, 0.11%)</title><rect x="76.2887%" y="661" width="0.1105%" height="15" fill="rgb(224,40,46)"/><text x="76.5387%" y="671.50"></text></g><g><title>[libbfd-2.35.1.so] (4 samples, 0.15%)</title><rect x="76.4359%" y="693" width="0.1473%" height="15" fill="rgb(236,108,47)"/><text x="76.6859%" y="703.50"></text></g><g><title>_bfd_elf_rela_local_sym (8 samples, 0.29%)</title><rect x="76.5832%" y="693" width="0.2946%" height="15" fill="rgb(234,93,0)"/><text x="76.8332%" y="703.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.18%)</title><rect x="76.6937%" y="677" width="0.1841%" height="15" fill="rgb(224,213,32)"/><text x="76.9437%" y="687.50"></text></g><g><title>[libbfd-2.35.1.so] (5 samples, 0.18%)</title><rect x="76.6937%" y="661" width="0.1841%" height="15" fill="rgb(251,11,48)"/><text x="76.9437%" y="671.50"></text></g><g><title>[libbfd-2.35.1.so] (16 samples, 0.59%)</title><rect x="76.4359%" y="709" width="0.5891%" height="15" fill="rgb(236,173,5)"/><text x="76.6859%" y="719.50"></text></g><g><title>bfd_elf_sym_name (4 samples, 0.15%)</title><rect x="77.0250%" y="709" width="0.1473%" height="15" fill="rgb(230,95,12)"/><text x="77.2750%" y="719.50"></text></g><g><title>bfd_elf_final_link (30 samples, 1.10%)</title><rect x="76.3991%" y="725" width="1.1046%" height="15" fill="rgb(232,209,1)"/><text x="76.6491%" y="735.50"></text></g><g><title>bfd_set_section_contents (6 samples, 0.22%)</title><rect x="77.2828%" y="709" width="0.2209%" height="15" fill="rgb(232,6,1)"/><text x="77.5328%" y="719.50"></text></g><g><title>_bfd_elf_set_section_contents (6 samples, 0.22%)</title><rect x="77.2828%" y="693" width="0.2209%" height="15" fill="rgb(210,224,50)"/><text x="77.5328%" y="703.50"></text></g><g><title>bfd_seek (4 samples, 0.15%)</title><rect x="77.3564%" y="677" width="0.1473%" height="15" fill="rgb(228,127,35)"/><text x="77.6064%" y="687.50"></text></g><g><title>__GI___fseeko64 (4 samples, 0.15%)</title><rect x="77.3564%" y="661" width="0.1473%" height="15" fill="rgb(245,102,45)"/><text x="77.6064%" y="671.50"></text></g><g><title>__GI__IO_file_seekoff (4 samples, 0.15%)</title><rect x="77.3564%" y="645" width="0.1473%" height="15" fill="rgb(214,1,49)"/><text x="77.6064%" y="655.50"></text></g><g><title>__GI__IO_switch_to_get_mode (4 samples, 0.15%)</title><rect x="77.3564%" y="629" width="0.1473%" height="15" fill="rgb(226,163,40)"/><text x="77.6064%" y="639.50"></text></g><g><title>_IO_new_do_write (4 samples, 0.15%)</title><rect x="77.3564%" y="613" width="0.1473%" height="15" fill="rgb(239,212,28)"/><text x="77.6064%" y="623.50"></text></g><g><title>new_do_write (4 samples, 0.15%)</title><rect x="77.3564%" y="597" width="0.1473%" height="15" fill="rgb(220,20,13)"/><text x="77.6064%" y="607.50"></text></g><g><title>_bfd_elf_gc_mark_extra_sections (3 samples, 0.11%)</title><rect x="77.5405%" y="709" width="0.1105%" height="15" fill="rgb(210,164,35)"/><text x="77.7905%" y="719.50"></text></g><g><title>_bfd_elf_gc_mark (3 samples, 0.11%)</title><rect x="77.5405%" y="693" width="0.1105%" height="15" fill="rgb(248,109,41)"/><text x="77.7905%" y="703.50"></text></g><g><title>bfd_elf_gc_sections (7 samples, 0.26%)</title><rect x="77.5037%" y="725" width="0.2577%" height="15" fill="rgb(238,23,50)"/><text x="77.7537%" y="735.50"></text></g><g><title>[ld] (136 samples, 5.01%)</title><rect x="72.8277%" y="741" width="5.0074%" height="15" fill="rgb(211,48,49)"/><text x="73.0777%" y="751.50">[ld]</text></g><g><title>[ld] (143 samples, 5.27%)</title><rect x="72.8277%" y="789" width="5.2651%" height="15" fill="rgb(223,36,21)"/><text x="73.0777%" y="799.50">[ld]</text></g><g><title>__libc_start_main (143 samples, 5.27%)</title><rect x="72.8277%" y="773" width="5.2651%" height="15" fill="rgb(207,123,46)"/><text x="73.0777%" y="783.50">__libc..</text></g><g><title>[ld] (143 samples, 5.27%)</title><rect x="72.8277%" y="757" width="5.2651%" height="15" fill="rgb(240,218,32)"/><text x="73.0777%" y="767.50">[ld]</text></g><g><title>bfd_close (7 samples, 0.26%)</title><rect x="77.8351%" y="741" width="0.2577%" height="15" fill="rgb(252,5,43)"/><text x="78.0851%" y="751.50"></text></g><g><title>_bfd_elf_write_object_contents (7 samples, 0.26%)</title><rect x="77.8351%" y="725" width="0.2577%" height="15" fill="rgb(252,84,19)"/><text x="78.0851%" y="735.50"></text></g><g><title>[ld] (7 samples, 0.26%)</title><rect x="77.8351%" y="709" width="0.2577%" height="15" fill="rgb(243,152,39)"/><text x="78.0851%" y="719.50"></text></g><g><title>[ld] (7 samples, 0.26%)</title><rect x="77.8351%" y="693" width="0.2577%" height="15" fill="rgb(234,160,15)"/><text x="78.0851%" y="703.50"></text></g><g><title>bfd_elf64_checksum_contents (7 samples, 0.26%)</title><rect x="77.8351%" y="677" width="0.2577%" height="15" fill="rgb(237,34,20)"/><text x="78.0851%" y="687.50"></text></g><g><title>[ld] (7 samples, 0.26%)</title><rect x="77.8351%" y="661" width="0.2577%" height="15" fill="rgb(229,97,13)"/><text x="78.0851%" y="671.50"></text></g><g><title>[ld] (7 samples, 0.26%)</title><rect x="77.8351%" y="645" width="0.2577%" height="15" fill="rgb(234,71,50)"/><text x="78.0851%" y="655.50"></text></g><g><title>ld (154 samples, 5.67%)</title><rect x="72.6436%" y="805" width="5.6701%" height="15" fill="rgb(253,155,4)"/><text x="72.8936%" y="815.50">ld</text></g><g><title>_start (4 samples, 0.15%)</title><rect x="78.1664%" y="789" width="0.1473%" height="15" fill="rgb(222,185,37)"/><text x="78.4164%" y="799.50"></text></g><g><title>_dl_start (4 samples, 0.15%)</title><rect x="78.1664%" y="773" width="0.1473%" height="15" fill="rgb(251,177,13)"/><text x="78.4164%" y="783.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.15%)</title><rect x="78.1664%" y="757" width="0.1473%" height="15" fill="rgb(250,179,40)"/><text x="78.4164%" y="767.50"></text></g><g><title>dl_main (4 samples, 0.15%)</title><rect x="78.1664%" y="741" width="0.1473%" height="15" fill="rgb(242,44,2)"/><text x="78.4164%" y="751.50"></text></g><g><title>_start (11 samples, 0.41%)</title><rect x="78.3873%" y="789" width="0.4050%" height="15" fill="rgb(216,177,13)"/><text x="78.6373%" y="799.50"></text></g><g><title>_dl_start (4 samples, 0.15%)</title><rect x="78.6451%" y="773" width="0.1473%" height="15" fill="rgb(216,106,43)"/><text x="78.8951%" y="783.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.15%)</title><rect x="78.6451%" y="757" width="0.1473%" height="15" fill="rgb(216,183,2)"/><text x="78.8951%" y="767.50"></text></g><g><title>dl_main (3 samples, 0.11%)</title><rect x="78.6819%" y="741" width="0.1105%" height="15" fill="rgb(249,75,3)"/><text x="78.9319%" y="751.50"></text></g><g><title>racer (19 samples, 0.70%)</title><rect x="78.3137%" y="805" width="0.6996%" height="15" fill="rgb(219,67,39)"/><text x="78.5637%" y="815.50"></text></g><g><title>[[heap]] (5 samples, 0.18%)</title><rect x="79.0133%" y="789" width="0.1841%" height="15" fill="rgb(253,228,2)"/><text x="79.2633%" y="799.50"></text></g><g><title>[rustup] (19 samples, 0.70%)</title><rect x="79.1973%" y="773" width="0.6996%" height="15" fill="rgb(235,138,27)"/><text x="79.4473%" y="783.50"></text></g><g><title>[[stack]] (22 samples, 0.81%)</title><rect x="79.1973%" y="789" width="0.8100%" height="15" fill="rgb(236,97,51)"/><text x="79.4473%" y="799.50"></text></g><g><title>[rustup] (4 samples, 0.15%)</title><rect x="80.0074%" y="773" width="0.1473%" height="15" fill="rgb(240,80,30)"/><text x="80.2574%" y="783.50"></text></g><g><title>[anon] (17 samples, 0.63%)</title><rect x="80.0074%" y="789" width="0.6259%" height="15" fill="rgb(230,178,19)"/><text x="80.2574%" y="799.50"></text></g><g><title>[rustup] (3 samples, 0.11%)</title><rect x="80.6333%" y="741" width="0.1105%" height="15" fill="rgb(210,190,27)"/><text x="80.8833%" y="751.50"></text></g><g><title>[rustup] (3 samples, 0.11%)</title><rect x="80.6333%" y="725" width="0.1105%" height="15" fill="rgb(222,107,31)"/><text x="80.8833%" y="735.50"></text></g><g><title>[rustup] (3 samples, 0.11%)</title><rect x="80.6333%" y="709" width="0.1105%" height="15" fill="rgb(216,127,34)"/><text x="80.8833%" y="719.50"></text></g><g><title>[rustup] (3 samples, 0.11%)</title><rect x="80.6333%" y="693" width="0.1105%" height="15" fill="rgb(234,116,52)"/><text x="80.8833%" y="703.50"></text></g><g><title>[rustup] (4 samples, 0.15%)</title><rect x="80.6333%" y="789" width="0.1473%" height="15" fill="rgb(222,124,15)"/><text x="80.8833%" y="799.50"></text></g><g><title>__libc_start_main (4 samples, 0.15%)</title><rect x="80.6333%" y="773" width="0.1473%" height="15" fill="rgb(231,179,28)"/><text x="80.8833%" y="783.50"></text></g><g><title>[rustup] (4 samples, 0.15%)</title><rect x="80.6333%" y="757" width="0.1473%" height="15" fill="rgb(226,93,45)"/><text x="80.8833%" y="767.50"></text></g><g><title>[rustup] (8 samples, 0.29%)</title><rect x="88.1443%" y="597" width="0.2946%" height="15" fill="rgb(215,8,51)"/><text x="88.3943%" y="607.50"></text></g><g><title>[rustup] (32 samples, 1.18%)</title><rect x="87.3343%" y="613" width="1.1782%" height="15" fill="rgb(223,106,5)"/><text x="87.5843%" y="623.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.15%)</title><rect x="88.5493%" y="613" width="0.1473%" height="15" fill="rgb(250,191,5)"/><text x="88.7993%" y="623.50"></text></g><g><title>_int_malloc (4 samples, 0.15%)</title><rect x="88.5493%" y="597" width="0.1473%" height="15" fill="rgb(242,132,44)"/><text x="88.7993%" y="607.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (3 samples, 0.11%)</title><rect x="88.6966%" y="613" width="0.1105%" height="15" fill="rgb(251,152,29)"/><text x="88.9466%" y="623.50"></text></g><g><title>[rustup] (63 samples, 2.32%)</title><rect x="86.5979%" y="629" width="2.3196%" height="15" fill="rgb(218,179,5)"/><text x="86.8479%" y="639.50">[..</text></g><g><title>_int_free (3 samples, 0.11%)</title><rect x="88.8071%" y="613" width="0.1105%" height="15" fill="rgb(227,67,19)"/><text x="89.0571%" y="623.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.41%)</title><rect x="88.9175%" y="629" width="0.4050%" height="15" fill="rgb(233,119,31)"/><text x="89.1675%" y="639.50"></text></g><g><title>_int_malloc (11 samples, 0.41%)</title><rect x="88.9175%" y="613" width="0.4050%" height="15" fill="rgb(241,120,22)"/><text x="89.1675%" y="623.50"></text></g><g><title>[rustup] (118 samples, 4.34%)</title><rect x="85.0147%" y="645" width="4.3446%" height="15" fill="rgb(224,102,30)"/><text x="85.2647%" y="655.50">[rust..</text></g><g><title>__GI___libc_malloc (7 samples, 0.26%)</title><rect x="89.3594%" y="645" width="0.2577%" height="15" fill="rgb(210,164,37)"/><text x="89.6094%" y="655.50"></text></g><g><title>_int_malloc (7 samples, 0.26%)</title><rect x="89.3594%" y="629" width="0.2577%" height="15" fill="rgb(226,191,16)"/><text x="89.6094%" y="639.50"></text></g><g><title>[rustup] (151 samples, 5.56%)</title><rect x="84.0943%" y="661" width="5.5596%" height="15" fill="rgb(214,40,45)"/><text x="84.3443%" y="671.50">[rustup]</text></g><g><title>__GI___libc_malloc (5 samples, 0.18%)</title><rect x="89.6907%" y="661" width="0.1841%" height="15" fill="rgb(244,29,26)"/><text x="89.9407%" y="671.50"></text></g><g><title>_int_malloc (4 samples, 0.15%)</title><rect x="89.7275%" y="645" width="0.1473%" height="15" fill="rgb(216,16,5)"/><text x="89.9775%" y="655.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (4 samples, 0.15%)</title><rect x="89.8748%" y="629" width="0.1473%" height="15" fill="rgb(249,76,35)"/><text x="90.1248%" y="639.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.29%)</title><rect x="89.8748%" y="661" width="0.2946%" height="15" fill="rgb(207,11,44)"/><text x="90.1248%" y="671.50"></text></g><g><title>_int_realloc (8 samples, 0.29%)</title><rect x="89.8748%" y="645" width="0.2946%" height="15" fill="rgb(228,190,49)"/><text x="90.1248%" y="655.50"></text></g><g><title>_int_malloc (4 samples, 0.15%)</title><rect x="90.0221%" y="629" width="0.1473%" height="15" fill="rgb(214,173,12)"/><text x="90.2721%" y="639.50"></text></g><g><title>__memcmp_sse4_1 (3 samples, 0.11%)</title><rect x="90.1694%" y="661" width="0.1105%" height="15" fill="rgb(218,26,35)"/><text x="90.4194%" y="671.50"></text></g><g><title>[rustup] (211 samples, 7.77%)</title><rect x="82.6215%" y="677" width="7.7688%" height="15" fill="rgb(220,200,19)"/><text x="82.8715%" y="687.50">[rustup]</text></g><g><title>_int_free (3 samples, 0.11%)</title><rect x="90.2798%" y="661" width="0.1105%" height="15" fill="rgb(239,95,49)"/><text x="90.5298%" y="671.50"></text></g><g><title>[rustup] (231 samples, 8.51%)</title><rect x="81.9588%" y="693" width="8.5052%" height="15" fill="rgb(235,85,53)"/><text x="82.2088%" y="703.50">[rustup]</text></g><g><title>__GI___read (4 samples, 0.15%)</title><rect x="90.6112%" y="693" width="0.1473%" height="15" fill="rgb(233,133,31)"/><text x="90.8612%" y="703.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.18%)</title><rect x="90.7585%" y="693" width="0.1841%" height="15" fill="rgb(218,25,20)"/><text x="91.0085%" y="703.50"></text></g><g><title>[rustup] (250 samples, 9.20%)</title><rect x="81.8483%" y="709" width="9.2047%" height="15" fill="rgb(252,210,38)"/><text x="82.0983%" y="719.50">[rustup]</text></g><g><title>_int_free (3 samples, 0.11%)</title><rect x="90.9426%" y="693" width="0.1105%" height="15" fill="rgb(242,134,21)"/><text x="91.1926%" y="703.50"></text></g><g><title>[rustup] (277 samples, 10.20%)</title><rect x="81.0015%" y="773" width="10.1988%" height="15" fill="rgb(213,28,48)"/><text x="81.2515%" y="783.50">[rustup]</text></g><g><title>[rustup] (257 samples, 9.46%)</title><rect x="81.7378%" y="757" width="9.4624%" height="15" fill="rgb(250,196,2)"/><text x="81.9878%" y="767.50">[rustup]</text></g><g><title>[rustup] (257 samples, 9.46%)</title><rect x="81.7378%" y="741" width="9.4624%" height="15" fill="rgb(227,5,17)"/><text x="81.9878%" y="751.50">[rustup]</text></g><g><title>[rustup] (257 samples, 9.46%)</title><rect x="81.7378%" y="725" width="9.4624%" height="15" fill="rgb(221,226,24)"/><text x="81.9878%" y="735.50">[rustup]</text></g><g><title>rustc_codegen_ssa::back::write::OngoingCodegen&lt;B&gt;::submit_pre_codegened_module_to_llvm (6 samples, 0.22%)</title><rect x="92.0471%" y="677" width="0.2209%" height="15" fill="rgb(211,5,48)"/><text x="92.2971%" y="687.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (6 samples, 0.22%)</title><rect x="92.0471%" y="661" width="0.2209%" height="15" fill="rgb(219,150,6)"/><text x="92.2971%" y="671.50"></text></g><g><title>std::sync::mpsc::oneshot::Packet&lt;T&gt;::recv (6 samples, 0.22%)</title><rect x="92.0471%" y="645" width="0.2209%" height="15" fill="rgb(251,46,16)"/><text x="92.2971%" y="655.50"></text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (6 samples, 0.22%)</title><rect x="92.0471%" y="629" width="0.2209%" height="15" fill="rgb(220,204,40)"/><text x="92.2971%" y="639.50"></text></g><g><title>std::thread::park (5 samples, 0.18%)</title><rect x="92.0839%" y="613" width="0.1841%" height="15" fill="rgb(211,85,2)"/><text x="92.3339%" y="623.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (5 samples, 0.18%)</title><rect x="92.0839%" y="597" width="0.1841%" height="15" fill="rgb(229,17,7)"/><text x="92.3339%" y="607.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 0.18%)</title><rect x="92.0839%" y="581" width="0.1841%" height="15" fill="rgb(239,72,28)"/><text x="92.3339%" y="591.50"></text></g><g><title>syscall (5 samples, 0.18%)</title><rect x="92.0839%" y="565" width="0.1841%" height="15" fill="rgb(230,47,54)"/><text x="92.3339%" y="575.50"></text></g><g><title>rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter (11 samples, 0.41%)</title><rect x="91.8999%" y="773" width="0.4050%" height="15" fill="rgb(214,50,8)"/><text x="92.1499%" y="783.50"></text></g><g><title>rustc_interface::queries::Queries::ongoing_codegen (9 samples, 0.33%)</title><rect x="91.9735%" y="757" width="0.3314%" height="15" fill="rgb(216,198,43)"/><text x="92.2235%" y="767.50"></text></g><g><title>rustc_interface::passes::QueryContext::enter (9 samples, 0.33%)</title><rect x="91.9735%" y="741" width="0.3314%" height="15" fill="rgb(234,20,35)"/><text x="92.2235%" y="751.50"></text></g><g><title>rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time (9 samples, 0.33%)</title><rect x="91.9735%" y="725" width="0.3314%" height="15" fill="rgb(254,45,19)"/><text x="92.2235%" y="735.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::codegen_crate (9 samples, 0.33%)</title><rect x="91.9735%" y="709" width="0.3314%" height="15" fill="rgb(219,14,44)"/><text x="92.2235%" y="719.50"></text></g><g><title>rustc_codegen_ssa::base::codegen_crate (9 samples, 0.33%)</title><rect x="91.9735%" y="693" width="0.3314%" height="15" fill="rgb(217,220,26)"/><text x="92.2235%" y="703.50"></text></g><g><title>llvm::initializeCodeGen (3 samples, 0.11%)</title><rect x="92.3785%" y="693" width="0.1105%" height="15" fill="rgb(213,158,28)"/><text x="92.6285%" y="703.50"></text></g><g><title>LLVMInitializePasses (6 samples, 0.22%)</title><rect x="92.3785%" y="709" width="0.2209%" height="15" fill="rgb(252,51,52)"/><text x="92.6285%" y="719.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::init (9 samples, 0.33%)</title><rect x="92.3785%" y="757" width="0.3314%" height="15" fill="rgb(246,89,16)"/><text x="92.6285%" y="767.50"></text></g><g><title>std::sync::once::Once::call_inner (9 samples, 0.33%)</title><rect x="92.3785%" y="741" width="0.3314%" height="15" fill="rgb(216,158,49)"/><text x="92.6285%" y="751.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (9 samples, 0.33%)</title><rect x="92.3785%" y="725" width="0.3314%" height="15" fill="rgb(236,107,19)"/><text x="92.6285%" y="735.50"></text></g><g><title>rustc_llvm::initialize_available_targets (3 samples, 0.11%)</title><rect x="92.5994%" y="709" width="0.1105%" height="15" fill="rgb(228,185,30)"/><text x="92.8494%" y="719.50"></text></g><g><title>rustc_interface::util::create_session (10 samples, 0.37%)</title><rect x="92.3785%" y="773" width="0.3682%" height="15" fill="rgb(246,134,8)"/><text x="92.6285%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (4 samples, 0.15%)</title><rect x="93.0781%" y="757" width="0.1473%" height="15" fill="rgb(214,143,50)"/><text x="93.3281%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (4 samples, 0.15%)</title><rect x="93.2990%" y="709" width="0.1473%" height="15" fill="rgb(228,75,8)"/><text x="93.5490%" y="719.50"></text></g><g><title>rustc_middle::ty::context::TyCtxt::create_global_ctxt (14 samples, 0.52%)</title><rect x="93.0044%" y="773" width="0.5155%" height="15" fill="rgb(207,175,4)"/><text x="93.2544%" y="783.50"></text></g><g><title>rustc_metadata::rmeta::decoder::cstore_impl::&lt;impl rustc_middle::middle::cstore::CrateStore for rustc_metadata::creader::CStore&gt;::all_def_path_hashes_and_def_ids (8 samples, 0.29%)</title><rect x="93.2253%" y="757" width="0.2946%" height="15" fill="rgb(205,108,24)"/><text x="93.4753%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.29%)</title><rect x="93.2253%" y="741" width="0.2946%" height="15" fill="rgb(244,120,49)"/><text x="93.4753%" y="751.50"></text></g><g><title>rustc_metadata::rmeta::decoder::&lt;impl rustc_metadata::creader::CrateMetadataRef&gt;::def_path_hash_unlocked (6 samples, 0.22%)</title><rect x="93.2990%" y="725" width="0.2209%" height="15" fill="rgb(223,47,38)"/><text x="93.5490%" y="735.50"></text></g><g><title>rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl (7 samples, 0.26%)</title><rect x="93.7040%" y="773" width="0.2577%" height="15" fill="rgb(229,179,11)"/><text x="93.9540%" y="783.50"></text></g><g><title>rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps (7 samples, 0.26%)</title><rect x="93.7040%" y="757" width="0.2577%" height="15" fill="rgb(231,122,1)"/><text x="93.9540%" y="767.50"></text></g><g><title>rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::eval_to_const_value_raw&gt;::compute (5 samples, 0.18%)</title><rect x="93.7776%" y="741" width="0.1841%" height="15" fill="rgb(245,119,9)"/><text x="94.0276%" y="751.50"></text></g><g><title>rustc_mir::const_eval::eval_queries::eval_to_const_value_raw_provider (5 samples, 0.18%)</title><rect x="93.7776%" y="725" width="0.1841%" height="15" fill="rgb(241,163,25)"/><text x="94.0276%" y="735.50"></text></g><g><title>rustc_query_system::query::plumbing::get_query_impl (5 samples, 0.18%)</title><rect x="93.7776%" y="709" width="0.1841%" height="15" fill="rgb(217,214,3)"/><text x="94.0276%" y="719.50"></text></g><g><title>rustc_data_structures::stack::ensure_sufficient_stack (5 samples, 0.18%)</title><rect x="93.7776%" y="693" width="0.1841%" height="15" fill="rgb(240,86,28)"/><text x="94.0276%" y="703.50"></text></g><g><title>rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl (5 samples, 0.18%)</title><rect x="93.7776%" y="677" width="0.1841%" height="15" fill="rgb(215,47,9)"/><text x="94.0276%" y="687.50"></text></g><g><title>rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps (5 samples, 0.18%)</title><rect x="93.7776%" y="661" width="0.1841%" height="15" fill="rgb(252,25,45)"/><text x="94.0276%" y="671.50"></text></g><g><title>rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::eval_to_allocation_raw&gt;::compute (5 samples, 0.18%)</title><rect x="93.7776%" y="645" width="0.1841%" height="15" fill="rgb(251,164,9)"/><text x="94.0276%" y="655.50"></text></g><g><title>rustc_mir::const_eval::eval_queries::eval_to_allocation_raw_provider (5 samples, 0.18%)</title><rect x="93.7776%" y="629" width="0.1841%" height="15" fill="rgb(233,194,0)"/><text x="94.0276%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.15%)</title><rect x="93.8144%" y="613" width="0.1473%" height="15" fill="rgb(249,111,24)"/><text x="94.0644%" y="623.50"></text></g><g><title>rustc_middle::ty::print::pretty::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::def_path_str (4 samples, 0.15%)</title><rect x="93.8144%" y="597" width="0.1473%" height="15" fill="rgb(250,223,3)"/><text x="94.0644%" y="607.50"></text></g><g><title>rustc_middle::ty::print::pretty::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::def_path_str_with_substs (4 samples, 0.15%)</title><rect x="93.8144%" y="581" width="0.1473%" height="15" fill="rgb(236,178,37)"/><text x="94.0644%" y="591.50"></text></g><g><title>&lt;rustc_middle::ty::print::pretty::FmtPrinter&lt;F&gt; as rustc_middle::ty::print::Printer&gt;::print_def_path (4 samples, 0.15%)</title><rect x="93.8144%" y="565" width="0.1473%" height="15" fill="rgb(241,158,50)"/><text x="94.0644%" y="575.50"></text></g><g><title>rustc_middle::ty::print::pretty::PrettyPrinter::try_print_visible_def_path_recur (4 samples, 0.15%)</title><rect x="93.8144%" y="549" width="0.1473%" height="15" fill="rgb(213,121,41)"/><text x="94.0644%" y="559.50"></text></g><g><title>rustc_query_system::query::plumbing::get_query_impl (4 samples, 0.15%)</title><rect x="93.8144%" y="533" width="0.1473%" height="15" fill="rgb(240,92,3)"/><text x="94.0644%" y="543.50"></text></g><g><title>rustc_data_structures::stack::ensure_sufficient_stack (4 samples, 0.15%)</title><rect x="93.8144%" y="517" width="0.1473%" height="15" fill="rgb(205,123,3)"/><text x="94.0644%" y="527.50"></text></g><g><title>rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl (4 samples, 0.15%)</title><rect x="93.8144%" y="501" width="0.1473%" height="15" fill="rgb(205,97,47)"/><text x="94.0644%" y="511.50"></text></g><g><title>rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps (4 samples, 0.15%)</title><rect x="93.8144%" y="485" width="0.1473%" height="15" fill="rgb(247,152,14)"/><text x="94.0644%" y="495.50"></text></g><g><title>rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::visible_parent_map&gt;::compute (4 samples, 0.15%)</title><rect x="93.8144%" y="469" width="0.1473%" height="15" fill="rgb(248,195,53)"/><text x="94.0644%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.15%)</title><rect x="93.8144%" y="453" width="0.1473%" height="15" fill="rgb(226,201,16)"/><text x="94.0644%" y="463.50"></text></g><g><title>rustc_query_system::query::plumbing::get_query_impl (4 samples, 0.15%)</title><rect x="93.8144%" y="437" width="0.1473%" height="15" fill="rgb(205,98,0)"/><text x="94.0644%" y="447.50"></text></g><g><title>rustc_metadata::rmeta::_DERIVE_rustc_serialize_Decodable_DecodeContext_a_tcx_FOR_EntryKind::&lt;impl rustc_serialize::serialize::Decodable&lt;rustc_metadata::rmeta::decoder::DecodeContext&gt; for rustc_metadata::rmeta::EntryKind&gt;::decode (5 samples, 0.18%)</title><rect x="93.9985%" y="389" width="0.1841%" height="15" fill="rgb(214,191,48)"/><text x="94.2485%" y="399.50"></text></g><g><title>rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::eval_to_allocation_raw&gt;::compute (7 samples, 0.26%)</title><rect x="93.9617%" y="709" width="0.2577%" height="15" fill="rgb(237,112,39)"/><text x="94.2117%" y="719.50"></text></g><g><title>rustc_mir::const_eval::eval_queries::eval_to_allocation_raw_provider (7 samples, 0.26%)</title><rect x="93.9617%" y="693" width="0.2577%" height="15" fill="rgb(247,203,27)"/><text x="94.2117%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.26%)</title><rect x="93.9617%" y="677" width="0.2577%" height="15" fill="rgb(235,124,28)"/><text x="94.2117%" y="687.50"></text></g><g><title>rustc_middle::ty::print::pretty::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::def_path_str (7 samples, 0.26%)</title><rect x="93.9617%" y="661" width="0.2577%" height="15" fill="rgb(208,207,46)"/><text x="94.2117%" y="671.50"></text></g><g><title>rustc_middle::ty::print::pretty::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::def_path_str_with_substs (7 samples, 0.26%)</title><rect x="93.9617%" y="645" width="0.2577%" height="15" fill="rgb(234,176,4)"/><text x="94.2117%" y="655.50"></text></g><g><title>&lt;rustc_middle::ty::print::pretty::FmtPrinter&lt;F&gt; as rustc_middle::ty::print::Printer&gt;::print_def_path (7 samples, 0.26%)</title><rect x="93.9617%" y="629" width="0.2577%" height="15" fill="rgb(230,133,28)"/><text x="94.2117%" y="639.50"></text></g><g><title>rustc_middle::ty::print::pretty::PrettyPrinter::try_print_visible_def_path_recur (7 samples, 0.26%)</title><rect x="93.9617%" y="613" width="0.2577%" height="15" fill="rgb(211,137,40)"/><text x="94.2117%" y="623.50"></text></g><g><title>rustc_query_system::query::plumbing::get_query_impl (7 samples, 0.26%)</title><rect x="93.9617%" y="597" width="0.2577%" height="15" fill="rgb(254,35,13)"/><text x="94.2117%" y="607.50"></text></g><g><title>rustc_data_structures::stack::ensure_sufficient_stack (7 samples, 0.26%)</title><rect x="93.9617%" y="581" width="0.2577%" height="15" fill="rgb(225,49,51)"/><text x="94.2117%" y="591.50"></text></g><g><title>rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl (7 samples, 0.26%)</title><rect x="93.9617%" y="565" width="0.2577%" height="15" fill="rgb(251,10,15)"/><text x="94.2117%" y="575.50"></text></g><g><title>rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps (7 samples, 0.26%)</title><rect x="93.9617%" y="549" width="0.2577%" height="15" fill="rgb(228,207,15)"/><text x="94.2117%" y="559.50"></text></g><g><title>rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::visible_parent_map&gt;::compute (7 samples, 0.26%)</title><rect x="93.9617%" y="533" width="0.2577%" height="15" fill="rgb(241,99,19)"/><text x="94.2117%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.26%)</title><rect x="93.9617%" y="517" width="0.2577%" height="15" fill="rgb(207,104,49)"/><text x="94.2117%" y="527.50"></text></g><g><title>rustc_query_system::query::plumbing::get_query_impl (7 samples, 0.26%)</title><rect x="93.9617%" y="501" width="0.2577%" height="15" fill="rgb(234,99,18)"/><text x="94.2117%" y="511.50"></text></g><g><title>rustc_data_structures::stack::ensure_sufficient_stack (7 samples, 0.26%)</title><rect x="93.9617%" y="485" width="0.2577%" height="15" fill="rgb(213,191,49)"/><text x="94.2117%" y="495.50"></text></g><g><title>rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl (7 samples, 0.26%)</title><rect x="93.9617%" y="469" width="0.2577%" height="15" fill="rgb(210,226,19)"/><text x="94.2117%" y="479.50"></text></g><g><title>rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps (7 samples, 0.26%)</title><rect x="93.9617%" y="453" width="0.2577%" height="15" fill="rgb(229,97,18)"/><text x="94.2117%" y="463.50"></text></g><g><title>rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::item_children&gt;::compute (7 samples, 0.26%)</title><rect x="93.9617%" y="437" width="0.2577%" height="15" fill="rgb(211,167,15)"/><text x="94.2117%" y="447.50"></text></g><g><title>rustc_metadata::rmeta::decoder::cstore_impl::provide_extern::item_children (7 samples, 0.26%)</title><rect x="93.9617%" y="421" width="0.2577%" height="15" fill="rgb(210,169,34)"/><text x="94.2117%" y="431.50"></text></g><g><title>rustc_metadata::rmeta::decoder::&lt;impl rustc_metadata::creader::CrateMetadataRef&gt;::each_child_of_item (6 samples, 0.22%)</title><rect x="93.9985%" y="405" width="0.2209%" height="15" fill="rgb(241,121,31)"/><text x="94.2485%" y="415.50"></text></g><g><title>rustc_query_system::query::plumbing::get_query_impl (8 samples, 0.29%)</title><rect x="93.9617%" y="773" width="0.2946%" height="15" fill="rgb(232,40,11)"/><text x="94.2117%" y="783.50"></text></g><g><title>rustc_data_structures::stack::ensure_sufficient_stack (8 samples, 0.29%)</title><rect x="93.9617%" y="757" width="0.2946%" height="15" fill="rgb(205,86,26)"/><text x="94.2117%" y="767.50"></text></g><g><title>rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl (8 samples, 0.29%)</title><rect x="93.9617%" y="741" width="0.2946%" height="15" fill="rgb(231,126,28)"/><text x="94.2117%" y="751.50"></text></g><g><title>rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps (8 samples, 0.29%)</title><rect x="93.9617%" y="725" width="0.2946%" height="15" fill="rgb(219,221,18)"/><text x="94.2117%" y="735.50"></text></g><g><title>std::process::Child::wait_with_output (8 samples, 0.29%)</title><rect x="94.4035%" y="645" width="0.2946%" height="15" fill="rgb(211,40,0)"/><text x="94.6535%" y="655.50"></text></g><g><title>std::sys::unix::pipe::read2 (8 samples, 0.29%)</title><rect x="94.4035%" y="629" width="0.2946%" height="15" fill="rgb(239,85,43)"/><text x="94.6535%" y="639.50"></text></g><g><title>std::sys::unix::cvt_r (7 samples, 0.26%)</title><rect x="94.4404%" y="613" width="0.2577%" height="15" fill="rgb(231,55,21)"/><text x="94.6904%" y="623.50"></text></g><g><title>std::sys::unix::pipe::read2::{{closure}} (7 samples, 0.26%)</title><rect x="94.4404%" y="597" width="0.2577%" height="15" fill="rgb(225,184,43)"/><text x="94.6904%" y="607.50"></text></g><g><title>__GI___poll (7 samples, 0.26%)</title><rect x="94.4404%" y="581" width="0.2577%" height="15" fill="rgb(251,158,41)"/><text x="94.6904%" y="591.50"></text></g><g><title>rustc_codegen_ssa::back::link::link_natively (10 samples, 0.37%)</title><rect x="94.4035%" y="677" width="0.3682%" height="15" fill="rgb(234,159,37)"/><text x="94.6535%" y="687.50"></text></g><g><title>rustc_codegen_ssa::back::link::exec_linker (10 samples, 0.37%)</title><rect x="94.4035%" y="661" width="0.3682%" height="15" fill="rgb(216,204,22)"/><text x="94.6535%" y="671.50"></text></g><g><title>rustc_interface::queries::Linker::link (12 samples, 0.44%)</title><rect x="94.3667%" y="741" width="0.4418%" height="15" fill="rgb(214,17,3)"/><text x="94.6167%" y="751.50"></text></g><g><title>&lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::link (12 samples, 0.44%)</title><rect x="94.3667%" y="725" width="0.4418%" height="15" fill="rgb(212,111,17)"/><text x="94.6167%" y="735.50"></text></g><g><title>rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time (12 samples, 0.44%)</title><rect x="94.3667%" y="709" width="0.4418%" height="15" fill="rgb(221,157,24)"/><text x="94.6167%" y="719.50"></text></g><g><title>rustc_codegen_ssa::back::link::link_binary (12 samples, 0.44%)</title><rect x="94.3667%" y="693" width="0.4418%" height="15" fill="rgb(252,16,13)"/><text x="94.6167%" y="703.50"></text></g><g><title>scoped_tls::ScopedKey&lt;T&gt;::set (13 samples, 0.48%)</title><rect x="94.3667%" y="773" width="0.4786%" height="15" fill="rgb(221,62,2)"/><text x="94.6167%" y="783.50"></text></g><g><title>rustc_span::with_source_map (13 samples, 0.48%)</title><rect x="94.3667%" y="757" width="0.4786%" height="15" fill="rgb(247,87,22)"/><text x="94.6167%" y="767.50"></text></g><g><title>[unknown] (383 samples, 14.10%)</title><rect x="80.7806%" y="789" width="14.1016%" height="15" fill="rgb(215,73,9)"/><text x="81.0306%" y="799.50">[unknown]</text></g><g><title>_rjem_je_extents_alloc (6 samples, 0.22%)</title><rect x="96.3181%" y="341" width="0.2209%" height="15" fill="rgb(207,175,33)"/><text x="96.5681%" y="351.50"></text></g><g><title>extent_recycle (6 samples, 0.22%)</title><rect x="96.3181%" y="325" width="0.2209%" height="15" fill="rgb(243,129,54)"/><text x="96.5681%" y="335.50"></text></g><g><title>extent_recycle_extract (6 samples, 0.22%)</title><rect x="96.3181%" y="309" width="0.2209%" height="15" fill="rgb(227,119,45)"/><text x="96.5681%" y="319.50"></text></g><g><title>extents_fit_locked (6 samples, 0.22%)</title><rect x="96.3181%" y="293" width="0.2209%" height="15" fill="rgb(205,109,36)"/><text x="96.5681%" y="303.50"></text></g><g><title>rustc_codegen_llvm::back::write::optimize (7 samples, 0.26%)</title><rect x="96.3181%" y="661" width="0.2577%" height="15" fill="rgb(205,6,39)"/><text x="96.5681%" y="671.50"></text></g><g><title>LLVMRustRunFunctionPassManager (7 samples, 0.26%)</title><rect x="96.3181%" y="645" width="0.2577%" height="15" fill="rgb(221,32,16)"/><text x="96.5681%" y="655.50"></text></g><g><title>llvm::legacy::FunctionPassManager::run (7 samples, 0.26%)</title><rect x="96.3181%" y="629" width="0.2577%" height="15" fill="rgb(228,144,50)"/><text x="96.5681%" y="639.50"></text></g><g><title>llvm::legacy::FunctionPassManagerImpl::run (7 samples, 0.26%)</title><rect x="96.3181%" y="613" width="0.2577%" height="15" fill="rgb(229,201,53)"/><text x="96.5681%" y="623.50"></text></g><g><title>llvm::PMTopLevelManager::initializeAllAnalysisInfo (7 samples, 0.26%)</title><rect x="96.3181%" y="597" width="0.2577%" height="15" fill="rgb(249,153,27)"/><text x="96.5681%" y="607.50"></text></g><g><title>llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Pass*, llvm::SmallPtrSet&lt;llvm::Pass*, 8u&gt;, llvm::DenseMapInfo&lt;llvm::Pass*&gt;, llvm::detail::DenseMapPair&lt;llvm::Pass*, llvm::SmallPtrSet&lt;llvm::Pass*, 8u&gt; &gt; &gt;, llvm::Pass*, llvm::SmallPtrSet&lt;llvm::Pass*, 8u&gt;, llvm::DenseMapInfo&lt;llvm::Pass*&gt;, llvm::detail::DenseMapPair&lt;llvm::Pass*, llvm::SmallPtrSet&lt;llvm::Pass*, 8u&gt; &gt; &gt;::InsertIntoBucketImpl&lt;llvm::Pass*&gt; (7 samples, 0.26%)</title><rect x="96.3181%" y="581" width="0.2577%" height="15" fill="rgb(227,106,25)"/><text x="96.5681%" y="591.50"></text></g><g><title>llvm::DenseMap&lt;llvm::Pass*, llvm::SmallPtrSet&lt;llvm::Pass*, 8u&gt;, llvm::DenseMapInfo&lt;llvm::Pass*&gt;, llvm::detail::DenseMapPair&lt;llvm::Pass*, llvm::SmallPtrSet&lt;llvm::Pass*, 8u&gt; &gt; &gt;::grow (7 samples, 0.26%)</title><rect x="96.3181%" y="565" width="0.2577%" height="15" fill="rgb(230,65,29)"/><text x="96.5681%" y="575.50"></text></g><g><title>operator new (7 samples, 0.26%)</title><rect x="96.3181%" y="549" width="0.2577%" height="15" fill="rgb(221,57,46)"/><text x="96.5681%" y="559.50"></text></g><g><title>malloc (7 samples, 0.26%)</title><rect x="96.3181%" y="533" width="0.2577%" height="15" fill="rgb(229,161,17)"/><text x="96.5681%" y="543.50"></text></g><g><title>imalloc (7 samples, 0.26%)</title><rect x="96.3181%" y="517" width="0.2577%" height="15" fill="rgb(222,213,11)"/><text x="96.5681%" y="527.50"></text></g><g><title>imalloc_body (7 samples, 0.26%)</title><rect x="96.3181%" y="501" width="0.2577%" height="15" fill="rgb(235,35,13)"/><text x="96.5681%" y="511.50"></text></g><g><title>imalloc_no_sample (7 samples, 0.26%)</title><rect x="96.3181%" y="485" width="0.2577%" height="15" fill="rgb(233,158,34)"/><text x="96.5681%" y="495.50"></text></g><g><title>iallocztm (7 samples, 0.26%)</title><rect x="96.3181%" y="469" width="0.2577%" height="15" fill="rgb(215,151,48)"/><text x="96.5681%" y="479.50"></text></g><g><title>arena_malloc (7 samples, 0.26%)</title><rect x="96.3181%" y="453" width="0.2577%" height="15" fill="rgb(229,84,14)"/><text x="96.5681%" y="463.50"></text></g><g><title>tcache_alloc_small (7 samples, 0.26%)</title><rect x="96.3181%" y="437" width="0.2577%" height="15" fill="rgb(229,68,14)"/><text x="96.5681%" y="447.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (7 samples, 0.26%)</title><rect x="96.3181%" y="421" width="0.2577%" height="15" fill="rgb(243,106,26)"/><text x="96.5681%" y="431.50"></text></g><g><title>_rjem_je_arena_tcache_fill_small (7 samples, 0.26%)</title><rect x="96.3181%" y="405" width="0.2577%" height="15" fill="rgb(206,45,38)"/><text x="96.5681%" y="415.50"></text></g><g><title>arena_bin_malloc_hard (7 samples, 0.26%)</title><rect x="96.3181%" y="389" width="0.2577%" height="15" fill="rgb(226,6,15)"/><text x="96.5681%" y="399.50"></text></g><g><title>arena_bin_nonfull_slab_get (7 samples, 0.26%)</title><rect x="96.3181%" y="373" width="0.2577%" height="15" fill="rgb(232,22,54)"/><text x="96.5681%" y="383.50"></text></g><g><title>arena_slab_alloc (7 samples, 0.26%)</title><rect x="96.3181%" y="357" width="0.2577%" height="15" fill="rgb(229,222,32)"/><text x="96.5681%" y="367.50"></text></g><g><title>llvm::LLVMTargetMachine::addPassesToEmitFile (5 samples, 0.18%)</title><rect x="96.6127%" y="597" width="0.1841%" height="15" fill="rgb(228,62,29)"/><text x="96.8627%" y="607.50"></text></g><g><title>llvm::TargetPassConfig::addMachinePasses (3 samples, 0.11%)</title><rect x="96.6863%" y="581" width="0.1105%" height="15" fill="rgb(251,103,34)"/><text x="96.9363%" y="591.50"></text></g><g><title>llvm::TargetPassConfig::addPass (3 samples, 0.11%)</title><rect x="96.6863%" y="565" width="0.1105%" height="15" fill="rgb(233,12,30)"/><text x="96.9363%" y="575.50"></text></g><g><title>llvm::FPPassManager::doFinalization (4 samples, 0.15%)</title><rect x="96.7968%" y="581" width="0.1473%" height="15" fill="rgb(238,52,0)"/><text x="97.0468%" y="591.50"></text></g><g><title>llvm::AsmPrinter::doFinalization (4 samples, 0.15%)</title><rect x="96.7968%" y="565" width="0.1473%" height="15" fill="rgb(223,98,5)"/><text x="97.0468%" y="575.50"></text></g><g><title>llvm::FPPassManager::doInitialization (3 samples, 0.11%)</title><rect x="96.9440%" y="581" width="0.1105%" height="15" fill="rgb(228,75,37)"/><text x="97.1940%" y="591.50"></text></g><g><title>llvm::AsmPrinter::doInitialization (3 samples, 0.11%)</title><rect x="96.9440%" y="565" width="0.1105%" height="15" fill="rgb(205,115,49)"/><text x="97.1940%" y="575.50"></text></g><g><title>llvm::SelectionDAGISel::runOnMachineFunction (4 samples, 0.15%)</title><rect x="97.1281%" y="533" width="0.1473%" height="15" fill="rgb(250,154,43)"/><text x="97.3781%" y="543.50"></text></g><g><title>llvm::SelectionDAGISel::SelectAllBasicBlocks (4 samples, 0.15%)</title><rect x="97.1281%" y="517" width="0.1473%" height="15" fill="rgb(226,43,29)"/><text x="97.3781%" y="527.50"></text></g><g><title>llvm::MachineFunctionPass::runOnFunction (8 samples, 0.29%)</title><rect x="97.0545%" y="549" width="0.2946%" height="15" fill="rgb(249,228,39)"/><text x="97.3045%" y="559.50"></text></g><g><title>llvm::X86LegalizerInfo::X86LegalizerInfo (3 samples, 0.11%)</title><rect x="97.4595%" y="517" width="0.1105%" height="15" fill="rgb(216,79,43)"/><text x="97.7095%" y="527.50"></text></g><g><title>rustc_codegen_llvm::back::write::write_output_file (27 samples, 0.99%)</title><rect x="96.6127%" y="629" width="0.9941%" height="15" fill="rgb(228,95,12)"/><text x="96.8627%" y="639.50"></text></g><g><title>LLVMRustWriteOutputFile (27 samples, 0.99%)</title><rect x="96.6127%" y="613" width="0.9941%" height="15" fill="rgb(249,221,15)"/><text x="96.8627%" y="623.50"></text></g><g><title>llvm::legacy::PassManagerImpl::run (22 samples, 0.81%)</title><rect x="96.7968%" y="597" width="0.8100%" height="15" fill="rgb(233,34,13)"/><text x="97.0468%" y="607.50"></text></g><g><title>llvm::FPPassManager::runOnModule (15 samples, 0.55%)</title><rect x="97.0545%" y="581" width="0.5523%" height="15" fill="rgb(214,103,39)"/><text x="97.3045%" y="591.50"></text></g><g><title>llvm::FPPassManager::runOnFunction (15 samples, 0.55%)</title><rect x="97.0545%" y="565" width="0.5523%" height="15" fill="rgb(251,126,39)"/><text x="97.3045%" y="575.50"></text></g><g><title>llvm::X86TargetMachine::getSubtargetImpl (5 samples, 0.18%)</title><rect x="97.4227%" y="549" width="0.1841%" height="15" fill="rgb(214,216,36)"/><text x="97.6727%" y="559.50"></text></g><g><title>llvm::X86Subtarget::X86Subtarget (4 samples, 0.15%)</title><rect x="97.4595%" y="533" width="0.1473%" height="15" fill="rgb(220,221,8)"/><text x="97.7095%" y="543.50"></text></g><g><title>rustc_codegen_ssa::back::write::execute_work_item (36 samples, 1.33%)</title><rect x="96.3181%" y="677" width="1.3255%" height="15" fill="rgb(240,216,3)"/><text x="96.5681%" y="687.50"></text></g><g><title>rustc_codegen_ssa::back::write::finish_intra_module_work (29 samples, 1.07%)</title><rect x="96.5758%" y="661" width="1.0677%" height="15" fill="rgb(232,218,17)"/><text x="96.8258%" y="671.50"></text></g><g><title>rustc_codegen_llvm::back::write::codegen (29 samples, 1.07%)</title><rect x="96.5758%" y="645" width="1.0677%" height="15" fill="rgb(229,163,45)"/><text x="96.8258%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (42 samples, 1.55%)</title><rect x="96.1340%" y="741" width="1.5464%" height="15" fill="rgb(231,110,42)"/><text x="96.3840%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (42 samples, 1.55%)</title><rect x="96.1340%" y="725" width="1.5464%" height="15" fill="rgb(208,170,48)"/><text x="96.3840%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (42 samples, 1.55%)</title><rect x="96.1340%" y="709" width="1.5464%" height="15" fill="rgb(239,116,25)"/><text x="96.3840%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (39 samples, 1.44%)</title><rect x="96.2445%" y="693" width="1.4359%" height="15" fill="rgb(219,200,50)"/><text x="96.4945%" y="703.50"></text></g><g><title>__GI___clone (79 samples, 2.91%)</title><rect x="94.8822%" y="789" width="2.9087%" height="15" fill="rgb(245,200,0)"/><text x="95.1322%" y="799.50">__..</text></g><g><title>start_thread (46 samples, 1.69%)</title><rect x="96.0972%" y="773" width="1.6937%" height="15" fill="rgb(245,119,33)"/><text x="96.3472%" y="783.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (45 samples, 1.66%)</title><rect x="96.1340%" y="757" width="1.6568%" height="15" fill="rgb(231,125,12)"/><text x="96.3840%" y="767.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (3 samples, 0.11%)</title><rect x="97.6804%" y="741" width="0.1105%" height="15" fill="rgb(216,96,41)"/><text x="97.9304%" y="751.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (3 samples, 0.11%)</title><rect x="97.6804%" y="725" width="0.1105%" height="15" fill="rgb(248,43,45)"/><text x="97.9304%" y="735.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (3 samples, 0.11%)</title><rect x="97.6804%" y="709" width="0.1105%" height="15" fill="rgb(217,222,7)"/><text x="97.9304%" y="719.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (3 samples, 0.11%)</title><rect x="97.6804%" y="693" width="0.1105%" height="15" fill="rgb(233,28,6)"/><text x="97.9304%" y="703.50"></text></g><g><title>_dl_start_user (6 samples, 0.22%)</title><rect x="97.7909%" y="789" width="0.2209%" height="15" fill="rgb(231,218,15)"/><text x="98.0409%" y="799.50"></text></g><g><title>_dl_init (6 samples, 0.22%)</title><rect x="97.7909%" y="773" width="0.2209%" height="15" fill="rgb(226,171,48)"/><text x="98.0409%" y="783.50"></text></g><g><title>call_init.part.0 (6 samples, 0.22%)</title><rect x="97.7909%" y="757" width="0.2209%" height="15" fill="rgb(235,201,9)"/><text x="98.0409%" y="767.50"></text></g><g><title>__mmap (4 samples, 0.15%)</title><rect x="98.3800%" y="645" width="0.1473%" height="15" fill="rgb(217,80,15)"/><text x="98.6300%" y="655.50"></text></g><g><title>_dl_map_object_from_fd (9 samples, 0.33%)</title><rect x="98.2695%" y="661" width="0.3314%" height="15" fill="rgb(219,152,8)"/><text x="98.5195%" y="671.50"></text></g><g><title>_dl_map_object_deps (10 samples, 0.37%)</title><rect x="98.2695%" y="725" width="0.3682%" height="15" fill="rgb(243,107,38)"/><text x="98.5195%" y="735.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.37%)</title><rect x="98.2695%" y="709" width="0.3682%" height="15" fill="rgb(231,17,5)"/><text x="98.5195%" y="719.50"></text></g><g><title>openaux (10 samples, 0.37%)</title><rect x="98.2695%" y="693" width="0.3682%" height="15" fill="rgb(209,25,54)"/><text x="98.5195%" y="703.50"></text></g><g><title>_dl_map_object (10 samples, 0.37%)</title><rect x="98.2695%" y="677" width="0.3682%" height="15" fill="rgb(219,0,2)"/><text x="98.5195%" y="687.50"></text></g><g><title>_dl_lookup_symbol_x (13 samples, 0.48%)</title><rect x="99.3741%" y="709" width="0.4786%" height="15" fill="rgb(246,9,5)"/><text x="99.6241%" y="719.50"></text></g><g><title>do_lookup_x (9 samples, 0.33%)</title><rect x="99.5214%" y="693" width="0.3314%" height="15" fill="rgb(226,159,4)"/><text x="99.7714%" y="703.50"></text></g><g><title>check_match (3 samples, 0.11%)</title><rect x="99.7423%" y="677" width="0.1105%" height="15" fill="rgb(219,175,34)"/><text x="99.9923%" y="687.50"></text></g><g><title>_dl_relocate_object (36 samples, 1.33%)</title><rect x="98.6377%" y="725" width="1.3255%" height="15" fill="rgb(236,10,46)"/><text x="98.8877%" y="735.50"></text></g><g><title>all (2,716 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(240,211,16)"/><text x="0.2500%" y="831.50"></text></g><g><title>rustc (570 samples, 20.99%)</title><rect x="79.0133%" y="805" width="20.9867%" height="15" fill="rgb(205,3,43)"/><text x="79.2633%" y="815.50">rustc</text></g><g><title>_start (53 samples, 1.95%)</title><rect x="98.0486%" y="789" width="1.9514%" height="15" fill="rgb(245,7,22)"/><text x="98.2986%" y="799.50">_..</text></g><g><title>_dl_start (48 samples, 1.77%)</title><rect x="98.2327%" y="773" width="1.7673%" height="15" fill="rgb(239,132,32)"/><text x="98.4827%" y="783.50"></text></g><g><title>_dl_sysdep_start (48 samples, 1.77%)</title><rect x="98.2327%" y="757" width="1.7673%" height="15" fill="rgb(228,202,34)"/><text x="98.4827%" y="767.50"></text></g><g><title>dl_main (48 samples, 1.77%)</title><rect x="98.2327%" y="741" width="1.7673%" height="15" fill="rgb(254,200,22)"/><text x="98.4827%" y="751.50"></text></g></svg></svg>